
Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d0  080048d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080048d0  080048d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d0  080048d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001234  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001240  20001240  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b66f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8e  00000000  00000000  0002b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c384  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ce7a  00000000  00000000  0004a83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7e3c  00000000  00000000  000576b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ff4f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002728  00000000  00000000  000ff548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004888 	.word	0x08004888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004888 	.word	0x08004888

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc9d 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f8fb 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fa4f 	bl	8000678 <MX_GPIO_Init>
  MX_SPI2_Init();
 80001da:	f000 f9d1 	bl	8000580 <MX_SPI2_Init>
  MX_SPI3_Init();
 80001de:	f000 fa0d 	bl	80005fc <MX_SPI3_Init>
  MX_SPI1_Init();
 80001e2:	f000 f98f 	bl	8000504 <MX_SPI1_Init>
  MX_I2C2_Init();
 80001e6:	f000 f94d 	bl	8000484 <MX_I2C2_Init>
//
//		  }
//		  time+=0.01;


	  HAL_I2C_Master_Receive_IT(&hi2c2, 10<<1, &fulldata, 64);
 80001ea:	2340      	movs	r3, #64	; 0x40
 80001ec:	4a6a      	ldr	r2, [pc, #424]	; (8000398 <main+0x1d0>)
 80001ee:	2114      	movs	r1, #20
 80001f0:	486a      	ldr	r0, [pc, #424]	; (800039c <main+0x1d4>)
 80001f2:	f001 f893 	bl	800131c <HAL_I2C_Master_Receive_IT>

	  for(int i = 0; i<16;i++){
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e00b      	b.n	8000214 <main+0x4c>

		  data_00[i] = fulldata[i];
 80001fc:	4a66      	ldr	r2, [pc, #408]	; (8000398 <main+0x1d0>)
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	4413      	add	r3, r2
 8000202:	7819      	ldrb	r1, [r3, #0]
 8000204:	4a66      	ldr	r2, [pc, #408]	; (80003a0 <main+0x1d8>)
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	4413      	add	r3, r2
 800020a:	460a      	mov	r2, r1
 800020c:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<16;i++){
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3301      	adds	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	2b0f      	cmp	r3, #15
 8000218:	ddf0      	ble.n	80001fc <main+0x34>
	  }
	  for(int i = 0; i<16;i++){
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	e00b      	b.n	8000238 <main+0x70>
		  data_01[i] = fulldata[16+i];
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	3310      	adds	r3, #16
 8000224:	4a5c      	ldr	r2, [pc, #368]	; (8000398 <main+0x1d0>)
 8000226:	5cd1      	ldrb	r1, [r2, r3]
 8000228:	4a5e      	ldr	r2, [pc, #376]	; (80003a4 <main+0x1dc>)
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	4413      	add	r3, r2
 800022e:	460a      	mov	r2, r1
 8000230:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<16;i++){
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	3301      	adds	r3, #1
 8000236:	60bb      	str	r3, [r7, #8]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	2b0f      	cmp	r3, #15
 800023c:	ddf0      	ble.n	8000220 <main+0x58>
	  }
	  for(int i = 0; i<16;i++){
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e00b      	b.n	800025c <main+0x94>
		  data_10[i] = fulldata[32+i];
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3320      	adds	r3, #32
 8000248:	4a53      	ldr	r2, [pc, #332]	; (8000398 <main+0x1d0>)
 800024a:	5cd1      	ldrb	r1, [r2, r3]
 800024c:	4a56      	ldr	r2, [pc, #344]	; (80003a8 <main+0x1e0>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4413      	add	r3, r2
 8000252:	460a      	mov	r2, r1
 8000254:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<16;i++){
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3301      	adds	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b0f      	cmp	r3, #15
 8000260:	ddf0      	ble.n	8000244 <main+0x7c>
	  }
	  for(int i = 0; i<16;i++){
 8000262:	2300      	movs	r3, #0
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	e00b      	b.n	8000280 <main+0xb8>
		  data_11[i] = fulldata[48+i];
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	3330      	adds	r3, #48	; 0x30
 800026c:	4a4a      	ldr	r2, [pc, #296]	; (8000398 <main+0x1d0>)
 800026e:	5cd1      	ldrb	r1, [r2, r3]
 8000270:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <main+0x1e4>)
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	4413      	add	r3, r2
 8000276:	460a      	mov	r2, r1
 8000278:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<16;i++){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	2b0f      	cmp	r3, #15
 8000284:	ddf0      	ble.n	8000268 <main+0xa0>
	  }


	  //	//смена значений A и B
	      A = (AB_counter % 2 == 0) ? 1 : 0;
 8000286:	4b4a      	ldr	r3, [pc, #296]	; (80003b0 <main+0x1e8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b00      	cmp	r3, #0
 8000290:	bf0c      	ite	eq
 8000292:	2301      	moveq	r3, #1
 8000294:	2300      	movne	r3, #0
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	4b46      	ldr	r3, [pc, #280]	; (80003b4 <main+0x1ec>)
 800029c:	601a      	str	r2, [r3, #0]
	      B = (AB_counter / 2 % 2 == 0) ? 1 : 0;
 800029e:	4b44      	ldr	r3, [pc, #272]	; (80003b0 <main+0x1e8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	0fda      	lsrs	r2, r3, #31
 80002a4:	4413      	add	r3, r2
 80002a6:	105b      	asrs	r3, r3, #1
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf0c      	ite	eq
 80002b0:	2301      	moveq	r3, #1
 80002b2:	2300      	movne	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b3f      	ldr	r3, [pc, #252]	; (80003b8 <main+0x1f0>)
 80002ba:	601a      	str	r2, [r3, #0]
	      AB_counter = (AB_counter + 1) % 4;
 80002bc:	4b3c      	ldr	r3, [pc, #240]	; (80003b0 <main+0x1e8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	425a      	negs	r2, r3
 80002c4:	f003 0303 	and.w	r3, r3, #3
 80002c8:	f002 0203 	and.w	r2, r2, #3
 80002cc:	bf58      	it	pl
 80002ce:	4253      	negpl	r3, r2
 80002d0:	4a37      	ldr	r2, [pc, #220]	; (80003b0 <main+0x1e8>)
 80002d2:	6013      	str	r3, [r2, #0]



	  HAL_GPIO_WritePin(NOE_GPIO_Port, NOE_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002da:	4838      	ldr	r0, [pc, #224]	; (80003bc <main+0x1f4>)
 80002dc:	f000 ff76 	bl	80011cc <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, A);
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <main+0x1ec>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	2120      	movs	r1, #32
 80002ea:	4835      	ldr	r0, [pc, #212]	; (80003c0 <main+0x1f8>)
 80002ec:	f000 ff6e 	bl	80011cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, B);
 80002f0:	4b31      	ldr	r3, [pc, #196]	; (80003b8 <main+0x1f0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	2102      	movs	r1, #2
 80002fa:	4832      	ldr	r0, [pc, #200]	; (80003c4 <main+0x1fc>)
 80002fc:	f000 ff66 	bl	80011cc <HAL_GPIO_WritePin>

      //Отправка данных в зависимости от уровней A и B
      if(A==1 && B==1){
 8000300:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <main+0x1ec>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d109      	bne.n	800031c <main+0x154>
 8000308:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <main+0x1f0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d105      	bne.n	800031c <main+0x154>
      	HAL_SPI_Transmit(&hspi2, &data_11, 16,10);
 8000310:	230a      	movs	r3, #10
 8000312:	2210      	movs	r2, #16
 8000314:	4925      	ldr	r1, [pc, #148]	; (80003ac <main+0x1e4>)
 8000316:	482c      	ldr	r0, [pc, #176]	; (80003c8 <main+0x200>)
 8000318:	f003 ffb1 	bl	800427e <HAL_SPI_Transmit>
    	  //HAL_SPI_Transmit(&hspi2, &datatest, 16,10);
      }
      if(A==0 && B==1){
 800031c:	4b25      	ldr	r3, [pc, #148]	; (80003b4 <main+0x1ec>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d109      	bne.n	8000338 <main+0x170>
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <main+0x1f0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d105      	bne.n	8000338 <main+0x170>
      	HAL_SPI_Transmit(&hspi2, &data_01, 16,10);
 800032c:	230a      	movs	r3, #10
 800032e:	2210      	movs	r2, #16
 8000330:	491c      	ldr	r1, [pc, #112]	; (80003a4 <main+0x1dc>)
 8000332:	4825      	ldr	r0, [pc, #148]	; (80003c8 <main+0x200>)
 8000334:	f003 ffa3 	bl	800427e <HAL_SPI_Transmit>
    	  //HAL_SPI_Transmit(&hspi2, &datatest, 16,10);
      }
      if(A==1 && B==0){
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <main+0x1ec>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d109      	bne.n	8000354 <main+0x18c>
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <main+0x1f0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d105      	bne.n	8000354 <main+0x18c>
      	HAL_SPI_Transmit(&hspi2, &data_10, 16,10);
 8000348:	230a      	movs	r3, #10
 800034a:	2210      	movs	r2, #16
 800034c:	4916      	ldr	r1, [pc, #88]	; (80003a8 <main+0x1e0>)
 800034e:	481e      	ldr	r0, [pc, #120]	; (80003c8 <main+0x200>)
 8000350:	f003 ff95 	bl	800427e <HAL_SPI_Transmit>
    	  //HAL_SPI_Transmit(&hspi2, &datatest, 16,10);
      }
      if(A==0 && B==0){
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0x1ec>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d109      	bne.n	8000370 <main+0x1a8>
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <main+0x1f0>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d105      	bne.n	8000370 <main+0x1a8>
      	HAL_SPI_Transmit(&hspi2, &data_00, 16,10);
 8000364:	230a      	movs	r3, #10
 8000366:	2210      	movs	r2, #16
 8000368:	490d      	ldr	r1, [pc, #52]	; (80003a0 <main+0x1d8>)
 800036a:	4817      	ldr	r0, [pc, #92]	; (80003c8 <main+0x200>)
 800036c:	f003 ff87 	bl	800427e <HAL_SPI_Transmit>
    	  //HAL_SPI_Transmit(&hspi2, &datatest, 16,10);
      }

	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2180      	movs	r1, #128	; 0x80
 8000374:	4811      	ldr	r0, [pc, #68]	; (80003bc <main+0x1f4>)
 8000376:	f000 ff29 	bl	80011cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	2180      	movs	r1, #128	; 0x80
 800037e:	480f      	ldr	r0, [pc, #60]	; (80003bc <main+0x1f4>)
 8000380:	f000 ff24 	bl	80011cc <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(NOE_GPIO_Port, NOE_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	; 0x200
 800038a:	480c      	ldr	r0, [pc, #48]	; (80003bc <main+0x1f4>)
 800038c:	f000 ff1e 	bl	80011cc <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fc21 	bl	8000bd8 <HAL_Delay>
	  HAL_I2C_Master_Receive_IT(&hi2c2, 10<<1, &fulldata, 64);
 8000396:	e728      	b.n	80001ea <main+0x22>
 8000398:	200011f8 	.word	0x200011f8
 800039c:	200000b8 	.word	0x200000b8
 80003a0:	20000954 	.word	0x20000954
 80003a4:	200008dc 	.word	0x200008dc
 80003a8:	20000968 	.word	0x20000968
 80003ac:	2000002c 	.word	0x2000002c
 80003b0:	20000028 	.word	0x20000028
 80003b4:	200000b4 	.word	0x200000b4
 80003b8:	20000950 	.word	0x20000950
 80003bc:	48001000 	.word	0x48001000
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400
 80003c8:	20000050 	.word	0x20000050

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b09e      	sub	sp, #120	; 0x78
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d6:	2228      	movs	r2, #40	; 0x28
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f004 fa4c 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	223c      	movs	r2, #60	; 0x3c
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f004 fa3e 	bl	8004878 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003fc:	2303      	movs	r3, #3
 80003fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040e:	2310      	movs	r3, #16
 8000410:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000412:	2302      	movs	r3, #2
 8000414:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000416:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800041c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000420:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fbe0 	bl	8002bec <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000432:	f000 f9bd 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000436:	230f      	movs	r3, #15
 8000438:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	2302      	movs	r3, #2
 800043c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f003 fad2 	bl	80039fc <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800045e:	f000 f9a7 	bl	80007b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000462:	2340      	movs	r3, #64	; 0x40
 8000464:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4618      	mov	r0, r3
 800046e:	f003 fcab 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000478:	f000 f99a 	bl	80007b0 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3778      	adds	r7, #120	; 0x78
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_I2C2_Init+0x74>)
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <MX_I2C2_Init+0x78>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_I2C2_Init+0x74>)
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <MX_I2C2_Init+0x7c>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_I2C2_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_I2C2_Init+0x74>)
 800049c:	2201      	movs	r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004be:	480e      	ldr	r0, [pc, #56]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004c0:	f000 fe9c 	bl	80011fc <HAL_I2C_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004ca:	f000 f971 	bl	80007b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004d2:	f002 faf3 	bl	8002abc <HAL_I2CEx_ConfigAnalogFilter>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004dc:	f000 f968 	bl	80007b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004e0:	2100      	movs	r1, #0
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_I2C2_Init+0x74>)
 80004e4:	f002 fb35 	bl	8002b52 <HAL_I2CEx_ConfigDigitalFilter>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 f95f 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200000b8 	.word	0x200000b8
 80004fc:	40005800 	.word	0x40005800
 8000500:	2000090e 	.word	0x2000090e

08000504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_SPI1_Init+0x74>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <MX_SPI1_Init+0x78>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_SPI1_Init+0x74>)
 8000510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_SPI1_Init+0x74>)
 800051e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000522:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_SPI1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_SPI1_Init+0x74>)
 8000532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000536:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_SPI1_Init+0x74>)
 800053a:	2208      	movs	r2, #8
 800053c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_SPI1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_SPI1_Init+0x74>)
 8000552:	2207      	movs	r2, #7
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_SPI1_Init+0x74>)
 800055e:	2208      	movs	r2, #8
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_SPI1_Init+0x74>)
 8000564:	f003 fde0 	bl	8004128 <HAL_SPI_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 f91f 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200009bc 	.word	0x200009bc
 800057c:	40013000 	.word	0x40013000

08000580 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_SPI2_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_SPI2_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_SPI2_Init+0x74>)
 800058c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000590:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_SPI2_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_SPI2_Init+0x74>)
 800059a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800059e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005ce:	2207      	movs	r2, #7
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005da:	2208      	movs	r2, #8
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_SPI2_Init+0x74>)
 80005e0:	f003 fda2 	bl	8004128 <HAL_SPI_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 f8e1 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000050 	.word	0x20000050
 80005f8:	40003800 	.word	0x40003800

080005fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_SPI3_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_SPI3_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_SPI3_Init+0x74>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_SPI3_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI3_Init+0x74>)
 8000616:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800061a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI3_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_SPI3_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI3_Init+0x74>)
 800062a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI3_Init+0x74>)
 8000632:	2208      	movs	r2, #8
 8000634:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI3_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI3_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_SPI3_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI3_Init+0x74>)
 800064a:	2207      	movs	r2, #7
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_SPI3_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI3_Init+0x74>)
 8000656:	2208      	movs	r2, #8
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_SPI3_Init+0x74>)
 800065c:	f003 fd64 	bl	8004128 <HAL_SPI_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f8a3 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200008ec 	.word	0x200008ec
 8000674:	40003c00 	.word	0x40003c00

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <MX_GPIO_Init+0x128>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a43      	ldr	r2, [pc, #268]	; (80007a0 <MX_GPIO_Init+0x128>)
 8000694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MX_GPIO_Init+0x128>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a3d      	ldr	r2, [pc, #244]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a31      	ldr	r2, [pc, #196]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e0:	6153      	str	r3, [r2, #20]
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b29      	ldr	r3, [pc, #164]	; (80007a0 <MX_GPIO_Init+0x128>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	4826      	ldr	r0, [pc, #152]	; (80007a4 <MX_GPIO_Init+0x12c>)
 800070c:	f000 fd5e 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2102      	movs	r1, #2
 8000714:	4824      	ldr	r0, [pc, #144]	; (80007a8 <MX_GPIO_Init+0x130>)
 8000716:	f000 fd59 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCLK_Pin|NOE_Pin|NOE1_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 8000720:	4822      	ldr	r0, [pc, #136]	; (80007ac <MX_GPIO_Init+0x134>)
 8000722:	f000 fd53 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073c:	f000 fbcc 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_Pin */
  GPIO_InitStruct.Pin = A_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_GPIO_Init+0x12c>)
 8000758:	f000 fbbe 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_Pin */
  GPIO_InitStruct.Pin = B_Pin;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_GPIO_Init+0x130>)
 8000774:	f000 fbb0 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin NOE_Pin NOE1_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|NOE_Pin|NOE1_Pin;
 8000778:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_GPIO_Init+0x134>)
 8000792:	f000 fba1 	bl	8000ed8 <HAL_GPIO_Init>

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000800 	.word	0x48000800
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48001000 	.word	0x48001000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_I2C_MspInit+0x90>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d131      	bne.n	800088a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_I2C_MspInit+0x94>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <HAL_I2C_MspInit+0x94>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <HAL_I2C_MspInit+0x94>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800083e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000844:	2312      	movs	r3, #18
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000850:	2304      	movs	r3, #4
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fb3b 	bl	8000ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_I2C_MspInit+0x94>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <HAL_I2C_MspInit+0x94>)
 8000868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_I2C_MspInit+0x94>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2021      	movs	r0, #33	; 0x21
 8000880:	f000 faa9 	bl	8000dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000884:	2021      	movs	r0, #33	; 0x21
 8000886:	f000 fac2 	bl	8000e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40005800 	.word	0x40005800
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a55      	ldr	r2, [pc, #340]	; (8000a10 <HAL_SPI_MspInit+0x174>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d129      	bne.n	8000912 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008be:	4b55      	ldr	r3, [pc, #340]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a54      	ldr	r2, [pc, #336]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b52      	ldr	r3, [pc, #328]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b4f      	ldr	r3, [pc, #316]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a4e      	ldr	r2, [pc, #312]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	61fb      	str	r3, [r7, #28]
 80008ec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fe:	2305      	movs	r3, #5
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f000 fae4 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000910:	e079      	b.n	8000a06 <HAL_SPI_MspInit+0x16a>
  else if(hspi->Instance==SPI2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a40      	ldr	r2, [pc, #256]	; (8000a18 <HAL_SPI_MspInit+0x17c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d146      	bne.n	80009aa <HAL_SPI_MspInit+0x10e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a3c      	ldr	r2, [pc, #240]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	61d3      	str	r3, [r2, #28]
 8000928:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 800093a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093e:	6153      	str	r3, [r2, #20]
 8000940:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 8000952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000956:	6153      	str	r3, [r2, #20]
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000976:	2305      	movs	r3, #5
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4826      	ldr	r0, [pc, #152]	; (8000a1c <HAL_SPI_MspInit+0x180>)
 8000982:	f000 faa9 	bl	8000ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000998:	2305      	movs	r3, #5
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	4619      	mov	r1, r3
 80009a2:	481f      	ldr	r0, [pc, #124]	; (8000a20 <HAL_SPI_MspInit+0x184>)
 80009a4:	f000 fa98 	bl	8000ed8 <HAL_GPIO_Init>
}
 80009a8:	e02d      	b.n	8000a06 <HAL_SPI_MspInit+0x16a>
  else if(hspi->Instance==SPI3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_SPI_MspInit+0x188>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d128      	bne.n	8000a06 <HAL_SPI_MspInit+0x16a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	61d3      	str	r3, [r2, #28]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_SPI_MspInit+0x178>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80009e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f6:	2306      	movs	r3, #6
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <HAL_SPI_MspInit+0x18c>)
 8000a02:	f000 fa69 	bl	8000ed8 <HAL_GPIO_Init>
}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40013000 	.word	0x40013000
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40003800 	.word	0x40003800
 8000a1c:	48001400 	.word	0x48001400
 8000a20:	48000400 	.word	0x48000400
 8000a24:	40003c00 	.word	0x40003c00
 8000a28:	48000800 	.word	0x48000800

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f88e 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <I2C2_EV_IRQHandler+0x10>)
 8000a86:	f000 fcb9 	bl	80013fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000b8 	.word	0x200000b8

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000abc:	f7ff ffea 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f003 fea3 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aea:	f7ff fb6d 	bl	80001c8 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000afc:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b04:	20001240 	.word	0x20001240

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 f94f 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	200f      	movs	r0, #15
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fe48 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f967 	bl	8000e2a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f000 f92f 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	2000123c 	.word	0x2000123c

08000bc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	2000123c 	.word	0x2000123c

08000bd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d005      	beq.n	8000e64 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e027      	b.n	8000eb4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 020e 	bic.w	r2, r2, #14
 8000e72:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
    } 
  }
  return status;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e154      	b.n	8001192 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8146 	beq.w	800118c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d005      	beq.n	8000f18 <HAL_GPIO_Init+0x40>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d017      	beq.n	8000fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80a0 	beq.w	800118c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <HAL_GPIO_Init+0x2d8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a57      	ldr	r2, [pc, #348]	; (80011b0 <HAL_GPIO_Init+0x2d8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <HAL_GPIO_Init+0x2d8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001064:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_GPIO_Init+0x2dc>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800108e:	d019      	beq.n	80010c4 <HAL_GPIO_Init+0x1ec>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <HAL_GPIO_Init+0x2e0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d013      	beq.n	80010c0 <HAL_GPIO_Init+0x1e8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a48      	ldr	r2, [pc, #288]	; (80011bc <HAL_GPIO_Init+0x2e4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00d      	beq.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <HAL_GPIO_Init+0x2e8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x1e0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_GPIO_Init+0x2ec>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_GPIO_Init+0x1dc>
 80010b0:	2304      	movs	r3, #4
 80010b2:	e008      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010b4:	2305      	movs	r3, #5
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010b8:	2303      	movs	r3, #3
 80010ba:	e004      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010bc:	2302      	movs	r3, #2
 80010be:	e002      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <HAL_GPIO_Init+0x1ee>
 80010c4:	2300      	movs	r3, #0
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	f002 0203 	and.w	r2, r2, #3
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4093      	lsls	r3, r2
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d6:	4937      	ldr	r1, [pc, #220]	; (80011b4 <HAL_GPIO_Init+0x2dc>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e4:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800115c:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_GPIO_Init+0x2f0>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3301      	adds	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa22 f303 	lsr.w	r3, r2, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f aea3 	bne.w	8000ee8 <HAL_GPIO_Init+0x10>
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	48000400 	.word	0x48000400
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00
 80011c4:	48001000 	.word	0x48001000
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e081      	b.n	8001312 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d106      	bne.n	8001228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff faee 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2224      	movs	r2, #36	; 0x24
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800124c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	e006      	b.n	8001284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d104      	bne.n	8001296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69d9      	ldr	r1, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1a      	ldr	r2, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
 800132c:	4613      	mov	r3, r2
 800132e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b20      	cmp	r3, #32
 800133a:	d153      	bne.n	80013e4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800134a:	d101      	bne.n	8001350 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800134c:	2302      	movs	r3, #2
 800134e:	e04a      	b.n	80013e6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_I2C_Master_Receive_IT+0x42>
 800135a:	2302      	movs	r3, #2
 800135c:	e043      	b.n	80013e6 <HAL_I2C_Master_Receive_IT+0xca>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2222      	movs	r2, #34	; 0x22
 800136a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2210      	movs	r2, #16
 8001372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	893a      	ldrh	r2, [r7, #8]
 8001386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4a18      	ldr	r2, [pc, #96]	; (80013f4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8001392:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29b      	uxth	r3, r3
 800139a:	2bff      	cmp	r3, #255	; 0xff
 800139c:	d906      	bls.n	80013ac <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80013a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e007      	b.n	80013bc <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80013b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ba:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	8979      	ldrh	r1, [r7, #10]
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <HAL_I2C_Master_Receive_IT+0xdc>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f001 fa5e 	bl	800288c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80013d8:	2102      	movs	r1, #2
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f001 fa88 	bl	80028f0 <I2C_Enable_IRQ>

    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	ffff0000 	.word	0xffff0000
 80013f4:	08001501 	.word	0x08001501
 80013f8:	80002400 	.word	0x80002400

080013fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
  }
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	4613      	mov	r3, r2
 800148e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af02      	add	r7, sp, #8
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <I2C_Master_ISR_IT+0x1e>
 800151a:	2302      	movs	r3, #2
 800151c:	e114      	b.n	8001748 <I2C_Master_ISR_IT+0x248>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d013      	beq.n	800155a <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2210      	movs	r2, #16
 8001544:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f043 0204 	orr.w	r2, r3, #4
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f001 f957 	bl	8002806 <I2C_Flush_TXDR>
 8001558:	e0e1      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d023      	beq.n	80015ae <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800156e:	2b00      	cmp	r3, #0
 8001570:	d01d      	beq.n	80015ae <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015ac:	e0b7      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01e      	beq.n	80015f8 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d018      	beq.n	80015f8 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015f6:	e092      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	09db      	lsrs	r3, r3, #7
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05d      	beq.n	80016c0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800160c:	2b00      	cmp	r3, #0
 800160e:	d057      	beq.n	80016c0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d040      	beq.n	800169c <I2C_Master_ISR_IT+0x19c>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161e:	2b00      	cmp	r3, #0
 8001620:	d13c      	bne.n	800169c <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	b29b      	uxth	r3, r3
 800162a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800162e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d90e      	bls.n	8001658 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	b2da      	uxtb	r2, r3
 8001646:	8a79      	ldrh	r1, [r7, #18]
 8001648:	2300      	movs	r3, #0
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f001 f91b 	bl	800288c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001656:	e032      	b.n	80016be <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800166a:	d00b      	beq.n	8001684 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001670:	b2da      	uxtb	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	8a79      	ldrh	r1, [r7, #18]
 8001678:	2000      	movs	r0, #0
 800167a:	9000      	str	r0, [sp, #0]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 f905 	bl	800288c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001682:	e01c      	b.n	80016be <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8a79      	ldrh	r1, [r7, #18]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f001 f8f9 	bl	800288c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800169a:	e010      	b.n	80016be <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016aa:	d003      	beq.n	80016b4 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fccd 	bl	800204c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016b2:	e034      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80016b4:	2140      	movs	r1, #64	; 0x40
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 ff8e 	bl	80025d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016bc:	e02f      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
 80016be:	e02e      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	099b      	lsrs	r3, r3, #6
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d028      	beq.n	800171e <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d119      	bne.n	8001716 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016f0:	d015      	beq.n	800171e <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016fa:	d108      	bne.n	800170e <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	e007      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fc9c 	bl	800204c <I2C_ITMasterSeqCplt>
 8001714:	e003      	b.n	800171e <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 ff5d 	bl	80025d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 fd23 	bl	8002184 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <I2C_Slave_ISR_IT+0x24>
 8001770:	2302      	movs	r3, #2
 8001772:	e0ec      	b.n	800194e <I2C_Slave_ISR_IT+0x1fe>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fdbe 	bl	8002318 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d04d      	beq.n	8001844 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d047      	beq.n	8001844 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d128      	bne.n	8001810 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b28      	cmp	r3, #40	; 0x28
 80017c8:	d108      	bne.n	80017dc <I2C_Slave_ISR_IT+0x8c>
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017d0:	d104      	bne.n	80017dc <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017d2:	6939      	ldr	r1, [r7, #16]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fea9 	bl	800252c <I2C_ITListenCplt>
 80017da:	e032      	b.n	8001842 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b29      	cmp	r3, #41	; 0x29
 80017e6:	d10e      	bne.n	8001806 <I2C_Slave_ISR_IT+0xb6>
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017ee:	d00a      	beq.n	8001806 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2210      	movs	r2, #16
 80017f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f001 f804 	bl	8002806 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fc61 	bl	80020c6 <I2C_ITSlaveSeqCplt>
 8001804:	e01d      	b.n	8001842 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2210      	movs	r2, #16
 800180c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800180e:	e096      	b.n	800193e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2210      	movs	r2, #16
 8001816:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <I2C_Slave_ISR_IT+0xe4>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	f040 8085 	bne.w	800193e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	4619      	mov	r1, r3
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fecc 	bl	80025d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001840:	e07d      	b.n	800193e <I2C_Slave_ISR_IT+0x1ee>
 8001842:	e07c      	b.n	800193e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d030      	beq.n	80018b2 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001858:	2b00      	cmp	r3, #0
 800185a:	d02a      	beq.n	80018b2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29b      	uxth	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d018      	beq.n	8001898 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d14f      	bne.n	8001942 <I2C_Slave_ISR_IT+0x1f2>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018a8:	d04b      	beq.n	8001942 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 fc0b 	bl	80020c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80018b0:	e047      	b.n	8001942 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00a      	beq.n	80018d4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80018ca:	6939      	ldr	r1, [r7, #16]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fb39 	bl	8001f44 <I2C_ITAddrCplt>
 80018d2:	e037      	b.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d031      	beq.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02b      	beq.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d018      	beq.n	8001928 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
 8001926:	e00d      	b.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192e:	d002      	beq.n	8001936 <I2C_Slave_ISR_IT+0x1e6>
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fbc5 	bl	80020c6 <I2C_ITSlaveSeqCplt>
 800193c:	e002      	b.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800193e:	bf00      	nop
 8001940:	e000      	b.n	8001944 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001942:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b088      	sub	sp, #32
 800195a:	af02      	add	r7, sp, #8
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <I2C_Master_ISR_DMA+0x1a>
 800196c:	2302      	movs	r3, #2
 800196e:	e0e1      	b.n	8001b34 <I2C_Master_ISR_DMA+0x1de>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800198c:	2b00      	cmp	r3, #0
 800198e:	d011      	beq.n	80019b4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2210      	movs	r2, #16
 8001996:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f043 0204 	orr.w	r2, r3, #4
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80019a4:	2120      	movs	r1, #32
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 ffa2 	bl	80028f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 ff2a 	bl	8002806 <I2C_Flush_TXDR>
 80019b2:	e0ba      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	09db      	lsrs	r3, r3, #7
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d072      	beq.n	8001aa6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d06c      	beq.n	8001aa6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019da:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d04e      	beq.n	8001a84 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d906      	bls.n	8001a0c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e010      	b.n	8001a2e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a1e:	d003      	beq.n	8001a28 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e002      	b.n	8001a2e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	8a79      	ldrh	r1, [r7, #18]
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 ff25 	bl	800288c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b22      	cmp	r3, #34	; 0x22
 8001a5e:	d108      	bne.n	8001a72 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a70:	e05b      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a80:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a82:	e052      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a92:	d003      	beq.n	8001a9c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fad9 	bl	800204c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001a9a:	e046      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a9c:	2140      	movs	r1, #64	; 0x40
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fd9a 	bl	80025d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001aa4:	e041      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d029      	beq.n	8001b06 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d023      	beq.n	8001b06 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d119      	bne.n	8001afc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ad6:	d027      	beq.n	8001b28 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae0:	d108      	bne.n	8001af4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001af0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001af2:	e019      	b.n	8001b28 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 faa9 	bl	800204c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001afa:	e015      	b.n	8001b28 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fd6a 	bl	80025d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b04:	e010      	b.n	8001b28 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	095b      	lsrs	r3, r3, #5
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d005      	beq.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fb2f 	bl	8002184 <I2C_ITMasterCplt>
 8001b26:	e000      	b.n	8001b2a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001b28:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <I2C_Mem_ISR_DMA+0x240>)
 8001b4a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <I2C_Mem_ISR_DMA+0x1e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e10c      	b.n	8001d74 <I2C_Mem_ISR_DMA+0x238>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d017      	beq.n	8001b9e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d011      	beq.n	8001b9e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001b8e:	2120      	movs	r1, #32
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fead 	bl	80028f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fe35 	bl	8002806 <I2C_Flush_TXDR>
 8001b9c:	e0e5      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00f      	beq.n	8001bca <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d009      	beq.n	8001bca <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8001bc8:	e0cf      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	09db      	lsrs	r3, r3, #7
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d05c      	beq.n	8001c90 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	099b      	lsrs	r3, r3, #6
 8001bda:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d056      	beq.n	8001c90 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001be2:	2110      	movs	r1, #16
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fe83 	bl	80028f0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d048      	beq.n	8001c86 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d910      	bls.n	8001c20 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	22ff      	movs	r2, #255	; 0xff
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	b299      	uxth	r1, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 fe37 	bl	800288c <I2C_TransferConfig>
 8001c1e:	e011      	b.n	8001c44 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fe24 	bl	800288c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b22      	cmp	r3, #34	; 0x22
 8001c60:	d108      	bne.n	8001c74 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c72:	e07a      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c84:	e071      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c86:	2140      	movs	r1, #64	; 0x40
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fca5 	bl	80025d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001c8e:	e06c      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d056      	beq.n	8001d4a <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d050      	beq.n	8001d4a <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b22      	cmp	r3, #34	; 0x22
 8001cb2:	d101      	bne.n	8001cb8 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <I2C_Mem_ISR_DMA+0x244>)
 8001cb6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d910      	bls.n	8001ce4 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fdd5 	bl	800288c <I2C_TransferConfig>
 8001ce2:	e011      	b.n	8001d08 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	b299      	uxth	r1, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fdc2 	bl	800288c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b22      	cmp	r3, #34	; 0x22
 8001d24:	d108      	bne.n	8001d38 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d34:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d36:	e018      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d46:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d48:	e00f      	b.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fa0d 	bl	8002184 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	80002000 	.word	0x80002000
 8001d80:	80002400 	.word	0x80002400

08001d84 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <I2C_Slave_ISR_DMA+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0c9      	b.n	8001f3c <I2C_Slave_ISR_DMA+0x1b8>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 faa4 	bl	8002318 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 809a 	beq.w	8001f12 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8093 	beq.w	8001f12 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0b9b      	lsrs	r3, r3, #14
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0bdb      	lsrs	r3, r3, #15
 8001dfc:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07f      	beq.n	8001f04 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00d      	beq.n	8001e28 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0bdb      	lsrs	r3, r3, #15
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0b9b      	lsrs	r3, r3, #14
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d128      	bne.n	8001ea4 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b28      	cmp	r3, #40	; 0x28
 8001e5c:	d108      	bne.n	8001e70 <I2C_Slave_ISR_DMA+0xec>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e64:	d104      	bne.n	8001e70 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fb5f 	bl	800252c <I2C_ITListenCplt>
 8001e6e:	e048      	b.n	8001f02 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b29      	cmp	r3, #41	; 0x29
 8001e7a:	d10e      	bne.n	8001e9a <I2C_Slave_ISR_DMA+0x116>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e82:	d00a      	beq.n	8001e9a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fcba 	bl	8002806 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f917 	bl	80020c6 <I2C_ITSlaveSeqCplt>
 8001e98:	e033      	b.n	8001f02 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ea2:	e034      	b.n	8001f0e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	f043 0204 	orr.w	r2, r3, #4
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebe:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <I2C_Slave_ISR_DMA+0x14a>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d11f      	bne.n	8001f0e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	2b21      	cmp	r3, #33	; 0x21
 8001ed2:	d002      	beq.n	8001eda <I2C_Slave_ISR_DMA+0x156>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b29      	cmp	r3, #41	; 0x29
 8001ed8:	d103      	bne.n	8001ee2 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2221      	movs	r2, #33	; 0x21
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee0:	e008      	b.n	8001ef4 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	2b22      	cmp	r3, #34	; 0x22
 8001ee6:	d002      	beq.n	8001eee <I2C_Slave_ISR_DMA+0x16a>
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b2a      	cmp	r3, #42	; 0x2a
 8001eec:	d102      	bne.n	8001ef4 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2222      	movs	r2, #34	; 0x22
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb6c 	bl	80025d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8001f00:	e005      	b.n	8001f0e <I2C_Slave_ISR_DMA+0x18a>
 8001f02:	e004      	b.n	8001f0e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f0c:	e011      	b.n	8001f32 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001f0e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f10:	e00f      	b.n	8001f32 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	08db      	lsrs	r3, r3, #3
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f809 	bl	8001f44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f5a:	2b28      	cmp	r3, #40	; 0x28
 8001f5c:	d16a      	bne.n	8002034 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001f7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001f98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d138      	bne.n	8002014 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001fa2:	897b      	ldrh	r3, [r7, #10]
 8001fa4:	09db      	lsrs	r3, r3, #7
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	89bb      	ldrh	r3, [r7, #12]
 8001faa:	4053      	eors	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f003 0306 	and.w	r3, r3, #6
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d11c      	bne.n	8001ff0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d13b      	bne.n	8002044 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fe2:	89ba      	ldrh	r2, [r7, #12]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fa49 	bl	8001480 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001fee:	e029      	b.n	8002044 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fd01 	bl	8002a00 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002006:	89ba      	ldrh	r2, [r7, #12]
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fa37 	bl	8001480 <HAL_I2C_AddrCallback>
}
 8002012:	e017      	b.n	8002044 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fcf1 	bl	8002a00 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002026:	89ba      	ldrh	r2, [r7, #12]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fa27 	bl	8001480 <HAL_I2C_AddrCallback>
}
 8002032:	e007      	b.n	8002044 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2208      	movs	r2, #8
 800203a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b21      	cmp	r3, #33	; 0x21
 8002066:	d115      	bne.n	8002094 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2211      	movs	r2, #17
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800207c:	2101      	movs	r1, #1
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fcbe 	bl	8002a00 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff f9cf 	bl	8001430 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002092:	e014      	b.n	80020be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2212      	movs	r2, #18
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020a8:	2102      	movs	r1, #2
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fca8 	bl	8002a00 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff f9c3 	bl	8001444 <HAL_I2C_MasterRxCpltCallback>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	0b9b      	lsrs	r3, r3, #14
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e00d      	b.n	8002118 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	0bdb      	lsrs	r3, r3, #15
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002116:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b29      	cmp	r3, #41	; 0x29
 8002122:	d112      	bne.n	800214a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2228      	movs	r2, #40	; 0x28
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2221      	movs	r2, #33	; 0x21
 8002130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002132:	2101      	movs	r1, #1
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fc63 	bl	8002a00 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff f988 	bl	8001458 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002148:	e017      	b.n	800217a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b2a      	cmp	r3, #42	; 0x2a
 8002154:	d111      	bne.n	800217a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2228      	movs	r2, #40	; 0x28
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2222      	movs	r2, #34	; 0x22
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002164:	2102      	movs	r1, #2
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fc4a 	bl	8002a00 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff f979 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2220      	movs	r2, #32
 8002198:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b21      	cmp	r3, #33	; 0x21
 80021a4:	d107      	bne.n	80021b6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021a6:	2101      	movs	r1, #1
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fc29 	bl	8002a00 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2211      	movs	r2, #17
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	e00c      	b.n	80021d0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b22      	cmp	r3, #34	; 0x22
 80021c0:	d106      	bne.n	80021d0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021c2:	2102      	movs	r1, #2
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc1b 	bl	8002a00 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2212      	movs	r2, #18
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <I2C_ITMasterCplt+0x18c>)
 80021dc:	400b      	ands	r3, r1
 80021de:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <I2C_ITMasterCplt+0x190>)
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d009      	beq.n	800220c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2210      	movs	r2, #16
 80021fe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f043 0204 	orr.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b60      	cmp	r3, #96	; 0x60
 8002216:	d10b      	bne.n	8002230 <I2C_ITMasterCplt+0xac>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	b2db      	uxtb	r3, r3
 800222c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800222e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fae8 	bl	8002806 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b60      	cmp	r3, #96	; 0x60
 8002246:	d002      	beq.n	800224e <I2C_ITMasterCplt+0xca>
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9bf 	bl	80025d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800225a:	e054      	b.n	8002306 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b21      	cmp	r3, #33	; 0x21
 8002266:	d124      	bne.n	80022b2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d10b      	bne.n	800229a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff f90c 	bl	80014b0 <HAL_I2C_MemTxCpltCallback>
}
 8002298:	e035      	b.n	8002306 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff f8c0 	bl	8001430 <HAL_I2C_MasterTxCpltCallback>
}
 80022b0:	e029      	b.n	8002306 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b22      	cmp	r3, #34	; 0x22
 80022bc:	d123      	bne.n	8002306 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b40      	cmp	r3, #64	; 0x40
 80022d6:	d10b      	bne.n	80022f0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff f8eb 	bl	80014c4 <HAL_I2C_MemRxCpltCallback>
}
 80022ee:	e00a      	b.n	8002306 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff f89f 	bl	8001444 <HAL_I2C_MasterRxCpltCallback>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	fe00e800 	.word	0xfe00e800
 8002314:	ffff0000 	.word	0xffff0000

08002318 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002334:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b21      	cmp	r3, #33	; 0x21
 8002342:	d002      	beq.n	800234a <I2C_ITSlaveCplt+0x32>
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b29      	cmp	r3, #41	; 0x29
 8002348:	d108      	bne.n	800235c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800234a:	f248 0101 	movw	r1, #32769	; 0x8001
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fb56 	bl	8002a00 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2221      	movs	r2, #33	; 0x21
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
 800235a:	e00d      	b.n	8002378 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b22      	cmp	r3, #34	; 0x22
 8002360:	d002      	beq.n	8002368 <I2C_ITSlaveCplt+0x50>
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b2a      	cmp	r3, #42	; 0x2a
 8002366:	d107      	bne.n	8002378 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002368:	f248 0102 	movw	r1, #32770	; 0x8002
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb47 	bl	8002a00 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2222      	movs	r2, #34	; 0x22
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <I2C_ITSlaveCplt+0x20c>)
 8002394:	400b      	ands	r3, r1
 8002396:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa34 	bl	8002806 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	0b9b      	lsrs	r3, r3, #14
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d013      	beq.n	80023d2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d020      	beq.n	8002404 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d0:	e018      	b.n	8002404 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	0bdb      	lsrs	r3, r3, #15
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00c      	beq.n	8002452 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8a7 	bl	80025d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b28      	cmp	r3, #40	; 0x28
 8002494:	d141      	bne.n	800251a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f847 	bl	800252c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800249e:	e03c      	b.n	800251a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024a8:	d014      	beq.n	80024d4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fe0b 	bl	80020c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <I2C_ITSlaveCplt+0x210>)
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe ffe5 	bl	800149c <HAL_I2C_ListenCpltCallback>
}
 80024d2:	e022      	b.n	800251a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b22      	cmp	r3, #34	; 0x22
 80024de:	d10e      	bne.n	80024fe <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe ffb8 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
}
 80024fc:	e00d      	b.n	800251a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fe ff9f 	bl	8001458 <HAL_I2C_SlaveTxCpltCallback>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	fe00e800 	.word	0xfe00e800
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <I2C_ITListenCplt+0xa8>)
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f043 0204 	orr.w	r2, r3, #4
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa26 	bl	8002a00 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe ff69 	bl	800149c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a6d      	ldr	r2, [pc, #436]	; (80027ac <I2C_ITError+0x1d4>)
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b28      	cmp	r3, #40	; 0x28
 800260e:	d005      	beq.n	800261c <I2C_ITError+0x44>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b29      	cmp	r3, #41	; 0x29
 8002614:	d002      	beq.n	800261c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b2a      	cmp	r3, #42	; 0x2a
 800261a:	d10b      	bne.n	8002634 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800261c:	2103      	movs	r1, #3
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f9ee 	bl	8002a00 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2228      	movs	r2, #40	; 0x28
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a60      	ldr	r2, [pc, #384]	; (80027b0 <I2C_ITError+0x1d8>)
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
 8002632:	e030      	b.n	8002696 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002634:	f248 0103 	movw	r1, #32771	; 0x8003
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9e1 	bl	8002a00 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8e1 	bl	8002806 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b60      	cmp	r3, #96	; 0x60
 800264e:	d01f      	beq.n	8002690 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b20      	cmp	r3, #32
 8002664:	d114      	bne.n	8002690 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d109      	bne.n	8002688 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2210      	movs	r2, #16
 800267a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0204 	orr.w	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2220      	movs	r2, #32
 800268e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d039      	beq.n	8002718 <I2C_ITError+0x140>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b11      	cmp	r3, #17
 80026a8:	d002      	beq.n	80026b0 <I2C_ITError+0xd8>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b21      	cmp	r3, #33	; 0x21
 80026ae:	d133      	bne.n	8002718 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026be:	d107      	bne.n	80026d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fbf2 	bl	8000ebe <HAL_DMA_GetState>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d017      	beq.n	8002710 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e4:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <I2C_ITError+0x1dc>)
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fba4 	bl	8000e42 <HAL_DMA_Abort_IT>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d04d      	beq.n	800279c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800270a:	4610      	mov	r0, r2
 800270c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800270e:	e045      	b.n	800279c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f851 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002716:	e041      	b.n	800279c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d039      	beq.n	8002794 <I2C_ITError+0x1bc>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b12      	cmp	r3, #18
 8002724:	d002      	beq.n	800272c <I2C_ITError+0x154>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b22      	cmp	r3, #34	; 0x22
 800272a:	d133      	bne.n	8002794 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273a:	d107      	bne.n	800274c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fbb4 	bl	8000ebe <HAL_DMA_GetState>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d017      	beq.n	800278c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <I2C_ITError+0x1dc>)
 8002762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fb66 	bl	8000e42 <HAL_DMA_Abort_IT>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d011      	beq.n	80027a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002786:	4610      	mov	r0, r2
 8002788:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800278a:	e009      	b.n	80027a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f813 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002792:	e005      	b.n	80027a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f80f 	bl	80027b8 <I2C_TreatErrorCallback>
  }
}
 800279a:	e002      	b.n	80027a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800279c:	bf00      	nop
 800279e:	e000      	b.n	80027a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a0:	bf00      	nop
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	ffff0000 	.word	0xffff0000
 80027b0:	08001751 	.word	0x08001751
 80027b4:	0800284f 	.word	0x0800284f

080027b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d10e      	bne.n	80027ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fe82 	bl	80014ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027e8:	e009      	b.n	80027fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fe6d 	bl	80014d8 <HAL_I2C_ErrorCallback>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b02      	cmp	r3, #2
 800281a:	d103      	bne.n	8002824 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	619a      	str	r2, [r3, #24]
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2200      	movs	r2, #0
 800286a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	2200      	movs	r2, #0
 800287a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ff9b 	bl	80027b8 <I2C_TreatErrorCallback>
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	817b      	strh	r3, [r7, #10]
 800289a:	4613      	mov	r3, r2
 800289c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028a4:	7a7b      	ldrb	r3, [r7, #9]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	0d5b      	lsrs	r3, r3, #21
 80028c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <I2C_TransferConfig+0x60>)
 80028cc:	430b      	orrs	r3, r1
 80028ce:	43db      	mvns	r3, r3
 80028d0:	ea02 0103 	and.w	r1, r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	03ff63ff 	.word	0x03ff63ff

080028f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <I2C_Enable_IRQ+0x104>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d032      	beq.n	8002970 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800290e:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <I2C_Enable_IRQ+0x108>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d02d      	beq.n	8002970 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <I2C_Enable_IRQ+0x10c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d028      	beq.n	8002970 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800291e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da03      	bge.n	800292e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800292c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800293e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002950:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	2b10      	cmp	r3, #16
 8002956:	d103      	bne.n	8002960 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800295e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	2b20      	cmp	r3, #32
 8002964:	d138      	bne.n	80029d8 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f043 0320 	orr.w	r3, r3, #32
 800296c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800296e:	e033      	b.n	80029d8 <I2C_Enable_IRQ+0xe8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da03      	bge.n	8002980 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800297e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002990:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80029a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d103      	bne.n	80029b2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80029b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d103      	bne.n	80029c0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029be:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <I2C_Enable_IRQ+0x10c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d006      	beq.n	80029d8 <I2C_Enable_IRQ+0xe8>
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	2b40      	cmp	r3, #64	; 0x40
 80029ce:	d103      	bne.n	80029d8 <I2C_Enable_IRQ+0xe8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	08001957 	.word	0x08001957
 80029f8:	08001d85 	.word	0x08001d85
 80029fc:	08001b3d 	.word	0x08001b3d

08002a00 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002a20:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a2e:	2b28      	cmp	r3, #40	; 0x28
 8002a30:	d003      	beq.n	8002a3a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a38:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00f      	beq.n	8002a64 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002a4a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a58:	2b28      	cmp	r3, #40	; 0x28
 8002a5a:	d003      	beq.n	8002a64 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a62:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da03      	bge.n	8002a74 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d103      	bne.n	8002a82 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d103      	bne.n	8002a90 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f043 0320 	orr.w	r3, r3, #32
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	2b40      	cmp	r3, #64	; 0x40
 8002a94:	d103      	bne.n	8002a9e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	400a      	ands	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	d138      	bne.n	8002b44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e032      	b.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d139      	bne.n	8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e033      	b.n	8002bde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ba4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f000 bef4 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 816a 	beq.w	8002eea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c16:	4bb3      	ldr	r3, [pc, #716]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c22:	4bb0      	ldr	r3, [pc, #704]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d159      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
 8002c2e:	4bad      	ldr	r3, [pc, #692]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d152      	bne.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
 8002c3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_OscConfig+0x82>
 8002c68:	4b9e      	ldr	r3, [pc, #632]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0xae>
 8002c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002c8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002c96:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ca2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ca6:	fa92 f2a2 	rbit	r2, r2
 8002caa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cb2:	fab2 f282 	clz	r2, r2
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	f042 0220 	orr.w	r2, r2, #32
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	f002 021f 	and.w	r2, r2, #31
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 810c 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x2fc>
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8106 	bne.w	8002ee8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f000 be86 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x110>
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7c      	ldr	r2, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e030      	b.n	8002d5e <HAL_RCC_OscConfig+0x172>
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x134>
 8002d06:	4b77      	ldr	r3, [pc, #476]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a76      	ldr	r2, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b74      	ldr	r3, [pc, #464]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a73      	ldr	r2, [pc, #460]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01e      	b.n	8002d5e <HAL_RCC_OscConfig+0x172>
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x15a>
 8002d2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6c      	ldr	r2, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b6a      	ldr	r3, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a69      	ldr	r2, [pc, #420]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x172>
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5e:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	f023 020f 	bic.w	r2, r3, #15
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	495d      	ldr	r1, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d059      	beq.n	8002e30 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fd ff20 	bl	8000bc0 <HAL_GetTick>
 8002d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d86:	f7fd ff1b 	bl	8000bc0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d902      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	f000 be29 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
 8002d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002db0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d102      	bne.n	8002dce <HAL_RCC_OscConfig+0x1e2>
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x20e>
 8002dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dd2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002de6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002dea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dfe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e06:	fa92 f2a2 	rbit	r2, r2
 8002e0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ab      	beq.n	8002d86 <HAL_RCC_OscConfig+0x19a>
 8002e2e:	e05c      	b.n	8002eea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fd fec6 	bl	8000bc0 <HAL_GetTick>
 8002e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3a:	f7fd fec1 	bl	8000bc0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d902      	bls.n	8002e50 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f000 bdcf 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002e64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d102      	bne.n	8002e82 <HAL_RCC_OscConfig+0x296>
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e015      	b.n	8002eae <HAL_RCC_OscConfig+0x2c2>
 8002e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002e96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002e9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_RCC_OscConfig+0x2f8>)
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eb2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002eb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002eba:	fa92 f2a2 	rbit	r2, r2
 8002ebe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ec2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	f042 0220 	orr.w	r2, r2, #32
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	f002 021f 	and.w	r2, r2, #31
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ab      	bne.n	8002e3a <HAL_RCC_OscConfig+0x24e>
 8002ee2:	e002      	b.n	8002eea <HAL_RCC_OscConfig+0x2fe>
 8002ee4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 816f 	beq.w	80031d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002efa:	4bd0      	ldr	r3, [pc, #832]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f06:	4bcd      	ldr	r3, [pc, #820]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d16c      	bne.n	8002fec <HAL_RCC_OscConfig+0x400>
 8002f12:	4bca      	ldr	r3, [pc, #808]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d166      	bne.n	8002fec <HAL_RCC_OscConfig+0x400>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HAL_RCC_OscConfig+0x362>
 8002f48:	4bbc      	ldr	r3, [pc, #752]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e013      	b.n	8002f76 <HAL_RCC_OscConfig+0x38a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002f60:	2302      	movs	r3, #2
 8002f62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002f66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f72:	4bb2      	ldr	r3, [pc, #712]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2202      	movs	r2, #2
 8002f78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002f7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002f80:	fa92 f2a2 	rbit	r2, r2
 8002f84:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002f88:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f002 021f 	and.w	r2, r2, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3cc>
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f000 bd1b 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4ba0      	ldr	r3, [pc, #640]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	21f8      	movs	r1, #248	; 0xf8
 8002fc8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002fd0:	fa91 f1a1 	rbit	r1, r1
 8002fd4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002fd8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002fdc:	fab1 f181 	clz	r1, r1
 8002fe0:	b2c9      	uxtb	r1, r1
 8002fe2:	408b      	lsls	r3, r1
 8002fe4:	4995      	ldr	r1, [pc, #596]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e0f5      	b.n	80031d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8085 	beq.w	8003102 <HAL_RCC_OscConfig+0x516>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800300a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	461a      	mov	r2, r3
 8003020:	2301      	movs	r3, #1
 8003022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd fdcc 	bl	8000bc0 <HAL_GetTick>
 8003028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302e:	f7fd fdc7 	bl	8000bc0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	f000 bcd5 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003056:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_RCC_OscConfig+0x488>
 800306e:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCC_OscConfig+0x650>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e013      	b.n	800309c <HAL_RCC_OscConfig+0x4b0>
 8003074:	2302      	movs	r3, #2
 8003076:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003086:	2302      	movs	r3, #2
 8003088:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800308c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003098:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_OscConfig+0x650>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2202      	movs	r2, #2
 800309e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80030a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80030ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0af      	beq.n	800302e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCC_OscConfig+0x650>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	21f8      	movs	r1, #248	; 0xf8
 80030de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80030e6:	fa91 f1a1 	rbit	r1, r1
 80030ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80030ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80030f2:	fab1 f181 	clz	r1, r1
 80030f6:	b2c9      	uxtb	r1, r1
 80030f8:	408b      	lsls	r3, r1
 80030fa:	4950      	ldr	r1, [pc, #320]	; (800323c <HAL_RCC_OscConfig+0x650>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e06a      	b.n	80031d8 <HAL_RCC_OscConfig+0x5ec>
 8003102:	2301      	movs	r3, #1
 8003104:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003114:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003122:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	461a      	mov	r2, r3
 800312a:	2300      	movs	r3, #0
 800312c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fd47 	bl	8000bc0 <HAL_GetTick>
 8003132:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003136:	e00a      	b.n	800314e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003138:	f7fd fd42 	bl	8000bc0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d902      	bls.n	800314e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	f000 bc50 	b.w	80039ee <HAL_RCC_OscConfig+0xe02>
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_RCC_OscConfig+0x592>
 8003178:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_RCC_OscConfig+0x650>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e013      	b.n	80031a6 <HAL_RCC_OscConfig+0x5ba>
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003196:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80031a2:	4b26      	ldr	r3, [pc, #152]	; (800323c <HAL_RCC_OscConfig+0x650>)
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	2202      	movs	r2, #2
 80031a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80031ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80031b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1af      	bne.n	8003138 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80da 	beq.w	800339c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d069      	beq.n	80032c6 <HAL_RCC_OscConfig+0x6da>
 80031f2:	2301      	movs	r3, #1
 80031f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x654>)
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2301      	movs	r3, #1
 800321a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fd fcd0 	bl	8000bc0 <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003224:	e00e      	b.n	8003244 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003226:	f7fd fccb 	bl	8000bc0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d906      	bls.n	8003244 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e3d9      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 800323a:	bf00      	nop
 800323c:	40021000 	.word	0x40021000
 8003240:	10908120 	.word	0x10908120
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003256:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800325a:	2202      	movs	r2, #2
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003272:	2202      	movs	r2, #2
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f2a3 	rbit	r2, r3
 8003280:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003284:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	4ba5      	ldr	r3, [pc, #660]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800328e:	2102      	movs	r1, #2
 8003290:	6019      	str	r1, [r3, #0]
 8003292:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f1a3 	rbit	r1, r3
 800329c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032a0:	6019      	str	r1, [r3, #0]
  return result;
 80032a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0b0      	beq.n	8003226 <HAL_RCC_OscConfig+0x63a>
 80032c4:	e06a      	b.n	800339c <HAL_RCC_OscConfig+0x7b0>
 80032c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	fa93 f2a3 	rbit	r2, r3
 80032d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032dc:	601a      	str	r2, [r3, #0]
  return result;
 80032de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x934>)
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fd fc62 	bl	8000bc0 <HAL_GetTick>
 80032fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e009      	b.n	8003316 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7fd fc5d 	bl	8000bc0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e36b      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 8003316:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	fa93 f2a3 	rbit	r2, r3
 8003358:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800335c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003362:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003366:	2102      	movs	r1, #2
 8003368:	6019      	str	r1, [r3, #0]
 800336a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	fa93 f1a3 	rbit	r1, r3
 8003374:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003378:	6019      	str	r1, [r3, #0]
  return result;
 800337a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1b2      	bne.n	8003302 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8158 	beq.w	800365c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b5a      	ldr	r3, [pc, #360]	; (800351c <HAL_RCC_OscConfig+0x930>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <HAL_RCC_OscConfig+0x930>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a56      	ldr	r2, [pc, #344]	; (800351c <HAL_RCC_OscConfig+0x930>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b54      	ldr	r3, [pc, #336]	; (800351c <HAL_RCC_OscConfig+0x930>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f107 0308 	add.w	r3, r7, #8
 80033dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <HAL_RCC_OscConfig+0x938>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d11a      	bne.n	8003426 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f0:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <HAL_RCC_OscConfig+0x938>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x938>)
 80033f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fbe0 	bl	8000bc0 <HAL_GetTick>
 8003400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	e009      	b.n	800341a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7fd fbdb 	bl	8000bc0 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e2e9      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b42      	ldr	r3, [pc, #264]	; (8003524 <HAL_RCC_OscConfig+0x938>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0ef      	beq.n	8003406 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x852>
 8003430:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	4a39      	ldr	r2, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6213      	str	r3, [r2, #32]
 800343c:	e02f      	b.n	800349e <HAL_RCC_OscConfig+0x8b2>
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x876>
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a33      	ldr	r2, [pc, #204]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a30      	ldr	r2, [pc, #192]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e01d      	b.n	800349e <HAL_RCC_OscConfig+0x8b2>
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d10c      	bne.n	8003486 <HAL_RCC_OscConfig+0x89a>
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a2a      	ldr	r2, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	e00b      	b.n	800349e <HAL_RCC_OscConfig+0x8b2>
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x930>)
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6213      	str	r3, [r2, #32]
 8003492:	4b22      	ldr	r3, [pc, #136]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d06b      	beq.n	8003580 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fd fb8a 	bl	8000bc0 <HAL_GetTick>
 80034ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	e00b      	b.n	80034ca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd fb85 	bl	8000bc0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e291      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 80034ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034ce:	2202      	movs	r2, #2
 80034d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fa93 f2a3 	rbit	r2, r3
 80034dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034e6:	2202      	movs	r2, #2
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	fa93 f2a3 	rbit	r2, r3
 80034f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034f8:	601a      	str	r2, [r3, #0]
  return result;
 80034fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d109      	bne.n	8003528 <HAL_RCC_OscConfig+0x93c>
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <HAL_RCC_OscConfig+0x930>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x958>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	10908120 	.word	0x10908120
 8003524:	40007000 	.word	0x40007000
 8003528:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800352c:	2202      	movs	r2, #2
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	fa93 f2a3 	rbit	r2, r3
 800353a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	4bbb      	ldr	r3, [pc, #748]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003548:	2102      	movs	r1, #2
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	fa92 f1a2 	rbit	r1, r2
 8003556:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800355a:	6011      	str	r1, [r2, #0]
  return result;
 800355c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	fab2 f282 	clz	r2, r2
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	f002 021f 	and.w	r2, r2, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f202 	lsl.w	r2, r1, r2
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d099      	beq.n	80034b2 <HAL_RCC_OscConfig+0x8c6>
 800357e:	e063      	b.n	8003648 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7fd fb1e 	bl	8000bc0 <HAL_GetTick>
 8003584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd fb19 	bl	8000bc0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e225      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 80035a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035be:	2202      	movs	r2, #2
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	fa93 f2a3 	rbit	r2, r3
 80035cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035d0:	601a      	str	r2, [r3, #0]
  return result;
 80035d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d102      	bne.n	80035f2 <HAL_RCC_OscConfig+0xa06>
 80035ec:	4b90      	ldr	r3, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	e00d      	b.n	800360e <HAL_RCC_OscConfig+0xa22>
 80035f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035f6:	2202      	movs	r2, #2
 80035f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	fa93 f2a3 	rbit	r2, r3
 8003604:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4b89      	ldr	r3, [pc, #548]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003612:	2102      	movs	r1, #2
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fa92 f1a2 	rbit	r1, r2
 8003620:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003624:	6011      	str	r1, [r2, #0]
  return result;
 8003626:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f002 021f 	and.w	r2, r2, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1a0      	bne.n	800358a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003648:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4b77      	ldr	r3, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	4a76      	ldr	r2, [pc, #472]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 8003656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 81c2 	beq.w	80039ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003668:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 030c 	and.w	r3, r3, #12
 8003670:	2b08      	cmp	r3, #8
 8003672:	f000 819c 	beq.w	80039ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f040 8114 	bne.w	80038aa <HAL_RCC_OscConfig+0xcbe>
 8003682:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800369a:	601a      	str	r2, [r3, #0]
  return result;
 800369c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80036a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fa82 	bl	8000bc0 <HAL_GetTick>
 80036bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c0:	e009      	b.n	80036d6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fd fa7d 	bl	8000bc0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e18b      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 80036d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036ee:	601a      	str	r2, [r3, #0]
  return result;
 80036f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80036f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0xb24>
 800370a:	4b49      	ldr	r3, [pc, #292]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0xb5c>
 8003710:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800372e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800374c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fa92 f1a2 	rbit	r1, r2
 800375c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003760:	6011      	str	r1, [r2, #0]
  return result;
 8003762:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f042 0220 	orr.w	r2, r2, #32
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f002 021f 	and.w	r2, r2, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d19e      	bne.n	80036c2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003784:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	430b      	orrs	r3, r1
 800379a:	4925      	ldr	r1, [pc, #148]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037b8:	601a      	str	r2, [r3, #0]
  return result;
 80037ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd f9f3 	bl	8000bc0 <HAL_GetTick>
 80037da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037de:	e009      	b.n	80037f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fd f9ee 	bl	8000bc0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0fc      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 80037f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	fa93 f2a3 	rbit	r2, r3
 8003808:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800380c:	601a      	str	r2, [r3, #0]
  return result;
 800380e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003812:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d105      	bne.n	8003834 <HAL_RCC_OscConfig+0xc48>
 8003828:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCC_OscConfig+0xc44>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	e01e      	b.n	800386c <HAL_RCC_OscConfig+0xc80>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003838:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800383c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	fa93 f2a3 	rbit	r2, r3
 8003848:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_OscConfig+0xe0c>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003870:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003874:	6011      	str	r1, [r2, #0]
 8003876:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	fa92 f1a2 	rbit	r1, r2
 8003880:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003884:	6011      	str	r1, [r2, #0]
  return result;
 8003886:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	fab2 f282 	clz	r2, r2
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	f042 0220 	orr.w	r2, r2, #32
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	f002 021f 	and.w	r2, r2, #31
 800389c:	2101      	movs	r1, #1
 800389e:	fa01 f202 	lsl.w	r2, r1, r2
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d09b      	beq.n	80037e0 <HAL_RCC_OscConfig+0xbf4>
 80038a8:	e0a0      	b.n	80039ec <HAL_RCC_OscConfig+0xe00>
 80038aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c2:	601a      	str	r2, [r3, #0]
  return result;
 80038c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	461a      	mov	r2, r3
 80038dc:	2300      	movs	r3, #0
 80038de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7fd f96e 	bl	8000bc0 <HAL_GetTick>
 80038e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e8:	e009      	b.n	80038fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fd f969 	bl	8000bc0 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e077      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
 80038fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003902:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003906:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	fa93 f2a3 	rbit	r2, r3
 8003912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003916:	601a      	str	r2, [r3, #0]
  return result;
 8003918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d102      	bne.n	8003938 <HAL_RCC_OscConfig+0xd4c>
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_OscConfig+0xe0c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	e01b      	b.n	8003970 <HAL_RCC_OscConfig+0xd84>
 8003938:	f107 0320 	add.w	r3, r7, #32
 800393c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	f107 0320 	add.w	r3, r7, #32
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f107 0318 	add.w	r3, r7, #24
 8003956:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f107 0318 	add.w	r3, r7, #24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fa93 f2a3 	rbit	r2, r3
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_RCC_OscConfig+0xe0c>)
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f107 0210 	add.w	r2, r7, #16
 8003974:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f107 0210 	add.w	r2, r7, #16
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	fa92 f1a2 	rbit	r1, r2
 8003984:	f107 020c 	add.w	r2, r7, #12
 8003988:	6011      	str	r1, [r2, #0]
  return result;
 800398a:	f107 020c 	add.w	r2, r7, #12
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d19e      	bne.n	80038ea <HAL_RCC_OscConfig+0xcfe>
 80039ac:	e01e      	b.n	80039ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e018      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCC_OscConfig+0xe0c>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d108      	bne.n	80039e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b09e      	sub	sp, #120	; 0x78
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e162      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b90      	ldr	r3, [pc, #576]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	498b      	ldr	r1, [pc, #556]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b89      	ldr	r3, [pc, #548]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e14a      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b82      	ldr	r3, [pc, #520]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	497f      	ldr	r1, [pc, #508]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80dc 	beq.w	8003c28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d13c      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xf6>
 8003a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xa6>
 8003a9c:	4b6f      	ldr	r3, [pc, #444]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	e00f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0xc6>
 8003aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ab4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abe:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ac6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aca:	fa92 f2a2 	rbit	r2, r2
 8003ace:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ad2:	fab2 f282 	clz	r2, r2
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f042 0220 	orr.w	r2, r2, #32
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f002 021f 	and.w	r2, r2, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d17b      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0f3      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d13c      	bne.n	8003b74 <HAL_RCC_ClockConfig+0x178>
 8003afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d102      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x128>
 8003b1e:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_ClockConfig+0x148>
 8003b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b36:	643b      	str	r3, [r7, #64]	; 0x40
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b48:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4c:	fa92 f2a2 	rbit	r2, r2
 8003b50:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f002 021f 	and.w	r2, r2, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d13a      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b2      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
 8003b74:	2302      	movs	r3, #2
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x1a0>
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	e00d      	b.n	8003bb8 <HAL_RCC_ClockConfig+0x1bc>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	2302      	movs	r3, #2
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2202      	movs	r2, #2
 8003bba:	61ba      	str	r2, [r7, #24]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	fa92 f2a2 	rbit	r2, r2
 8003bc2:	617a      	str	r2, [r7, #20]
  return result;
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	fab2 f282 	clz	r2, r2
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	f042 0220 	orr.w	r2, r2, #32
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f002 021f 	and.w	r2, r2, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e079      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f023 0203 	bic.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	491a      	ldr	r1, [pc, #104]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7fc ffe2 	bl	8000bc0 <HAL_GetTick>
 8003bfc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c00:	f7fc ffde 	bl	8000bc0 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e061      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <HAL_RCC_ClockConfig+0x260>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 020c 	and.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1eb      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d214      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4906      	ldr	r1, [pc, #24]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RCC_ClockConfig+0x25c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e040      	b.n	8003cda <HAL_RCC_ClockConfig+0x2de>
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	491a      	ldr	r1, [pc, #104]	; (8003ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4912      	ldr	r1, [pc, #72]	; (8003ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c9e:	f000 f829 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <HAL_RCC_ClockConfig+0x2e8>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cac:	22f0      	movs	r2, #240	; 0xf0
 8003cae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	fa92 f2a2 	rbit	r2, r2
 8003cb6:	60fa      	str	r2, [r7, #12]
  return result;
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fab2 f282 	clz	r2, r2
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	40d3      	lsrs	r3, r2
 8003cc2:	4a09      	ldr	r2, [pc, #36]	; (8003ce8 <HAL_RCC_ClockConfig+0x2ec>)
 8003cc4:	5cd3      	ldrb	r3, [r2, r3]
 8003cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_RCC_ClockConfig+0x2f0>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_RCC_ClockConfig+0x2f4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc ff30 	bl	8000b38 <HAL_InitTick>
  
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3778      	adds	r7, #120	; 0x78
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080048a0 	.word	0x080048a0
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000004 	.word	0x20000004

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d0e:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d002      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x30>
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x36>
 8003d22:	e03c      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d26:	623b      	str	r3, [r7, #32]
      break;
 8003d28:	e03c      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	fa92 f2a2 	rbit	r2, r2
 8003d3c:	607a      	str	r2, [r7, #4]
  return result;
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	40d3      	lsrs	r3, r2
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d4a:	5cd3      	ldrb	r3, [r2, r3]
 8003d4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	220f      	movs	r2, #15
 8003d58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	fa92 f2a2 	rbit	r2, r2
 8003d60:	60fa      	str	r2, [r7, #12]
  return result;
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	40d3      	lsrs	r3, r2
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d7c:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8c:	e004      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	623b      	str	r3, [r7, #32]
      break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003da0:	623b      	str	r3, [r7, #32]
      break;
 8003da2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	372c      	adds	r7, #44	; 0x2c
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	007a1200 	.word	0x007a1200
 8003dbc:	080048b0 	.word	0x080048b0
 8003dc0:	080048c0 	.word	0x080048c0
 8003dc4:	003d0900 	.word	0x003d0900

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b092      	sub	sp, #72	; 0x48
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80d4 	beq.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dec:	4b4e      	ldr	r3, [pc, #312]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
 8003e04:	4b48      	ldr	r3, [pc, #288]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a41      	ldr	r2, [pc, #260]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fc fec7 	bl	8000bc0 <HAL_GetTick>
 8003e32:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fc fec3 	bl	8000bc0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	; 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e169      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e54:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8084 	beq.w	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d07c      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e74:	4b2c      	ldr	r3, [pc, #176]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d04b      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fc fe73 	bl	8000bc0 <HAL_GetTick>
 8003eda:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fc fe6f 	bl	8000bc0 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e113      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	2302      	movs	r3, #2
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	61fb      	str	r3, [r7, #28]
  return result;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d108      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f22:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	e00d      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	10908100 	.word	0x10908100
 8003f34:	2302      	movs	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	4b78      	ldr	r3, [pc, #480]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2202      	movs	r2, #2
 8003f46:	613a      	str	r2, [r7, #16]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	fa92 f2a2 	rbit	r2, r2
 8003f4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	fab2 f282 	clz	r2, r2
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f002 021f 	and.w	r2, r2, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0b7      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	496a      	ldr	r1, [pc, #424]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a65      	ldr	r2, [pc, #404]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa0:	4b60      	ldr	r3, [pc, #384]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	f023 0203 	bic.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	495d      	ldr	r1, [pc, #372]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fbe:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	4956      	ldr	r1, [pc, #344]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fdc:	4b51      	ldr	r3, [pc, #324]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	494e      	ldr	r1, [pc, #312]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d008      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f023 0210 	bic.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4947      	ldr	r1, [pc, #284]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	493f      	ldr	r1, [pc, #252]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f023 0220 	bic.w	r2, r3, #32
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4938      	ldr	r1, [pc, #224]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004054:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	4930      	ldr	r1, [pc, #192]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004072:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	4929      	ldr	r1, [pc, #164]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4921      	ldr	r1, [pc, #132]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	491a      	ldr	r1, [pc, #104]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	4912      	ldr	r1, [pc, #72]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	490b      	ldr	r1, [pc, #44]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3748      	adds	r7, #72	; 0x48
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e09d      	b.n	8004276 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414a:	d009      	beq.n	8004160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
 8004152:	e005      	b.n	8004160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fc fb8e 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041a0:	d902      	bls.n	80041a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e002      	b.n	80041ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041b6:	d007      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	ea42 0103 	orr.w	r1, r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 0204 	and.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_SPI_Transmit+0x22>
 800429c:	2302      	movs	r3, #2
 800429e:	e15f      	b.n	8004560 <HAL_SPI_Transmit+0x2e2>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a8:	f7fc fc8a 	bl	8000bc0 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c2:	e148      	b.n	8004556 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Transmit+0x52>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d4:	e13f      	b.n	8004556 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	d10f      	bne.n	8004342 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d007      	beq.n	8004360 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d94f      	bls.n	800440a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_Transmit+0xfa>
 8004372:	8afb      	ldrh	r3, [r7, #22]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d142      	bne.n	80043fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800439c:	e02f      	b.n	80043fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d112      	bne.n	80043d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	1c9a      	adds	r2, r3, #2
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d0:	e015      	b.n	80043fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d2:	f7fc fbf5 	bl	8000bc0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d803      	bhi.n	80043ea <HAL_SPI_Transmit+0x16c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_Transmit+0x172>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80043fc:	e0ab      	b.n	8004556 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ca      	bne.n	800439e <HAL_SPI_Transmit+0x120>
 8004408:	e080      	b.n	800450c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_SPI_Transmit+0x19a>
 8004412:	8afb      	ldrh	r3, [r7, #22]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d174      	bne.n	8004502 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d912      	bls.n	8004448 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b02      	subs	r3, #2
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004446:	e05c      	b.n	8004502 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800446e:	e048      	b.n	8004502 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d12b      	bne.n	80044d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d912      	bls.n	80044ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b02      	subs	r3, #2
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ac:	e029      	b.n	8004502 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	7812      	ldrb	r2, [r2, #0]
 80044ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044d4:	e015      	b.n	8004502 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d6:	f7fc fb73 	bl	8000bc0 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d803      	bhi.n	80044ee <HAL_SPI_Transmit+0x270>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d102      	bne.n	80044f4 <HAL_SPI_Transmit+0x276>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004500:	e029      	b.n	8004556 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1b1      	bne.n	8004470 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	6839      	ldr	r1, [r7, #0]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f947 	bl	80047a4 <SPI_EndRxTxTransaction>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e003      	b.n	8004556 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800455e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004578:	f7fc fb22 	bl	8000bc0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4413      	add	r3, r2
 8004586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004588:	f7fc fb1a 	bl	8000bc0 <HAL_GetTick>
 800458c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	015b      	lsls	r3, r3, #5
 8004594:	0d1b      	lsrs	r3, r3, #20
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459e:	e054      	b.n	800464a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d050      	beq.n	800464a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045a8:	f7fc fb0a 	bl	8000bc0 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d902      	bls.n	80045be <SPI_WaitFlagStateUntilTimeout+0x56>
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d13d      	bne.n	800463a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d6:	d111      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e0:	d004      	beq.n	80045ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d107      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d10f      	bne.n	8004626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e017      	b.n	800466a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3b01      	subs	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	429a      	cmp	r2, r3
 8004666:	d19b      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800468a:	f7fc fa99 	bl	8000bc0 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	4413      	add	r3, r2
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800469a:	f7fc fa91 	bl	8000bc0 <HAL_GetTick>
 800469e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00da      	lsls	r2, r3, #3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	0d1b      	lsrs	r3, r3, #20
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046c0:	e060      	b.n	8004784 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046c8:	d107      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x62>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d104      	bne.n	80046da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d050      	beq.n	8004784 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046e2:	f7fc fa6d 	bl	8000bc0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d902      	bls.n	80046f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13d      	bne.n	8004774 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004706:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004710:	d111      	bne.n	8004736 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d004      	beq.n	8004726 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d107      	bne.n	8004736 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004734:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	d10f      	bne.n	8004760 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800475e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e010      	b.n	8004796 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3b01      	subs	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d196      	bne.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000000 	.word	0x20000000

080047a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff ff5b 	bl	8004678 <SPI_WaitFifoStateUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	f043 0220 	orr.w	r2, r3, #32
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e027      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	; 0x80
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f7ff fec0 	bl	8004568 <SPI_WaitFlagStateUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e014      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff34 	bl	8004678 <SPI_WaitFifoStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e000      	b.n	8004828 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4d0d      	ldr	r5, [pc, #52]	; (8004868 <__libc_init_array+0x38>)
 8004834:	4c0d      	ldr	r4, [pc, #52]	; (800486c <__libc_init_array+0x3c>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	2600      	movs	r6, #0
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	4d0b      	ldr	r5, [pc, #44]	; (8004870 <__libc_init_array+0x40>)
 8004842:	4c0c      	ldr	r4, [pc, #48]	; (8004874 <__libc_init_array+0x44>)
 8004844:	f000 f820 	bl	8004888 <_init>
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	2600      	movs	r6, #0
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	080048d0 	.word	0x080048d0
 800486c:	080048d0 	.word	0x080048d0
 8004870:	080048d0 	.word	0x080048d0
 8004874:	080048d4 	.word	0x080048d4

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_init>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr

08004894 <_fini>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr
