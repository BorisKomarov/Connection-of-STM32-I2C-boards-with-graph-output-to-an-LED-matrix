
I2C_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a74  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006c28  08006c28  00016c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e60  08006e60  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e68  08006e68  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00001114  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011a8  200011a8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ec5  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ee  00000000  00000000  00028f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0002a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f0  00000000  00000000  0002adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dcc  00000000  00000000  0002b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a09c  00000000  00000000  0004d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb0d  00000000  00000000  00057350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00124e5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000245c  00000000  00000000  00124eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c0c 	.word	0x08006c0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08006c0c 	.word	0x08006c0c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eb4:	ed2d 8b02 	vpush	{d8}
 8000eb8:	b090      	sub	sp, #64	; 0x40
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i =0; i<16;i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec0:	e016      	b.n	8000ef0 <main+0x40>
		  data_11[i] =0xff;
 8000ec2:	4ad5      	ldr	r2, [pc, #852]	; (8001218 <main+0x368>)
 8000ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec6:	4413      	add	r3, r2
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	701a      	strb	r2, [r3, #0]
		  data_10[i] =0xff;
 8000ecc:	4ad3      	ldr	r2, [pc, #844]	; (800121c <main+0x36c>)
 8000ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed0:	4413      	add	r3, r2
 8000ed2:	22ff      	movs	r2, #255	; 0xff
 8000ed4:	701a      	strb	r2, [r3, #0]
		  data_01[i] =0xff;
 8000ed6:	4ad2      	ldr	r2, [pc, #840]	; (8001220 <main+0x370>)
 8000ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eda:	4413      	add	r3, r2
 8000edc:	22ff      	movs	r2, #255	; 0xff
 8000ede:	701a      	strb	r2, [r3, #0]
		  data_00[i] =0xff;
 8000ee0:	4ad0      	ldr	r2, [pc, #832]	; (8001224 <main+0x374>)
 8000ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee4:	4413      	add	r3, r2
 8000ee6:	22ff      	movs	r2, #255	; 0xff
 8000ee8:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<16;i++){
 8000eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eec:	3301      	adds	r3, #1
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	dde5      	ble.n	8000ec2 <main+0x12>
	  }
	  w = sqrt(1-pow(psi,2))/T;
 8000ef6:	4bcc      	ldr	r3, [pc, #816]	; (8001228 <main+0x378>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fadc 	bl	80004b8 <__aeabi_f2d>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	ed9f 1bc0 	vldr	d1, [pc, #768]	; 8001208 <main+0x358>
 8000f08:	ec43 2b10 	vmov	d0, r2, r3
 8000f0c:	f003 ff40 	bl	8004d90 <pow>
 8000f10:	ec53 2b10 	vmov	r2, r3, d0
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	49c4      	ldr	r1, [pc, #784]	; (800122c <main+0x37c>)
 8000f1a:	f7ff f96d 	bl	80001f8 <__aeabi_dsub>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	ec43 2b17 	vmov	d7, r2, r3
 8000f26:	eeb0 0a47 	vmov.f32	s0, s14
 8000f2a:	eef0 0a67 	vmov.f32	s1, s15
 8000f2e:	f003 ffdd 	bl	8004eec <sqrt>
 8000f32:	ec55 4b10 	vmov	r4, r5, d0
 8000f36:	4bbe      	ldr	r3, [pc, #760]	; (8001230 <main+0x380>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fabc 	bl	80004b8 <__aeabi_f2d>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff fc38 	bl	80007bc <__aeabi_ddiv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fde0 	bl	8000b18 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4ab6      	ldr	r2, [pc, #728]	; (8001234 <main+0x384>)
 8000f5c:	6013      	str	r3, [r2, #0]
	  a = psi/T;
 8000f5e:	4bb2      	ldr	r3, [pc, #712]	; (8001228 <main+0x378>)
 8000f60:	edd3 6a00 	vldr	s13, [r3]
 8000f64:	4bb2      	ldr	r3, [pc, #712]	; (8001230 <main+0x380>)
 8000f66:	ed93 7a00 	vldr	s14, [r3]
 8000f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f6e:	4bb2      	ldr	r3, [pc, #712]	; (8001238 <main+0x388>)
 8000f70:	edc3 7a00 	vstr	s15, [r3]
	  pressed_flag = 0;
 8000f74:	4bb1      	ldr	r3, [pc, #708]	; (800123c <main+0x38c>)
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
	  imp_time = 0;
 8000f7c:	4bb0      	ldr	r3, [pc, #704]	; (8001240 <main+0x390>)
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	  imp = 0;
 8000f84:	4baf      	ldr	r3, [pc, #700]	; (8001244 <main+0x394>)
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 ff4c 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 fd6a 	bl	8001a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 fe12 	bl	8001bbc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f98:	f000 fdd0 	bl	8001b3c <MX_I2C2_Init>
  {




	  	  	  h = (k * (  1-pow(e,-psi*time/T) * (cos(w*time)+  (psi/sqrt(1-pow(psi,2)))*sin(w*time) )  ) )+pressed_flag*(k/1.7*((w+pow(a,2))/w)*sin(w*(time-imp_time))*pow(e,-a*(time-imp_time)));//расчёт значение переходной функции
 8000f9c:	4baa      	ldr	r3, [pc, #680]	; (8001248 <main+0x398>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa89 	bl	80004b8 <__aeabi_f2d>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460d      	mov	r5, r1
 8000faa:	4ba8      	ldr	r3, [pc, #672]	; (800124c <main+0x39c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa82 	bl	80004b8 <__aeabi_f2d>
 8000fb4:	4680      	mov	r8, r0
 8000fb6:	4689      	mov	r9, r1
 8000fb8:	4b9b      	ldr	r3, [pc, #620]	; (8001228 <main+0x378>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	eeb1 7a67 	vneg.f32	s14, s15
 8000fc2:	4ba3      	ldr	r3, [pc, #652]	; (8001250 <main+0x3a0>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fcc:	4b98      	ldr	r3, [pc, #608]	; (8001230 <main+0x380>)
 8000fce:	edd3 7a00 	vldr	s15, [r3]
 8000fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fd6:	ee16 0a90 	vmov	r0, s13
 8000fda:	f7ff fa6d 	bl	80004b8 <__aeabi_f2d>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	ec43 2b11 	vmov	d1, r2, r3
 8000fe6:	ec49 8b10 	vmov	d0, r8, r9
 8000fea:	f003 fed1 	bl	8004d90 <pow>
 8000fee:	ec5b ab10 	vmov	sl, fp, d0
 8000ff2:	4b90      	ldr	r3, [pc, #576]	; (8001234 <main+0x384>)
 8000ff4:	ed93 7a00 	vldr	s14, [r3]
 8000ff8:	4b95      	ldr	r3, [pc, #596]	; (8001250 <main+0x3a0>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001002:	ee17 0a90 	vmov	r0, s15
 8001006:	f7ff fa57 	bl	80004b8 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	ec43 2b10 	vmov	d0, r2, r3
 8001012:	f003 fdd1 	bl	8004bb8 <cos>
 8001016:	eeb0 8a40 	vmov.f32	s16, s0
 800101a:	eef0 8a60 	vmov.f32	s17, s1
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <main+0x378>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa48 	bl	80004b8 <__aeabi_f2d>
 8001028:	4680      	mov	r8, r0
 800102a:	4689      	mov	r9, r1
 800102c:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <main+0x378>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa41 	bl	80004b8 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8001208 <main+0x358>
 800103e:	ec43 2b10 	vmov	d0, r2, r3
 8001042:	f003 fea5 	bl	8004d90 <pow>
 8001046:	ec53 2b10 	vmov	r2, r3, d0
 800104a:	f04f 0000 	mov.w	r0, #0
 800104e:	4977      	ldr	r1, [pc, #476]	; (800122c <main+0x37c>)
 8001050:	f7ff f8d2 	bl	80001f8 <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	ec43 2b17 	vmov	d7, r2, r3
 800105c:	eeb0 0a47 	vmov.f32	s0, s14
 8001060:	eef0 0a67 	vmov.f32	s1, s15
 8001064:	f003 ff42 	bl	8004eec <sqrt>
 8001068:	ec53 2b10 	vmov	r2, r3, d0
 800106c:	4640      	mov	r0, r8
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff fba4 	bl	80007bc <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4690      	mov	r8, r2
 800107a:	4699      	mov	r9, r3
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <main+0x384>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4b73      	ldr	r3, [pc, #460]	; (8001250 <main+0x3a0>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	ee17 0a90 	vmov	r0, s15
 8001090:	f7ff fa12 	bl	80004b8 <__aeabi_f2d>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b10 	vmov	d0, r2, r3
 800109c:	f003 fe24 	bl	8004ce8 <sin>
 80010a0:	ec53 2b10 	vmov	r2, r3, d0
 80010a4:	4640      	mov	r0, r8
 80010a6:	4649      	mov	r1, r9
 80010a8:	f7ff fa5e 	bl	8000568 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	ec51 0b18 	vmov	r0, r1, d8
 80010b4:	f7ff f8a2 	bl	80001fc <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4650      	mov	r0, sl
 80010be:	4659      	mov	r1, fp
 80010c0:	f7ff fa52 	bl	8000568 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4957      	ldr	r1, [pc, #348]	; (800122c <main+0x37c>)
 80010ce:	f7ff f893 	bl	80001f8 <__aeabi_dsub>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4620      	mov	r0, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	f7ff fa45 	bl	8000568 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4692      	mov	sl, r2
 80010e4:	469b      	mov	fp, r3
 80010e6:	4b55      	ldr	r3, [pc, #340]	; (800123c <main+0x38c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9e4 	bl	80004b8 <__aeabi_f2d>
 80010f0:	4604      	mov	r4, r0
 80010f2:	460d      	mov	r5, r1
 80010f4:	4b54      	ldr	r3, [pc, #336]	; (8001248 <main+0x398>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f9dd 	bl	80004b8 <__aeabi_f2d>
 80010fe:	a344      	add	r3, pc, #272	; (adr r3, 8001210 <main+0x360>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fb5a 	bl	80007bc <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2300 	strd	r2, r3, [r7]
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <main+0x384>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9cf 	bl	80004b8 <__aeabi_f2d>
 800111a:	4680      	mov	r8, r0
 800111c:	4689      	mov	r9, r1
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <main+0x388>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9c8 	bl	80004b8 <__aeabi_f2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001208 <main+0x358>
 8001130:	ec43 2b10 	vmov	d0, r2, r3
 8001134:	f003 fe2c 	bl	8004d90 <pow>
 8001138:	ec53 2b10 	vmov	r2, r3, d0
 800113c:	4640      	mov	r0, r8
 800113e:	4649      	mov	r1, r9
 8001140:	f7ff f85c 	bl	80001fc <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4690      	mov	r8, r2
 800114a:	4699      	mov	r9, r3
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <main+0x384>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9b1 	bl	80004b8 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4640      	mov	r0, r8
 800115c:	4649      	mov	r1, r9
 800115e:	f7ff fb2d 	bl	80007bc <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116a:	f7ff f9fd 	bl	8000568 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4690      	mov	r8, r2
 8001174:	4699      	mov	r9, r3
 8001176:	4b36      	ldr	r3, [pc, #216]	; (8001250 <main+0x3a0>)
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <main+0x390>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <main+0x384>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ee17 0a90 	vmov	r0, s15
 8001194:	f7ff f990 	bl	80004b8 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ec43 2b10 	vmov	d0, r2, r3
 80011a0:	f003 fda2 	bl	8004ce8 <sin>
 80011a4:	ec53 2b10 	vmov	r2, r3, d0
 80011a8:	4640      	mov	r0, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	f7ff f9dc 	bl	8000568 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4690      	mov	r8, r2
 80011b6:	4699      	mov	r9, r3
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <main+0x39c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f97b 	bl	80004b8 <__aeabi_f2d>
 80011c2:	ec41 0b18 	vmov	d8, r0, r1
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <main+0x388>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb1 7a67 	vneg.f32	s14, s15
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <main+0x3a0>)
 80011d2:	edd3 6a00 	vldr	s13, [r3]
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <main+0x390>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f966 	bl	80004b8 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	ec43 2b11 	vmov	d1, r2, r3
 80011f4:	eeb0 0a48 	vmov.f32	s0, s16
 80011f8:	eef0 0a68 	vmov.f32	s1, s17
 80011fc:	f003 fdc8 	bl	8004d90 <pow>
 8001200:	ec53 2b10 	vmov	r2, r3, d0
 8001204:	e026      	b.n	8001254 <main+0x3a4>
 8001206:	bf00      	nop
 8001208:	00000000 	.word	0x00000000
 800120c:	40000000 	.word	0x40000000
 8001210:	33333333 	.word	0x33333333
 8001214:	3ffb3333 	.word	0x3ffb3333
 8001218:	200000d0 	.word	0x200000d0
 800121c:	20000934 	.word	0x20000934
 8001220:	2000090c 	.word	0x2000090c
 8001224:	20000920 	.word	0x20000920
 8001228:	20000008 	.word	0x20000008
 800122c:	3ff00000 	.word	0x3ff00000
 8001230:	2000000c 	.word	0x2000000c
 8001234:	200000b0 	.word	0x200000b0
 8001238:	20000988 	.word	0x20000988
 800123c:	20000944 	.word	0x20000944
 8001240:	200000cc 	.word	0x200000cc
 8001244:	200000c8 	.word	0x200000c8
 8001248:	20000004 	.word	0x20000004
 800124c:	20000010 	.word	0x20000010
 8001250:	20000000 	.word	0x20000000
 8001254:	4640      	mov	r0, r8
 8001256:	4649      	mov	r1, r9
 8001258:	f7ff f986 	bl	8000568 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f980 	bl	8000568 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4650      	mov	r0, sl
 800126e:	4659      	mov	r1, fp
 8001270:	f7fe ffc4 	bl	80001fc <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fc4c 	bl	8000b18 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4aab      	ldr	r2, [pc, #684]	; (8001530 <main+0x680>)
 8001284:	6013      	str	r3, [r2, #0]
	  		  hk = round(h / step_h) * step_h; //квантование  значений функции
 8001286:	4baa      	ldr	r3, [pc, #680]	; (8001530 <main+0x680>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	4ba9      	ldr	r3, [pc, #676]	; (8001534 <main+0x684>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001296:	ee16 0a90 	vmov	r0, s13
 800129a:	f7ff f90d 	bl	80004b8 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	ec43 2b10 	vmov	d0, r2, r3
 80012a6:	f003 fcd7 	bl	8004c58 <round>
 80012aa:	ec55 4b10 	vmov	r4, r5, d0
 80012ae:	4ba1      	ldr	r3, [pc, #644]	; (8001534 <main+0x684>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f900 	bl	80004b8 <__aeabi_f2d>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7ff f952 	bl	8000568 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc24 	bl	8000b18 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a99      	ldr	r2, [pc, #612]	; (8001538 <main+0x688>)
 80012d4:	6013      	str	r3, [r2, #0]
	  		  tk = round(time / step_time) * step_time; //квантование  времени
 80012d6:	4b99      	ldr	r3, [pc, #612]	; (800153c <main+0x68c>)
 80012d8:	ed93 7a00 	vldr	s14, [r3]
 80012dc:	4b98      	ldr	r3, [pc, #608]	; (8001540 <main+0x690>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012e6:	ee16 0a90 	vmov	r0, s13
 80012ea:	f7ff f8e5 	bl	80004b8 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	ec43 2b10 	vmov	d0, r2, r3
 80012f6:	f003 fcaf 	bl	8004c58 <round>
 80012fa:	ec55 4b10 	vmov	r4, r5, d0
 80012fe:	4b90      	ldr	r3, [pc, #576]	; (8001540 <main+0x690>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8d8 	bl	80004b8 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7ff f92a 	bl	8000568 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbfc 	bl	8000b18 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	4a88      	ldr	r2, [pc, #544]	; (8001544 <main+0x694>)
 8001324:	6013      	str	r3, [r2, #0]
	  		  if(tk!= temp_tk || hk!= temp_hk){
 8001326:	4b87      	ldr	r3, [pc, #540]	; (8001544 <main+0x694>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	4b86      	ldr	r3, [pc, #536]	; (8001548 <main+0x698>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	eeb4 7a67 	vcmp.f32	s14, s15
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	d10b      	bne.n	8001354 <main+0x4a4>
 800133c:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <main+0x688>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	4b82      	ldr	r3, [pc, #520]	; (800154c <main+0x69c>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eeb4 7a67 	vcmp.f32	s14, s15
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	f000 830c 	beq.w	800196c <main+0xabc>
	  			  temp_tk = tk;
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <main+0x694>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7b      	ldr	r2, [pc, #492]	; (8001548 <main+0x698>)
 800135a:	6013      	str	r3, [r2, #0]
	  			  temp_hk = hk;
 800135c:	4b76      	ldr	r3, [pc, #472]	; (8001538 <main+0x688>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <main+0x69c>)
 8001362:	6013      	str	r3, [r2, #0]
	  			  col = round(tk/step_time);
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <main+0x694>)
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	4b75      	ldr	r3, [pc, #468]	; (8001540 <main+0x690>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001374:	ee16 0a90 	vmov	r0, s13
 8001378:	f7ff f89e 	bl	80004b8 <__aeabi_f2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	ec43 2b10 	vmov	d0, r2, r3
 8001384:	f003 fc68 	bl	8004c58 <round>
 8001388:	ec53 2b10 	vmov	r2, r3, d0
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb9a 	bl	8000ac8 <__aeabi_d2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	4a6e      	ldr	r2, [pc, #440]	; (8001550 <main+0x6a0>)
 8001398:	6013      	str	r3, [r2, #0]
	  			  row = round(hk/step_h);
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <main+0x688>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <main+0x684>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013aa:	ee16 0a90 	vmov	r0, s13
 80013ae:	f7ff f883 	bl	80004b8 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	ec43 2b10 	vmov	d0, r2, r3
 80013ba:	f003 fc4d 	bl	8004c58 <round>
 80013be:	ec53 2b10 	vmov	r2, r3, d0
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fb7f 	bl	8000ac8 <__aeabi_d2iz>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a61      	ldr	r2, [pc, #388]	; (8001554 <main+0x6a4>)
 80013ce:	6013      	str	r3, [r2, #0]
	  			  diodes_byte = ~(mask>>(col%8));
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <main+0x6a8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <main+0x6a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	425a      	negs	r2, r3
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	f002 0207 	and.w	r2, r2, #7
 80013e4:	bf58      	it	pl
 80013e6:	4253      	negpl	r3, r2
 80013e8:	fa41 f303 	asr.w	r3, r1, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b5a      	ldr	r3, [pc, #360]	; (800155c <main+0x6ac>)
 80013f4:	701a      	strb	r2, [r3, #0]
	  			  if(col<=31){
 80013f6:	4b56      	ldr	r3, [pc, #344]	; (8001550 <main+0x6a0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	f300 8094 	bgt.w	8001528 <main+0x678>
	  				  if(row%4==0){
 8001400:	4b54      	ldr	r3, [pc, #336]	; (8001554 <main+0x6a4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d11a      	bne.n	8001442 <main+0x592>
	  					  data_11[4*(col/8)+row/4]&=diodes_byte;
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <main+0x6a0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <main+0x566>
 8001414:	3307      	adds	r3, #7
 8001416:	10db      	asrs	r3, r3, #3
 8001418:	461a      	mov	r2, r3
 800141a:	0091      	lsls	r1, r2, #2
 800141c:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <main+0x6a4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da00      	bge.n	8001426 <main+0x576>
 8001424:	3303      	adds	r3, #3
 8001426:	109b      	asrs	r3, r3, #2
 8001428:	4419      	add	r1, r3
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <main+0x6b0>)
 800142c:	5c40      	ldrb	r0, [r0, r1]
 800142e:	494b      	ldr	r1, [pc, #300]	; (800155c <main+0x6ac>)
 8001430:	7809      	ldrb	r1, [r1, #0]
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4413      	add	r3, r2
 8001436:	ea00 0201 	and.w	r2, r0, r1
 800143a:	b2d1      	uxtb	r1, r2
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <main+0x6b0>)
 800143e:	54d1      	strb	r1, [r2, r3]
 8001440:	e294      	b.n	800196c <main+0xabc>
	  				  }
	  				  else if(row%4==1){
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <main+0x6a4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	425a      	negs	r2, r3
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	bf58      	it	pl
 8001452:	4253      	negpl	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d11a      	bne.n	800148e <main+0x5de>
	  					  data_01[4*(col/8)+row/4]&=diodes_byte;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <main+0x6a0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da00      	bge.n	8001462 <main+0x5b2>
 8001460:	3307      	adds	r3, #7
 8001462:	10db      	asrs	r3, r3, #3
 8001464:	461a      	mov	r2, r3
 8001466:	0091      	lsls	r1, r2, #2
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <main+0x6a4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da00      	bge.n	8001472 <main+0x5c2>
 8001470:	3303      	adds	r3, #3
 8001472:	109b      	asrs	r3, r3, #2
 8001474:	4419      	add	r1, r3
 8001476:	483b      	ldr	r0, [pc, #236]	; (8001564 <main+0x6b4>)
 8001478:	5c40      	ldrb	r0, [r0, r1]
 800147a:	4938      	ldr	r1, [pc, #224]	; (800155c <main+0x6ac>)
 800147c:	7809      	ldrb	r1, [r1, #0]
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4413      	add	r3, r2
 8001482:	ea00 0201 	and.w	r2, r0, r1
 8001486:	b2d1      	uxtb	r1, r2
 8001488:	4a36      	ldr	r2, [pc, #216]	; (8001564 <main+0x6b4>)
 800148a:	54d1      	strb	r1, [r2, r3]
 800148c:	e26e      	b.n	800196c <main+0xabc>
	  				  }
	  				  else if(row%4==2){
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <main+0x6a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	425a      	negs	r2, r3
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	bf58      	it	pl
 800149e:	4253      	negpl	r3, r2
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d11a      	bne.n	80014da <main+0x62a>
	  					  data_10[4*(col/8)+row/4]&=diodes_byte;
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <main+0x6a0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da00      	bge.n	80014ae <main+0x5fe>
 80014ac:	3307      	adds	r3, #7
 80014ae:	10db      	asrs	r3, r3, #3
 80014b0:	461a      	mov	r2, r3
 80014b2:	0091      	lsls	r1, r2, #2
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <main+0x6a4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <main+0x60e>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	4419      	add	r1, r3
 80014c2:	4829      	ldr	r0, [pc, #164]	; (8001568 <main+0x6b8>)
 80014c4:	5c40      	ldrb	r0, [r0, r1]
 80014c6:	4925      	ldr	r1, [pc, #148]	; (800155c <main+0x6ac>)
 80014c8:	7809      	ldrb	r1, [r1, #0]
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	ea00 0201 	and.w	r2, r0, r1
 80014d2:	b2d1      	uxtb	r1, r2
 80014d4:	4a24      	ldr	r2, [pc, #144]	; (8001568 <main+0x6b8>)
 80014d6:	54d1      	strb	r1, [r2, r3]
 80014d8:	e248      	b.n	800196c <main+0xabc>
	  				  }
	  				  else if(row%4==3){
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <main+0x6a4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	425a      	negs	r2, r3
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	f002 0203 	and.w	r2, r2, #3
 80014e8:	bf58      	it	pl
 80014ea:	4253      	negpl	r3, r2
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	f040 823d 	bne.w	800196c <main+0xabc>
	  					  data_00[4*(col/8)+row/4]&=diodes_byte;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <main+0x6a0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da00      	bge.n	80014fc <main+0x64c>
 80014fa:	3307      	adds	r3, #7
 80014fc:	10db      	asrs	r3, r3, #3
 80014fe:	461a      	mov	r2, r3
 8001500:	0091      	lsls	r1, r2, #2
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <main+0x6a4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	da00      	bge.n	800150c <main+0x65c>
 800150a:	3303      	adds	r3, #3
 800150c:	109b      	asrs	r3, r3, #2
 800150e:	4419      	add	r1, r3
 8001510:	4816      	ldr	r0, [pc, #88]	; (800156c <main+0x6bc>)
 8001512:	5c40      	ldrb	r0, [r0, r1]
 8001514:	4911      	ldr	r1, [pc, #68]	; (800155c <main+0x6ac>)
 8001516:	7809      	ldrb	r1, [r1, #0]
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	4413      	add	r3, r2
 800151c:	ea00 0201 	and.w	r2, r0, r1
 8001520:	b2d1      	uxtb	r1, r2
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <main+0x6bc>)
 8001524:	54d1      	strb	r1, [r2, r3]
 8001526:	e221      	b.n	800196c <main+0xabc>
	  				  }
	  			  }
	  			  else{
	  				  for(int i =0;i<12;i++){
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
 800152c:	e043      	b.n	80015b6 <main+0x706>
 800152e:	bf00      	nop
 8001530:	200000b4 	.word	0x200000b4
 8001534:	20000014 	.word	0x20000014
 8001538:	200000b8 	.word	0x200000b8
 800153c:	20000000 	.word	0x20000000
 8001540:	20000018 	.word	0x20000018
 8001544:	200000bc 	.word	0x200000bc
 8001548:	2000098c 	.word	0x2000098c
 800154c:	200000e0 	.word	0x200000e0
 8001550:	200000c4 	.word	0x200000c4
 8001554:	200000c0 	.word	0x200000c0
 8001558:	2000001c 	.word	0x2000001c
 800155c:	20000931 	.word	0x20000931
 8001560:	200000d0 	.word	0x200000d0
 8001564:	2000090c 	.word	0x2000090c
 8001568:	20000934 	.word	0x20000934
 800156c:	20000920 	.word	0x20000920
	  					  shifted_bit = (data_11[i+4] >> 7) & 1;
 8001570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001572:	3304      	adds	r3, #4
 8001574:	4a7d      	ldr	r2, [pc, #500]	; (800176c <main+0x8bc>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	09db      	lsrs	r3, r3, #7
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b7c      	ldr	r3, [pc, #496]	; (8001770 <main+0x8c0>)
 800157e:	701a      	strb	r2, [r3, #0]
	  					  data_11[i]<<=1;
 8001580:	4a7a      	ldr	r2, [pc, #488]	; (800176c <main+0x8bc>)
 8001582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	4a77      	ldr	r2, [pc, #476]	; (800176c <main+0x8bc>)
 800158e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001590:	4413      	add	r3, r2
 8001592:	460a      	mov	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
	  					  data_11[i]|=shifted_bit;
 8001596:	4a75      	ldr	r2, [pc, #468]	; (800176c <main+0x8bc>)
 8001598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159a:	4413      	add	r3, r2
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b74      	ldr	r3, [pc, #464]	; (8001770 <main+0x8c0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b2d9      	uxtb	r1, r3
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <main+0x8bc>)
 80015a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015aa:	4413      	add	r3, r2
 80015ac:	460a      	mov	r2, r1
 80015ae:	701a      	strb	r2, [r3, #0]
	  				  for(int i =0;i<12;i++){
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	3301      	adds	r3, #1
 80015b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b8:	2b0b      	cmp	r3, #11
 80015ba:	ddd9      	ble.n	8001570 <main+0x6c0>
	  				  }
	  				  for(int i =0;i<12;i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
 80015c0:	e022      	b.n	8001608 <main+0x758>
	  					  shifted_bit = (data_10[i+4] >> 7) & 1;
 80015c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c4:	3304      	adds	r3, #4
 80015c6:	4a6b      	ldr	r2, [pc, #428]	; (8001774 <main+0x8c4>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	09db      	lsrs	r3, r3, #7
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b68      	ldr	r3, [pc, #416]	; (8001770 <main+0x8c0>)
 80015d0:	701a      	strb	r2, [r3, #0]
	  					  data_10[i]<<=1;
 80015d2:	4a68      	ldr	r2, [pc, #416]	; (8001774 <main+0x8c4>)
 80015d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	b2d9      	uxtb	r1, r3
 80015de:	4a65      	ldr	r2, [pc, #404]	; (8001774 <main+0x8c4>)
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	4413      	add	r3, r2
 80015e4:	460a      	mov	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
	  					  data_10[i]|=shifted_bit;
 80015e8:	4a62      	ldr	r2, [pc, #392]	; (8001774 <main+0x8c4>)
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ec:	4413      	add	r3, r2
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <main+0x8c0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	4a5e      	ldr	r2, [pc, #376]	; (8001774 <main+0x8c4>)
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	4413      	add	r3, r2
 80015fe:	460a      	mov	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
	  				  for(int i =0;i<12;i++){
 8001602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001604:	3301      	adds	r3, #1
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	2b0b      	cmp	r3, #11
 800160c:	ddd9      	ble.n	80015c2 <main+0x712>
	  				  }
	  				  for(int i =0;i<12;i++){
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
 8001612:	e022      	b.n	800165a <main+0x7aa>
	  					  shifted_bit = (data_01[i+4] >> 7) & 1;
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	3304      	adds	r3, #4
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <main+0x8c8>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	09db      	lsrs	r3, r3, #7
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <main+0x8c0>)
 8001622:	701a      	strb	r2, [r3, #0]
	  					  data_01[i]<<=1;
 8001624:	4a54      	ldr	r2, [pc, #336]	; (8001778 <main+0x8c8>)
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	b2d9      	uxtb	r1, r3
 8001630:	4a51      	ldr	r2, [pc, #324]	; (8001778 <main+0x8c8>)
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	4413      	add	r3, r2
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	  					  data_01[i]|=shifted_bit;
 800163a:	4a4f      	ldr	r2, [pc, #316]	; (8001778 <main+0x8c8>)
 800163c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163e:	4413      	add	r3, r2
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <main+0x8c0>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	b2d9      	uxtb	r1, r3
 800164a:	4a4b      	ldr	r2, [pc, #300]	; (8001778 <main+0x8c8>)
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	4413      	add	r3, r2
 8001650:	460a      	mov	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
	  				  for(int i =0;i<12;i++){
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	3301      	adds	r3, #1
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	2b0b      	cmp	r3, #11
 800165e:	ddd9      	ble.n	8001614 <main+0x764>
	  				  }
	  				  for(int i =0;i<12;i++){
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001664:	e022      	b.n	80016ac <main+0x7fc>
	  					  shifted_bit = (data_00[i+4] >> 7) & 1;
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	3304      	adds	r3, #4
 800166a:	4a44      	ldr	r2, [pc, #272]	; (800177c <main+0x8cc>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	09db      	lsrs	r3, r3, #7
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <main+0x8c0>)
 8001674:	701a      	strb	r2, [r3, #0]
	  					  data_00[i]<<=1;
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <main+0x8cc>)
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	b2d9      	uxtb	r1, r3
 8001682:	4a3e      	ldr	r2, [pc, #248]	; (800177c <main+0x8cc>)
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	4413      	add	r3, r2
 8001688:	460a      	mov	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
	  					  data_00[i]|=shifted_bit;
 800168c:	4a3b      	ldr	r2, [pc, #236]	; (800177c <main+0x8cc>)
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	4413      	add	r3, r2
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <main+0x8c0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4313      	orrs	r3, r2
 800169a:	b2d9      	uxtb	r1, r3
 800169c:	4a37      	ldr	r2, [pc, #220]	; (800177c <main+0x8cc>)
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	4413      	add	r3, r2
 80016a2:	460a      	mov	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
	  				  for(int i =0;i<12;i++){
 80016a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a8:	3301      	adds	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	2b0b      	cmp	r3, #11
 80016b0:	ddd9      	ble.n	8001666 <main+0x7b6>





	  				  for(int i =0;i<3;i++){
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b6:	e017      	b.n	80016e8 <main+0x838>
	  					  data_11[12+i]<<=1;
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	330c      	adds	r3, #12
 80016bc:	4a2b      	ldr	r2, [pc, #172]	; (800176c <main+0x8bc>)
 80016be:	5cd2      	ldrb	r2, [r2, r3]
 80016c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c2:	330c      	adds	r3, #12
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	b2d1      	uxtb	r1, r2
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <main+0x8bc>)
 80016ca:	54d1      	strb	r1, [r2, r3]
	  					  data_11[12+i]|=0b00000001;
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	330c      	adds	r3, #12
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <main+0x8bc>)
 80016d2:	5cd2      	ldrb	r2, [r2, r3]
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	330c      	adds	r3, #12
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	b2d1      	uxtb	r1, r2
 80016de:	4a23      	ldr	r2, [pc, #140]	; (800176c <main+0x8bc>)
 80016e0:	54d1      	strb	r1, [r2, r3]
	  				  for(int i =0;i<3;i++){
 80016e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e4:	3301      	adds	r3, #1
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	dde4      	ble.n	80016b8 <main+0x808>
	  				  }
	  				  for(int i =0;i<3;i++){
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e017      	b.n	8001724 <main+0x874>
	  					  data_10[12+i]<<=1;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	330c      	adds	r3, #12
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <main+0x8c4>)
 80016fa:	5cd2      	ldrb	r2, [r2, r3]
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	330c      	adds	r3, #12
 8001700:	0052      	lsls	r2, r2, #1
 8001702:	b2d1      	uxtb	r1, r2
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <main+0x8c4>)
 8001706:	54d1      	strb	r1, [r2, r3]
	  					  data_10[12+i]|=0b00000001;
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	330c      	adds	r3, #12
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <main+0x8c4>)
 800170e:	5cd2      	ldrb	r2, [r2, r3]
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	330c      	adds	r3, #12
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	b2d1      	uxtb	r1, r2
 800171a:	4a16      	ldr	r2, [pc, #88]	; (8001774 <main+0x8c4>)
 800171c:	54d1      	strb	r1, [r2, r3]
	  				  for(int i =0;i<3;i++){
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	2b02      	cmp	r3, #2
 8001728:	dde4      	ble.n	80016f4 <main+0x844>
	  				  }
	  				  for(int i =0;i<3;i++){
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	e017      	b.n	8001760 <main+0x8b0>
	  					  data_01[12+i]<<=1;
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	330c      	adds	r3, #12
 8001734:	4a10      	ldr	r2, [pc, #64]	; (8001778 <main+0x8c8>)
 8001736:	5cd2      	ldrb	r2, [r2, r3]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	330c      	adds	r3, #12
 800173c:	0052      	lsls	r2, r2, #1
 800173e:	b2d1      	uxtb	r1, r2
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <main+0x8c8>)
 8001742:	54d1      	strb	r1, [r2, r3]
	  					  data_01[12+i]|=0b00000001;
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	330c      	adds	r3, #12
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <main+0x8c8>)
 800174a:	5cd2      	ldrb	r2, [r2, r3]
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	330c      	adds	r3, #12
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	b2d1      	uxtb	r1, r2
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <main+0x8c8>)
 8001758:	54d1      	strb	r1, [r2, r3]
	  				  for(int i =0;i<3;i++){
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	3301      	adds	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
 8001760:	6a3b      	ldr	r3, [r7, #32]
 8001762:	2b02      	cmp	r3, #2
 8001764:	dde4      	ble.n	8001730 <main+0x880>
	  				  }
	  				  for(int i =0;i<3;i++){
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e021      	b.n	80017b0 <main+0x900>
 800176c:	200000d0 	.word	0x200000d0
 8001770:	20000930 	.word	0x20000930
 8001774:	20000934 	.word	0x20000934
 8001778:	2000090c 	.word	0x2000090c
 800177c:	20000920 	.word	0x20000920
	  					  data_00[12+i]<<=1;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	330c      	adds	r3, #12
 8001784:	4aa0      	ldr	r2, [pc, #640]	; (8001a08 <main+0xb58>)
 8001786:	5cd2      	ldrb	r2, [r2, r3]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	330c      	adds	r3, #12
 800178c:	0052      	lsls	r2, r2, #1
 800178e:	b2d1      	uxtb	r1, r2
 8001790:	4a9d      	ldr	r2, [pc, #628]	; (8001a08 <main+0xb58>)
 8001792:	54d1      	strb	r1, [r2, r3]
	  					  data_00[12+i]|=0b00000001;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	330c      	adds	r3, #12
 8001798:	4a9b      	ldr	r2, [pc, #620]	; (8001a08 <main+0xb58>)
 800179a:	5cd2      	ldrb	r2, [r2, r3]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	330c      	adds	r3, #12
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	b2d1      	uxtb	r1, r2
 80017a6:	4a98      	ldr	r2, [pc, #608]	; (8001a08 <main+0xb58>)
 80017a8:	54d1      	strb	r1, [r2, r3]
	  				  for(int i =0;i<3;i++){
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3301      	adds	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	dde4      	ble.n	8001780 <main+0x8d0>
	  				  }



	  				  if(row%4==0){
 80017b6:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <main+0xb5c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12c      	bne.n	800181c <main+0x96c>

	  					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <main+0xb60>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <main+0xb64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	425a      	negs	r2, r3
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	f002 0207 	and.w	r2, r2, #7
 80017d6:	bf58      	it	pl
 80017d8:	4253      	negpl	r3, r2
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	11db      	asrs	r3, r3, #7
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b8b      	ldr	r3, [pc, #556]	; (8001a18 <main+0xb68>)
 80017ea:	701a      	strb	r2, [r3, #0]
	  					  shifted_bit|=0b11111110;
 80017ec:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <main+0xb68>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	f063 0301 	orn	r3, r3, #1
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b88      	ldr	r3, [pc, #544]	; (8001a18 <main+0xb68>)
 80017f8:	701a      	strb	r2, [r3, #0]
	  					  data_11[12+row/4]&=shifted_bit;
 80017fa:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <main+0xb5c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da00      	bge.n	8001804 <main+0x954>
 8001802:	3303      	adds	r3, #3
 8001804:	109b      	asrs	r3, r3, #2
 8001806:	f103 020c 	add.w	r2, r3, #12
 800180a:	4984      	ldr	r1, [pc, #528]	; (8001a1c <main+0xb6c>)
 800180c:	5c89      	ldrb	r1, [r1, r2]
 800180e:	4a82      	ldr	r2, [pc, #520]	; (8001a18 <main+0xb68>)
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	330c      	adds	r3, #12
 8001814:	400a      	ands	r2, r1
 8001816:	b2d1      	uxtb	r1, r2
 8001818:	4a80      	ldr	r2, [pc, #512]	; (8001a1c <main+0xb6c>)
 800181a:	54d1      	strb	r1, [r2, r3]
	  				  }
	  				  if(row%4==1){
 800181c:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <main+0xb5c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	425a      	negs	r2, r3
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	f002 0203 	and.w	r2, r2, #3
 800182a:	bf58      	it	pl
 800182c:	4253      	negpl	r3, r2
 800182e:	2b01      	cmp	r3, #1
 8001830:	d12c      	bne.n	800188c <main+0x9dc>

	  					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <main+0xb60>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <main+0xb64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	425a      	negs	r2, r3
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	f002 0207 	and.w	r2, r2, #7
 8001846:	bf58      	it	pl
 8001848:	4253      	negpl	r3, r2
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	11db      	asrs	r3, r3, #7
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <main+0xb68>)
 800185a:	701a      	strb	r2, [r3, #0]
	  					  shifted_bit|=0b11111110;
 800185c:	4b6e      	ldr	r3, [pc, #440]	; (8001a18 <main+0xb68>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f063 0301 	orn	r3, r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <main+0xb68>)
 8001868:	701a      	strb	r2, [r3, #0]
	  					  data_01[12+row/4]&=shifted_bit;
 800186a:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <main+0xb5c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da00      	bge.n	8001874 <main+0x9c4>
 8001872:	3303      	adds	r3, #3
 8001874:	109b      	asrs	r3, r3, #2
 8001876:	f103 020c 	add.w	r2, r3, #12
 800187a:	4969      	ldr	r1, [pc, #420]	; (8001a20 <main+0xb70>)
 800187c:	5c89      	ldrb	r1, [r1, r2]
 800187e:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <main+0xb68>)
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	330c      	adds	r3, #12
 8001884:	400a      	ands	r2, r1
 8001886:	b2d1      	uxtb	r1, r2
 8001888:	4a65      	ldr	r2, [pc, #404]	; (8001a20 <main+0xb70>)
 800188a:	54d1      	strb	r1, [r2, r3]
	  				  }
	  				  if(row%4==2){
 800188c:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <main+0xb5c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	425a      	negs	r2, r3
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	bf58      	it	pl
 800189c:	4253      	negpl	r3, r2
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d12c      	bne.n	80018fc <main+0xa4c>

	  					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 80018a2:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <main+0xb60>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4b5a      	ldr	r3, [pc, #360]	; (8001a14 <main+0xb64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	425a      	negs	r2, r3
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	f002 0207 	and.w	r2, r2, #7
 80018b6:	bf58      	it	pl
 80018b8:	4253      	negpl	r3, r2
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	11db      	asrs	r3, r3, #7
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <main+0xb68>)
 80018ca:	701a      	strb	r2, [r3, #0]
	  					  shifted_bit|=0b11111110;
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <main+0xb68>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f063 0301 	orn	r3, r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <main+0xb68>)
 80018d8:	701a      	strb	r2, [r3, #0]
	  					  data_10[12+row/4]&=shifted_bit;
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <main+0xb5c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da00      	bge.n	80018e4 <main+0xa34>
 80018e2:	3303      	adds	r3, #3
 80018e4:	109b      	asrs	r3, r3, #2
 80018e6:	f103 020c 	add.w	r2, r3, #12
 80018ea:	494e      	ldr	r1, [pc, #312]	; (8001a24 <main+0xb74>)
 80018ec:	5c89      	ldrb	r1, [r1, r2]
 80018ee:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <main+0xb68>)
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	400a      	ands	r2, r1
 80018f6:	b2d1      	uxtb	r1, r2
 80018f8:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <main+0xb74>)
 80018fa:	54d1      	strb	r1, [r2, r3]
	  				  }
	  				  if(row%4==3){
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <main+0xb5c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	425a      	negs	r2, r3
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	bf58      	it	pl
 800190c:	4253      	negpl	r3, r2
 800190e:	2b03      	cmp	r3, #3
 8001910:	d12c      	bne.n	800196c <main+0xabc>

	  					  shifted_bit =((diodes_byte <<col%8)>>7) & 1;
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <main+0xb60>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <main+0xb64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	425a      	negs	r2, r3
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	f002 0207 	and.w	r2, r2, #7
 8001926:	bf58      	it	pl
 8001928:	4253      	negpl	r3, r2
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	11db      	asrs	r3, r3, #7
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <main+0xb68>)
 800193a:	701a      	strb	r2, [r3, #0]
	  					  shifted_bit|=0b11111110;
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <main+0xb68>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f063 0301 	orn	r3, r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <main+0xb68>)
 8001948:	701a      	strb	r2, [r3, #0]
	  					  data_00[12+row/4]&=shifted_bit;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <main+0xb5c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da00      	bge.n	8001954 <main+0xaa4>
 8001952:	3303      	adds	r3, #3
 8001954:	109b      	asrs	r3, r3, #2
 8001956:	f103 020c 	add.w	r2, r3, #12
 800195a:	492b      	ldr	r1, [pc, #172]	; (8001a08 <main+0xb58>)
 800195c:	5c89      	ldrb	r1, [r1, r2]
 800195e:	4a2e      	ldr	r2, [pc, #184]	; (8001a18 <main+0xb68>)
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	330c      	adds	r3, #12
 8001964:	400a      	ands	r2, r1
 8001966:	b2d1      	uxtb	r1, r2
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <main+0xb58>)
 800196a:	54d1      	strb	r1, [r2, r3]
	  			  }



	  		  }
	  		  time+=0.01;
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <main+0xb78>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fda1 	bl	80004b8 <__aeabi_f2d>
 8001976:	a322      	add	r3, pc, #136	; (adr r3, 8001a00 <main+0xb50>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fc3e 	bl	80001fc <__adddf3>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8c6 	bl	8000b18 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <main+0xb78>)
 8001990:	6013      	str	r3, [r2, #0]



	  for(int i = 0; i<16;i++){
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	e00b      	b.n	80019b0 <main+0xb00>
		  fulldata[i] = data_00[i];
 8001998:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <main+0xb58>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4413      	add	r3, r2
 800199e:	7819      	ldrb	r1, [r3, #0]
 80019a0:	4a22      	ldr	r2, [pc, #136]	; (8001a2c <main+0xb7c>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4413      	add	r3, r2
 80019a6:	460a      	mov	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i<16;i++){
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	ddf0      	ble.n	8001998 <main+0xae8>
	  }
	  for(int i = 0; i<16;i++){
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e00a      	b.n	80019d2 <main+0xb22>
		  fulldata[16+i] = data_01[i];
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3310      	adds	r3, #16
 80019c0:	4917      	ldr	r1, [pc, #92]	; (8001a20 <main+0xb70>)
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	440a      	add	r2, r1
 80019c6:	7811      	ldrb	r1, [r2, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <main+0xb7c>)
 80019ca:	54d1      	strb	r1, [r2, r3]
	  for(int i = 0; i<16;i++){
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	ddf1      	ble.n	80019bc <main+0xb0c>
	  }
	  for(int i = 0; i<16;i++){
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e00a      	b.n	80019f4 <main+0xb44>
		  fulldata[32+i] = data_10[i];
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3320      	adds	r3, #32
 80019e2:	4910      	ldr	r1, [pc, #64]	; (8001a24 <main+0xb74>)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	440a      	add	r2, r1
 80019e8:	7811      	ldrb	r1, [r2, #0]
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <main+0xb7c>)
 80019ec:	54d1      	strb	r1, [r2, r3]
	  for(int i = 0; i<16;i++){
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3301      	adds	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	ddf1      	ble.n	80019de <main+0xb2e>
	  }
	  for(int i = 0; i<16;i++){
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e022      	b.n	8001a46 <main+0xb96>
 8001a00:	47ae147b 	.word	0x47ae147b
 8001a04:	3f847ae1 	.word	0x3f847ae1
 8001a08:	20000920 	.word	0x20000920
 8001a0c:	200000c0 	.word	0x200000c0
 8001a10:	20000931 	.word	0x20000931
 8001a14:	200000c4 	.word	0x200000c4
 8001a18:	20000930 	.word	0x20000930
 8001a1c:	200000d0 	.word	0x200000d0
 8001a20:	2000090c 	.word	0x2000090c
 8001a24:	20000934 	.word	0x20000934
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20001160 	.word	0x20001160
		  fulldata[48+i] = data_11[i];
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3330      	adds	r3, #48	; 0x30
 8001a34:	4909      	ldr	r1, [pc, #36]	; (8001a5c <main+0xbac>)
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	440a      	add	r2, r1
 8001a3a:	7811      	ldrb	r1, [r2, #0]
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <main+0xbb0>)
 8001a3e:	54d1      	strb	r1, [r2, r3]
	  for(int i = 0; i<16;i++){
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	ddf1      	ble.n	8001a30 <main+0xb80>
	  }
	  HAL_I2C_Slave_Transmit_IT(&hi2c2, &fulldata, 64);
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	4904      	ldr	r1, [pc, #16]	; (8001a60 <main+0xbb0>)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <main+0xbb4>)
 8001a52:	f000 fe8d 	bl	8002770 <HAL_I2C_Slave_Transmit_IT>
  {
 8001a56:	f7ff baa1 	b.w	8000f9c <main+0xec>
 8001a5a:	bf00      	nop
 8001a5c:	200000d0 	.word	0x200000d0
 8001a60:	20001160 	.word	0x20001160
 8001a64:	200000e8 	.word	0x200000e8

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	; 0x50
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	2230      	movs	r2, #48	; 0x30
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 f894 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <SystemClock_Config+0xcc>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <SystemClock_Config+0xcc>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <SystemClock_Config+0xcc>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <SystemClock_Config+0xd0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <SystemClock_Config+0xd0>)
 8001ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <SystemClock_Config+0xd0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001adc:	230c      	movs	r3, #12
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ae0:	2360      	movs	r3, #96	; 0x60
 8001ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fbf9 	bl	80042e8 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001afc:	f000 f894 	bl	8001c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	230f      	movs	r3, #15
 8001b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2302      	movs	r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fe5b 	bl	80047d8 <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b28:	f000 f87e 	bl	8001c28 <Error_Handler>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3750      	adds	r7, #80	; 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000

08001b3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <MX_I2C2_Init+0x78>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <MX_I2C2_Init+0x7c>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 20;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b54:	2214      	movs	r2, #20
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b7a:	f000 fcb5 	bl	80024e8 <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 f850 	bl	8001c28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b8c:	f002 fb31 	bl	80041f2 <HAL_I2CEx_ConfigAnalogFilter>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001b96:	f000 f847 	bl	8001c28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b9e:	f002 fb64 	bl	800426a <HAL_I2CEx_ConfigDigitalFilter>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001ba8:	f000 f83e 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200000e8 	.word	0x200000e8
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	000186a0 	.word	0x000186a0

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001bcc:	f043 0320 	orr.w	r3, r3, #32
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <MX_GPIO_Init+0x68>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <Error_Handler+0x8>
	...

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_I2C_MspInit+0xa4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d13b      	bne.n	8001d1e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_I2C_MspInit+0xac>)
 8001cde:	f000 fa57 	bl	8002190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_I2C_MspInit+0xa8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2021      	movs	r0, #33	; 0x21
 8001d04:	f000 f9dd 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d08:	2021      	movs	r0, #33	; 0x21
 8001d0a:	f000 f9f6 	bl	80020fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2022      	movs	r0, #34	; 0x22
 8001d14:	f000 f9d5 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d18:	2022      	movs	r0, #34	; 0x22
 8001d1a:	f000 f9ee 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40005800 	.word	0x40005800
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40021400 	.word	0x40021400

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <NMI_Handler+0x4>

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d80:	f000 f8a4 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <I2C2_EV_IRQHandler+0x10>)
 8001d8e:	f000 fd5f 	bl	8002850 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200000e8 	.word	0x200000e8

08001d9c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <I2C2_ER_IRQHandler+0x10>)
 8001da2:	f000 fec6 	bl	8002b32 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200000e8 	.word	0x200000e8

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dda:	490e      	ldr	r1, [pc, #56]	; (8001e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ddc:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001df0:	4c0b      	ldr	r4, [pc, #44]	; (8001e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dfe:	f7ff ffd7 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f002 feab 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e06:	f7ff f853 	bl	8000eb0 <main>
  bx  lr    
 8001e0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001e18:	08006e70 	.word	0x08006e70
  ldr r2, =_sbss
 8001e1c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001e20:	200011a8 	.word	0x200011a8

08001e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_Init+0x40>)
 8001e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_Init+0x40>)
 8001e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x40>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f92b 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff feea 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f943 	bl	8002116 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f90b 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000020 	.word	0x20000020
 8001ec4:	20000028 	.word	0x20000028
 8001ec8:	20000024 	.word	0x20000024

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000028 	.word	0x20000028
 8001ef0:	200011a4 	.word	0x200011a4

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	200011a4 	.word	0x200011a4

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d004      	beq.n	800214c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e00c      	b.n	8002166 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2205      	movs	r2, #5
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	; 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	e177      	b.n	800249c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 8166 	bne.w	8002496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80c0 	beq.w	8002496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_GPIO_Init+0x324>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002324:	6453      	str	r3, [r2, #68]	; 0x44
 8002326:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_GPIO_Init+0x324>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a61      	ldr	r2, [pc, #388]	; (80024b8 <HAL_GPIO_Init+0x328>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_GPIO_Init+0x32c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d037      	beq.n	80023ce <HAL_GPIO_Init+0x23e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a57      	ldr	r2, [pc, #348]	; (80024c0 <HAL_GPIO_Init+0x330>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d031      	beq.n	80023ca <HAL_GPIO_Init+0x23a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_GPIO_Init+0x334>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x236>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a55      	ldr	r2, [pc, #340]	; (80024c8 <HAL_GPIO_Init+0x338>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x232>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a54      	ldr	r2, [pc, #336]	; (80024cc <HAL_GPIO_Init+0x33c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x22e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a53      	ldr	r2, [pc, #332]	; (80024d0 <HAL_GPIO_Init+0x340>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x22a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_GPIO_Init+0x344>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x226>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a51      	ldr	r2, [pc, #324]	; (80024d8 <HAL_GPIO_Init+0x348>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x222>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <HAL_GPIO_Init+0x34c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x21e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_GPIO_Init+0x350>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x21a>
 80023a6:	2309      	movs	r3, #9
 80023a8:	e012      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023aa:	230a      	movs	r3, #10
 80023ac:	e010      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ae:	2308      	movs	r3, #8
 80023b0:	e00e      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e00c      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e00a      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023be:	2304      	movs	r3, #4
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x240>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4935      	ldr	r1, [pc, #212]	; (80024b8 <HAL_GPIO_Init+0x328>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_GPIO_Init+0x354>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002412:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <HAL_GPIO_Init+0x354>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <HAL_GPIO_Init+0x354>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243c:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <HAL_GPIO_Init+0x354>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b28      	ldr	r3, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x354>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_GPIO_Init+0x354>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_GPIO_Init+0x354>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x354>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f ae84 	bls.w	80021ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40021400 	.word	0x40021400
 80024d4:	40021800 	.word	0x40021800
 80024d8:	40021c00 	.word	0x40021c00
 80024dc:	40022000 	.word	0x40022000
 80024e0:	40022400 	.word	0x40022400
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e12b      	b.n	8002752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fbb8 	bl	8001c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800253a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800254c:	f002 faec 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a81      	ldr	r2, [pc, #516]	; (800275c <HAL_I2C_Init+0x274>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d807      	bhi.n	800256c <HAL_I2C_Init+0x84>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_I2C_Init+0x278>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e006      	b.n	800257a <HAL_I2C_Init+0x92>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a7d      	ldr	r2, [pc, #500]	; (8002764 <HAL_I2C_Init+0x27c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0e7      	b.n	8002752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a78      	ldr	r2, [pc, #480]	; (8002768 <HAL_I2C_Init+0x280>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	; (800275c <HAL_I2C_Init+0x274>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d802      	bhi.n	80025bc <HAL_I2C_Init+0xd4>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	e009      	b.n	80025d0 <HAL_I2C_Init+0xe8>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a69      	ldr	r2, [pc, #420]	; (800276c <HAL_I2C_Init+0x284>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	495c      	ldr	r1, [pc, #368]	; (800275c <HAL_I2C_Init+0x274>)
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d819      	bhi.n	8002624 <HAL_I2C_Init+0x13c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e59      	subs	r1, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002604:	400b      	ands	r3, r1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_I2C_Init+0x138>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e59      	subs	r1, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	e051      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002620:	2304      	movs	r3, #4
 8002622:	e04f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_I2C_Init+0x168>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_I2C_Init+0x18e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	0099      	lsls	r1, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x196>
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_I2C_Init+0x1bc>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	fbb0 f3f3 	udiv	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6911      	ldr	r1, [r2, #16]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	000186a0 	.word	0x000186a0
 8002760:	001e847f 	.word	0x001e847f
 8002764:	003d08ff 	.word	0x003d08ff
 8002768:	431bde83 	.word	0x431bde83
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b20      	cmp	r3, #32
 8002788:	d158      	bne.n	800283c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_I2C_Slave_Transmit_IT+0x26>
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e051      	b.n	800283e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_I2C_Slave_Transmit_IT+0x38>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e04a      	b.n	800283e <HAL_I2C_Slave_Transmit_IT+0xce>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d007      	beq.n	80027ce <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027dc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2221      	movs	r2, #33	; 0x21
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002836:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	ffff0000 	.word	0xffff0000

08002850 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002870:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b10      	cmp	r3, #16
 800287e:	d003      	beq.n	8002888 <HAL_I2C_EV_IRQHandler+0x38>
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	f040 80c1 	bne.w	8002a0a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_I2C_EV_IRQHandler+0x6e>
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028a8:	d003      	beq.n	80028b2 <HAL_I2C_EV_IRQHandler+0x62>
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_EV_IRQHandler+0x66>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_I2C_EV_IRQHandler+0x68>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	f000 8132 	beq.w	8002b22 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <HAL_I2C_EV_IRQHandler+0x92>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	0a5b      	lsrs	r3, r3, #9
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 fc71 	bl	80041bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fd79 	bl	80033d2 <I2C_Master_SB>
 80028e0:	e092      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_I2C_EV_IRQHandler+0xb2>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	0a5b      	lsrs	r3, r3, #9
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fdef 	bl	80034de <I2C_Master_ADD10>
 8002900:	e082      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0xd2>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	0a5b      	lsrs	r3, r3, #9
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fe09 	bl	8003532 <I2C_Master_ADDR>
 8002920:	e072      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d03b      	beq.n	80029a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800293c:	f000 80f3 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	09db      	lsrs	r3, r3, #7
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00f      	beq.n	800296c <HAL_I2C_EV_IRQHandler+0x11c>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_I2C_EV_IRQHandler+0x11c>
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f9f3 	bl	8002d50 <I2C_MasterTransmit_TXE>
 800296a:	e04d      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80d6 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	0a5b      	lsrs	r3, r3, #9
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80cf 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	2b21      	cmp	r3, #33	; 0x21
 800298c:	d103      	bne.n	8002996 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa7a 	bl	8002e88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002994:	e0c7      	b.n	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	f040 80c4 	bne.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fae8 	bl	8002f74 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029a4:	e0bf      	b.n	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b4:	f000 80b7 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00f      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x194>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x194>
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fb5d 	bl	800309c <I2C_MasterReceive_RXNE>
 80029e2:	e011      	b.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 809a 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	0a5b      	lsrs	r3, r3, #9
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8093 	beq.w	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fbfc 	bl	80031fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a06:	e08e      	b.n	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a08:	e08d      	b.n	8002b26 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e007      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d012      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x20e>
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	0a5b      	lsrs	r3, r3, #9
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00c      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a54:	69b9      	ldr	r1, [r7, #24]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 ffba 	bl	80039d0 <I2C_Slave_ADDR>
 8002a5c:	e066      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_I2C_EV_IRQHandler+0x22e>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	0a5b      	lsrs	r3, r3, #9
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fff4 	bl	8003a64 <I2C_Slave_STOPF>
 8002a7c:	e056      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a7e:	7bbb      	ldrb	r3, [r7, #14]
 8002a80:	2b21      	cmp	r3, #33	; 0x21
 8002a82:	d002      	beq.n	8002a8a <HAL_I2C_EV_IRQHandler+0x23a>
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	2b29      	cmp	r3, #41	; 0x29
 8002a88:	d125      	bne.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	09db      	lsrs	r3, r3, #7
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00f      	beq.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x266>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	0a9b      	lsrs	r3, r3, #10
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x266>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fed0 	bl	8003854 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab4:	e039      	b.n	8002b2a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d033      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x2da>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d02d      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fefd 	bl	80038ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ad4:	e029      	b.n	8002b2a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00f      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	0a9b      	lsrs	r3, r3, #10
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 ff08 	bl	8003910 <I2C_SlaveReceive_RXNE>
 8002b00:	e014      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00e      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 ff36 	bl	800398c <I2C_SlaveReceive_BTF>
 8002b20:	e004      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b22:	bf00      	nop
 8002b24:	e002      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b26:	bf00      	nop
 8002b28:	e000      	b.n	8002b2c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b2c:	3720      	adds	r7, #32
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b08a      	sub	sp, #40	; 0x28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b54:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <HAL_I2C_ER_IRQHandler+0x4e>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	0a5b      	lsrs	r3, r3, #9
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <HAL_I2C_ER_IRQHandler+0x78>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002ba8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	0a9b      	lsrs	r3, r3, #10
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03f      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x104>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d039      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002bc2:	7efb      	ldrb	r3, [r7, #27]
 8002bc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bdc:	7ebb      	ldrb	r3, [r7, #26]
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d112      	bne.n	8002c08 <HAL_I2C_ER_IRQHandler+0xd6>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <HAL_I2C_ER_IRQHandler+0xd6>
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b21      	cmp	r3, #33	; 0x21
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b29      	cmp	r3, #41	; 0x29
 8002bf2:	d005      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0xce>
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	2b28      	cmp	r3, #40	; 0x28
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b21      	cmp	r3, #33	; 0x21
 8002bfe:	d103      	bne.n	8002c08 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f001 f85f 	bl	8003cc4 <I2C_Slave_AF>
 8002c06:	e016      	b.n	8002c36 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c1a:	7efb      	ldrb	r3, [r7, #27]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d002      	beq.n	8002c26 <HAL_I2C_ER_IRQHandler+0xf4>
 8002c20:	7efb      	ldrb	r3, [r7, #27]
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	d107      	bne.n	8002c36 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	0adb      	lsrs	r3, r3, #11
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00e      	beq.n	8002c60 <HAL_I2C_ER_IRQHandler+0x12e>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c5e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f001 f896 	bl	8003da4 <I2C_ITError>
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d150      	bne.n	8002e18 <I2C_MasterTransmit_TXE+0xc8>
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b21      	cmp	r3, #33	; 0x21
 8002d7a:	d14d      	bne.n	8002e18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d01d      	beq.n	8002dbe <I2C_MasterTransmit_TXE+0x6e>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d01a      	beq.n	8002dbe <I2C_MasterTransmit_TXE+0x6e>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d8e:	d016      	beq.n	8002dbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2211      	movs	r2, #17
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff62 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dbc:	e060      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dcc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ddc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d107      	bne.n	8002e08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ff7d 	bl	8002d00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e06:	e03b      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff35 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e16:	e033      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b21      	cmp	r3, #33	; 0x21
 8002e1c:	d005      	beq.n	8002e2a <I2C_MasterTransmit_TXE+0xda>
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d12d      	bne.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b22      	cmp	r3, #34	; 0x22
 8002e28:	d12a      	bne.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d108      	bne.n	8002e46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e44:	e01c      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d103      	bne.n	8002e5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f88e 	bl	8002f74 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e58:	e012      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e7e:	e7ff      	b.n	8002e80 <I2C_MasterTransmit_TXE+0x130>
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b21      	cmp	r3, #33	; 0x21
 8002ea0:	d164      	bne.n	8002f6c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ed0:	e04c      	b.n	8002f6c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d01d      	beq.n	8002f14 <I2C_MasterTransmit_BTF+0x8c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d01a      	beq.n	8002f14 <I2C_MasterTransmit_BTF+0x8c>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee4:	d016      	beq.n	8002f14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ef4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2211      	movs	r2, #17
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff feb7 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
}
 8002f12:	e02b      	b.n	8002f6c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d107      	bne.n	8002f5e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fed2 	bl	8002d00 <HAL_I2C_MemTxCpltCallback>
}
 8002f5c:	e006      	b.n	8002f6c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff fe8a 	bl	8002c80 <HAL_I2C_MasterTxCpltCallback>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10b      	bne.n	8002fac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002faa:	e073      	b.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	121b      	asrs	r3, r3, #8
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fc6:	e065      	b.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10b      	bne.n	8002fe8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fe6:	e055      	b.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d151      	bne.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b22      	cmp	r3, #34	; 0x22
 8002ff4:	d10d      	bne.n	8003012 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003004:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003010:	e040      	b.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b21      	cmp	r3, #33	; 0x21
 8003020:	d112      	bne.n	8003048 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003046:	e025      	b.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d120      	bne.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b21      	cmp	r3, #33	; 0x21
 8003056:	d11d      	bne.n	8003094 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003066:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff fe36 	bl	8002d00 <HAL_I2C_MemTxCpltCallback>
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b22      	cmp	r3, #34	; 0x22
 80030ae:	f040 80a2 	bne.w	80031f6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d921      	bls.n	8003104 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	f040 8082 	bne.w	80031f6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003100:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003102:	e078      	b.n	80031f6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	2b02      	cmp	r3, #2
 800310a:	d074      	beq.n	80031f6 <I2C_MasterReceive_RXNE+0x15a>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d002      	beq.n	8003118 <I2C_MasterReceive_RXNE+0x7c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d16e      	bne.n	80031f6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f001 f81d 	bl	8004158 <I2C_WaitOnSTOPRequestThroughIT>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d142      	bne.n	80031aa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003132:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003142:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d10a      	bne.n	8003194 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fdc1 	bl	8002d14 <HAL_I2C_MemRxCpltCallback>
}
 8003192:	e030      	b.n	80031f6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2212      	movs	r2, #18
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fd76 	bl	8002c94 <HAL_I2C_MasterRxCpltCallback>
}
 80031a8:	e025      	b.n	80031f6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fd99 	bl	8002d28 <HAL_I2C_ErrorCallback>
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b04      	cmp	r3, #4
 8003214:	d11b      	bne.n	800324e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003224:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800324c:	e0bd      	b.n	80033ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d129      	bne.n	80032ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003266:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00a      	beq.n	8003284 <I2C_MasterReceive_BTF+0x86>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d007      	beq.n	8003284 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003282:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032aa:	e08e      	b.n	80033ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d176      	bne.n	80033a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d002      	beq.n	80032c2 <I2C_MasterReceive_BTF+0xc4>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d108      	bne.n	80032d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e019      	b.n	8003308 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d002      	beq.n	80032e0 <I2C_MasterReceive_BTF+0xe2>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d108      	bne.n	80032f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e00a      	b.n	8003308 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d007      	beq.n	8003308 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003362:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d10a      	bne.n	800338e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fcc4 	bl	8002d14 <HAL_I2C_MemRxCpltCallback>
}
 800338c:	e01d      	b.n	80033ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2212      	movs	r2, #18
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff fc79 	bl	8002c94 <HAL_I2C_MasterRxCpltCallback>
}
 80033a2:	e012      	b.n	80033ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d117      	bne.n	8003416 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003400:	e067      	b.n	80034d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]
}
 8003414:	e05d      	b.n	80034d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800341e:	d133      	bne.n	8003488 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b21      	cmp	r3, #33	; 0x21
 800342a:	d109      	bne.n	8003440 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e008      	b.n	8003452 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <I2C_Master_SB+0x92>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d032      	beq.n	80034d2 <I2C_Master_SB+0x100>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02d      	beq.n	80034d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003484:	605a      	str	r2, [r3, #4]
}
 8003486:	e024      	b.n	80034d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10e      	bne.n	80034ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	b29b      	uxth	r3, r3
 8003496:	11db      	asrs	r3, r3, #7
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0306 	and.w	r3, r3, #6
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f063 030f 	orn	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]
}
 80034ac:	e011      	b.n	80034d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10d      	bne.n	80034d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	11db      	asrs	r3, r3, #7
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0306 	and.w	r3, r3, #6
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f063 030e 	orn	r3, r3, #14
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <I2C_Master_ADD10+0x26>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00c      	beq.n	8003526 <I2C_Master_ADD10+0x48>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003524:	605a      	str	r2, [r3, #4]
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003532:	b480      	push	{r7}
 8003534:	b091      	sub	sp, #68	; 0x44
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b22      	cmp	r3, #34	; 0x22
 800355a:	f040 8169 	bne.w	8003830 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <I2C_Master_ADDR+0x54>
 8003566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d10b      	bne.n	8003586 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
 8003582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003584:	e160      	b.n	8003848 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <I2C_Master_ADDR+0x98>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003596:	d118      	bne.n	80035ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003598:	2300      	movs	r3, #0
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	651a      	str	r2, [r3, #80]	; 0x50
 80035c8:	e13e      	b.n	8003848 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d113      	bne.n	80035fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	2300      	movs	r3, #0
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e115      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 808a 	bne.w	800371c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800360e:	d137      	bne.n	8003680 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800362e:	d113      	bne.n	8003658 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800363e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	e0e7      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e0d3      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	2b08      	cmp	r3, #8
 8003684:	d02e      	beq.n	80036e4 <I2C_Master_ADDR+0x1b2>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	2b20      	cmp	r3, #32
 800368a:	d02b      	beq.n	80036e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800368c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368e:	2b12      	cmp	r3, #18
 8003690:	d102      	bne.n	8003698 <I2C_Master_ADDR+0x166>
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	2b01      	cmp	r3, #1
 8003696:	d125      	bne.n	80036e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	2b04      	cmp	r3, #4
 800369c:	d00e      	beq.n	80036bc <I2C_Master_ADDR+0x18a>
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d00b      	beq.n	80036bc <I2C_Master_ADDR+0x18a>
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d008      	beq.n	80036bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	e0a1      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e085      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d14d      	bne.n	80037c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b04      	cmp	r3, #4
 800372a:	d016      	beq.n	800375a <I2C_Master_ADDR+0x228>
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	2b02      	cmp	r3, #2
 8003730:	d013      	beq.n	800375a <I2C_Master_ADDR+0x228>
 8003732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003734:	2b10      	cmp	r3, #16
 8003736:	d010      	beq.n	800375a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e007      	b.n	800376a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d117      	bne.n	80037aa <I2C_Master_ADDR+0x278>
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003780:	d00b      	beq.n	800379a <I2C_Master_ADDR+0x268>
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b01      	cmp	r3, #1
 8003786:	d008      	beq.n	800379a <I2C_Master_ADDR+0x268>
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2b08      	cmp	r3, #8
 800378c:	d005      	beq.n	800379a <I2C_Master_ADDR+0x268>
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	2b10      	cmp	r3, #16
 8003792:	d002      	beq.n	800379a <I2C_Master_ADDR+0x268>
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b20      	cmp	r3, #32
 8003798:	d107      	bne.n	80037aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	e032      	b.n	8003828 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d117      	bne.n	8003812 <I2C_Master_ADDR+0x2e0>
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e8:	d00b      	beq.n	8003802 <I2C_Master_ADDR+0x2d0>
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d008      	beq.n	8003802 <I2C_Master_ADDR+0x2d0>
 80037f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d005      	beq.n	8003802 <I2C_Master_ADDR+0x2d0>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d002      	beq.n	8003802 <I2C_Master_ADDR+0x2d0>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d107      	bne.n	8003812 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003810:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800382e:	e00b      	b.n	8003848 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
}
 8003846:	e7ff      	b.n	8003848 <I2C_Master_ADDR+0x316>
 8003848:	bf00      	nop
 800384a:	3744      	adds	r7, #68	; 0x44
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02b      	beq.n	80038c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <I2C_SlaveTransmit_TXE+0x72>
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b29      	cmp	r3, #41	; 0x29
 80038a0:	d111      	bne.n	80038c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2228      	movs	r2, #40	; 0x28
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff f9f1 	bl	8002ca8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02c      	beq.n	8003984 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d114      	bne.n	8003984 <I2C_SlaveReceive_RXNE+0x74>
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b2a      	cmp	r3, #42	; 0x2a
 800395e:	d111      	bne.n	8003984 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2222      	movs	r2, #34	; 0x22
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2228      	movs	r2, #40	; 0x28
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff f99c 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039ea:	2b28      	cmp	r3, #40	; 0x28
 80039ec:	d127      	bne.n	8003a3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	089b      	lsrs	r3, r3, #2
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	09db      	lsrs	r3, r3, #7
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	81bb      	strh	r3, [r7, #12]
 8003a20:	e002      	b.n	8003a28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a30:	89ba      	ldrh	r2, [r7, #12]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff f94a 	bl	8002cd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a3c:	e00e      	b.n	8003a5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac0:	d172      	bne.n	8003ba8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b22      	cmp	r3, #34	; 0x22
 8003ac6:	d002      	beq.n	8003ace <I2C_Slave_STOPF+0x6a>
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b2a      	cmp	r3, #42	; 0x2a
 8003acc:	d135      	bne.n	8003b3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0204 	orr.w	r2, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fb33 	bl	8002172 <HAL_DMA_GetState>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d049      	beq.n	8003ba6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	4a69      	ldr	r2, [pc, #420]	; (8003cbc <I2C_Slave_STOPF+0x258>)
 8003b18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fb05 	bl	800212e <HAL_DMA_Abort_IT>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03d      	beq.n	8003ba6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b38:	e035      	b.n	8003ba6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fafd 	bl	8002172 <HAL_DMA_GetState>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d014      	beq.n	8003ba8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <I2C_Slave_STOPF+0x258>)
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe facf 	bl	800212e <HAL_DMA_Abort_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
 8003ba4:	e000      	b.n	8003ba8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03e      	beq.n	8003c30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d112      	bne.n	8003be6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d112      	bne.n	8003c1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0204 	orr.w	r2, r3, #4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f8b3 	bl	8003da4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c3e:	e039      	b.n	8003cb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b2a      	cmp	r3, #42	; 0x2a
 8003c44:	d109      	bne.n	8003c5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2228      	movs	r2, #40	; 0x28
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff f831 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b28      	cmp	r3, #40	; 0x28
 8003c64:	d111      	bne.n	8003c8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <I2C_Slave_STOPF+0x25c>)
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff f832 	bl	8002cec <HAL_I2C_ListenCpltCallback>
}
 8003c88:	e014      	b.n	8003cb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	2b22      	cmp	r3, #34	; 0x22
 8003c90:	d002      	beq.n	8003c98 <I2C_Slave_STOPF+0x234>
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b22      	cmp	r3, #34	; 0x22
 8003c96:	d10d      	bne.n	8003cb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff f804 	bl	8002cbc <HAL_I2C_SlaveRxCpltCallback>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	08004009 	.word	0x08004009
 8003cc0:	ffff0000 	.word	0xffff0000

08003cc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d002      	beq.n	8003ce6 <I2C_Slave_AF+0x22>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d129      	bne.n	8003d3a <I2C_Slave_AF+0x76>
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b28      	cmp	r3, #40	; 0x28
 8003cea:	d126      	bne.n	8003d3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <I2C_Slave_AF+0xdc>)
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe ffda 	bl	8002cec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d38:	e02e      	b.n	8003d98 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b21      	cmp	r3, #33	; 0x21
 8003d3e:	d126      	bne.n	8003d8e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <I2C_Slave_AF+0xdc>)
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2221      	movs	r2, #33	; 0x21
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe ff8e 	bl	8002ca8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d8c:	e004      	b.n	8003d98 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d96:	615a      	str	r2, [r3, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	ffff0000 	.word	0xffff0000

08003da4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d002      	beq.n	8003dc8 <I2C_ITError+0x24>
 8003dc2:	7bbb      	ldrb	r3, [r7, #14]
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d10a      	bne.n	8003dde <I2C_ITError+0x3a>
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b22      	cmp	r3, #34	; 0x22
 8003dcc:	d107      	bne.n	8003dde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003de4:	2b28      	cmp	r3, #40	; 0x28
 8003de6:	d107      	bne.n	8003df8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2228      	movs	r2, #40	; 0x28
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003df6:	e015      	b.n	8003e24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d00a      	beq.n	8003e1e <I2C_ITError+0x7a>
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b60      	cmp	r3, #96	; 0x60
 8003e0c:	d007      	beq.n	8003e1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d162      	bne.n	8003efa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d020      	beq.n	8003e94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	4a6a      	ldr	r2, [pc, #424]	; (8004000 <I2C_ITError+0x25c>)
 8003e58:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe f965 	bl	800212e <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8089 	beq.w	8003f7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4798      	blx	r3
 8003e92:	e074      	b.n	8003f7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	4a59      	ldr	r2, [pc, #356]	; (8004000 <I2C_ITError+0x25c>)
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe f944 	bl	800212e <HAL_DMA_Abort_IT>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d068      	beq.n	8003f7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d10b      	bne.n	8003ed2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4798      	blx	r3
 8003ef8:	e041      	b.n	8003f7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b60      	cmp	r3, #96	; 0x60
 8003f04:	d125      	bne.n	8003f52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d10b      	bne.n	8003f3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fe fef6 	bl	8002d3c <HAL_I2C_AbortCpltCallback>
 8003f50:	e015      	b.n	8003f7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d10b      	bne.n	8003f78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fe fed5 	bl	8002d28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d113      	bne.n	8003ff8 <I2C_ITError+0x254>
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	2b28      	cmp	r3, #40	; 0x28
 8003fd4:	d110      	bne.n	8003ff8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <I2C_ITError+0x260>)
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fe fe7a 	bl	8002cec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	08004009 	.word	0x08004009
 8004004:	ffff0000 	.word	0xffff0000

08004008 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004018:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004022:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <I2C_DMAAbort+0x148>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	08db      	lsrs	r3, r3, #3
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <I2C_DMAAbort+0x14c>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0a1a      	lsrs	r2, r3, #8
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800404e:	e00a      	b.n	8004066 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b01      	subs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004064:	d0ea      	beq.n	800403c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	2200      	movs	r2, #0
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	2200      	movs	r2, #0
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004094:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2200      	movs	r2, #0
 800409a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	2200      	movs	r2, #0
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b60      	cmp	r3, #96	; 0x60
 80040d6:	d10e      	bne.n	80040f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040ee:	6978      	ldr	r0, [r7, #20]
 80040f0:	f7fe fe24 	bl	8002d3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040f4:	e027      	b.n	8004146 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040fc:	2b28      	cmp	r3, #40	; 0x28
 80040fe:	d117      	bne.n	8004130 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2228      	movs	r2, #40	; 0x28
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800412e:	e007      	b.n	8004140 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f7fe fdf1 	bl	8002d28 <HAL_I2C_ErrorCallback>
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000020 	.word	0x20000020
 8004154:	14f8b589 	.word	0x14f8b589

08004158 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	08db      	lsrs	r3, r3, #3
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	0a1a      	lsrs	r2, r3, #8
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3b01      	subs	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d107      	bne.n	8004196 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e008      	b.n	80041a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d0e9      	beq.n	800417a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000020 	.word	0x20000020
 80041b8:	14f8b589 	.word	0x14f8b589

080041bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041cc:	d103      	bne.n	80041d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041d4:	e007      	b.n	80041e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041de:	d102      	bne.n	80041e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2208      	movs	r2, #8
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b20      	cmp	r3, #32
 8004206:	d129      	bne.n	800425c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	; 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0210 	bic.w	r2, r2, #16
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d12a      	bne.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	; 0x24
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042a4:	89fb      	ldrh	r3, [r7, #14]
 80042a6:	f023 030f 	bic.w	r3, r3, #15
 80042aa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	89fa      	ldrh	r2, [r7, #14]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e264      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d075      	beq.n	80043f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004306:	4ba3      	ldr	r3, [pc, #652]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00c      	beq.n	800432c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4ba0      	ldr	r3, [pc, #640]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800431a:	2b08      	cmp	r3, #8
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b9d      	ldr	r3, [pc, #628]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b99      	ldr	r3, [pc, #612]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d157      	bne.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e23f      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x74>
 800434e:	4b91      	ldr	r3, [pc, #580]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a90      	ldr	r2, [pc, #576]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x98>
 8004366:	4b8b      	ldr	r3, [pc, #556]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a8a      	ldr	r2, [pc, #552]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b88      	ldr	r3, [pc, #544]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a87      	ldr	r2, [pc, #540]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 8004380:	4b84      	ldr	r3, [pc, #528]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a83      	ldr	r2, [pc, #524]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b81      	ldr	r3, [pc, #516]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a80      	ldr	r2, [pc, #512]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd fda8 	bl	8001ef4 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fd fda4 	bl	8001ef4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e204      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xc0>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fd fd94 	bl	8001ef4 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fd fd90 	bl	8001ef4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e1f0      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0xe8>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b62      	ldr	r3, [pc, #392]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004412:	2b08      	cmp	r3, #8
 8004414:	d11c      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e1c4      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443a:	4b56      	ldr	r3, [pc, #344]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4952      	ldr	r1, [pc, #328]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	e03a      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004458:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_RCC_OscConfig+0x2b0>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd fd49 	bl	8001ef4 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004466:	f7fd fd45 	bl	8001ef4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1a5      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	4b46      	ldr	r3, [pc, #280]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b43      	ldr	r3, [pc, #268]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4940      	ldr	r1, [pc, #256]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
 8004498:	e015      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCC_OscConfig+0x2b0>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fd fd28 	bl	8001ef4 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a8:	f7fd fd24 	bl	8001ef4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e184      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	4b36      	ldr	r3, [pc, #216]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d030      	beq.n	8004534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCC_OscConfig+0x2b4>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fd fd08 	bl	8001ef4 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e8:	f7fd fd04 	bl	8001ef4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e164      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	4b26      	ldr	r3, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x200>
 8004506:	e015      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_OscConfig+0x2b4>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450e:	f7fd fcf1 	bl	8001ef4 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004516:	f7fd fced 	bl	8001ef4 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e14d      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80a0 	beq.w	8004682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800456e:	2301      	movs	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_OscConfig+0x2b8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d121      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_RCC_OscConfig+0x2b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <HAL_RCC_OscConfig+0x2b8>)
 8004584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458a:	f7fd fcb3 	bl	8001ef4 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	e011      	b.n	80045b6 <HAL_RCC_OscConfig+0x2ce>
 8004592:	bf00      	nop
 8004594:	40023800 	.word	0x40023800
 8004598:	42470000 	.word	0x42470000
 800459c:	42470e80 	.word	0x42470e80
 80045a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fd fca6 	bl	8001ef4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e106      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCC_OscConfig+0x4e4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x2f0>
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70
 80045d6:	e01c      	b.n	8004612 <HAL_RCC_OscConfig+0x32a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d10c      	bne.n	80045fa <HAL_RCC_OscConfig+0x312>
 80045e0:	4b7b      	ldr	r3, [pc, #492]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a7a      	ldr	r2, [pc, #488]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a77      	ldr	r2, [pc, #476]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	e00b      	b.n	8004612 <HAL_RCC_OscConfig+0x32a>
 80045fa:	4b75      	ldr	r3, [pc, #468]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a74      	ldr	r2, [pc, #464]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	4b72      	ldr	r3, [pc, #456]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a71      	ldr	r2, [pc, #452]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 800460c:	f023 0304 	bic.w	r3, r3, #4
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d015      	beq.n	8004646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fd fc6b 	bl	8001ef4 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fd fc67 	bl	8001ef4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e0c5      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ee      	beq.n	8004622 <HAL_RCC_OscConfig+0x33a>
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004646:	f7fd fc55 	bl	8001ef4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fd fc51 	bl	8001ef4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0af      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	4b5a      	ldr	r3, [pc, #360]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	4a55      	ldr	r2, [pc, #340]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 800467c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 809b 	beq.w	80047c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d05c      	beq.n	8004752 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d141      	bne.n	8004724 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a0:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_RCC_OscConfig+0x4ec>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fd fc25 	bl	8001ef4 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fd fc21 	bl	8001ef4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e081      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	019b      	lsls	r3, r3, #6
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	3b01      	subs	r3, #1
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	061b      	lsls	r3, r3, #24
 80046f0:	4937      	ldr	r1, [pc, #220]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCC_OscConfig+0x4ec>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd fbfa 	bl	8001ef4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004704:	f7fd fbf6 	bl	8001ef4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e056      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004716:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x41c>
 8004722:	e04e      	b.n	80047c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004724:	4b2b      	ldr	r3, [pc, #172]	; (80047d4 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472a:	f7fd fbe3 	bl	8001ef4 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004732:	f7fd fbdf 	bl	8001ef4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e03f      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004744:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x44a>
 8004750:	e037      	b.n	80047c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e032      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_RCC_OscConfig+0x4e8>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d028      	beq.n	80047be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d121      	bne.n	80047be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d11a      	bne.n	80047be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800478e:	4013      	ands	r3, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004794:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004796:	4293      	cmp	r3, r2
 8004798:	d111      	bne.n	80047be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d107      	bne.n	80047be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40007000 	.word	0x40007000
 80047d0:	40023800 	.word	0x40023800
 80047d4:	42470060 	.word	0x42470060

080047d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0cc      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d90c      	bls.n	8004814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b65      	ldr	r3, [pc, #404]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b63      	ldr	r3, [pc, #396]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800482c:	4b59      	ldr	r3, [pc, #356]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800484e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	494d      	ldr	r1, [pc, #308]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d044      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d119      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004892:	2b03      	cmp	r3, #3
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e067      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b6:	4b37      	ldr	r3, [pc, #220]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4934      	ldr	r1, [pc, #208]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c8:	f7fd fb14 	bl	8001ef4 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fd fb10 	bl	8001ef4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e04f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 020c 	and.w	r2, r3, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1eb      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d20c      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e032      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4916      	ldr	r1, [pc, #88]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490e      	ldr	r1, [pc, #56]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800495e:	f000 f821 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490a      	ldr	r1, [pc, #40]	; (8004998 <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fa74 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00
 8004994:	40023800 	.word	0x40023800
 8004998:	08006c28 	.word	0x08006c28
 800499c:	20000020 	.word	0x20000020
 80049a0:	20000024 	.word	0x20000024

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b5b0      	push	{r4, r5, r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049aa:	2100      	movs	r1, #0
 80049ac:	6079      	str	r1, [r7, #4]
 80049ae:	2100      	movs	r1, #0
 80049b0:	60f9      	str	r1, [r7, #12]
 80049b2:	2100      	movs	r1, #0
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049b6:	2100      	movs	r1, #0
 80049b8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ba:	4952      	ldr	r1, [pc, #328]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 80049bc:	6889      	ldr	r1, [r1, #8]
 80049be:	f001 010c 	and.w	r1, r1, #12
 80049c2:	2908      	cmp	r1, #8
 80049c4:	d00d      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x3e>
 80049c6:	2908      	cmp	r1, #8
 80049c8:	f200 8094 	bhi.w	8004af4 <HAL_RCC_GetSysClockFreq+0x150>
 80049cc:	2900      	cmp	r1, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x32>
 80049d0:	2904      	cmp	r1, #4
 80049d2:	d003      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x38>
 80049d4:	e08e      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d6:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x164>)
 80049d8:	60bb      	str	r3, [r7, #8]
       break;
 80049da:	e08e      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049dc:	4b4b      	ldr	r3, [pc, #300]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x168>)
 80049de:	60bb      	str	r3, [r7, #8]
      break;
 80049e0:	e08b      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e2:	4948      	ldr	r1, [pc, #288]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 80049e4:	6849      	ldr	r1, [r1, #4]
 80049e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80049ea:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ec:	4945      	ldr	r1, [pc, #276]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ee:	6849      	ldr	r1, [r1, #4]
 80049f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80049f4:	2900      	cmp	r1, #0
 80049f6:	d024      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f8:	4942      	ldr	r1, [pc, #264]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 80049fa:	6849      	ldr	r1, [r1, #4]
 80049fc:	0989      	lsrs	r1, r1, #6
 80049fe:	4608      	mov	r0, r1
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a08:	f04f 0500 	mov.w	r5, #0
 8004a0c:	ea00 0204 	and.w	r2, r0, r4
 8004a10:	ea01 0305 	and.w	r3, r1, r5
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x168>)
 8004a16:	fb01 f003 	mul.w	r0, r1, r3
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	fb01 f102 	mul.w	r1, r1, r2
 8004a20:	1844      	adds	r4, r0, r1
 8004a22:	493a      	ldr	r1, [pc, #232]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x168>)
 8004a24:	fba2 0101 	umull	r0, r1, r2, r1
 8004a28:	1863      	adds	r3, r4, r1
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f7fc f8c0 	bl	8000bb8 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e04a      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	ea02 0400 	and.w	r4, r2, r0
 8004a5a:	ea03 0501 	and.w	r5, r3, r1
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	014b      	lsls	r3, r1, #5
 8004a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a70:	0142      	lsls	r2, r0, #5
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	1b00      	subs	r0, r0, r4
 8004a78:	eb61 0105 	sbc.w	r1, r1, r5
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	018b      	lsls	r3, r1, #6
 8004a86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a8a:	0182      	lsls	r2, r0, #6
 8004a8c:	1a12      	subs	r2, r2, r0
 8004a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	00d9      	lsls	r1, r3, #3
 8004a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aa0:	00d0      	lsls	r0, r2, #3
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	1912      	adds	r2, r2, r4
 8004aa8:	eb45 0303 	adc.w	r3, r5, r3
 8004aac:	f04f 0000 	mov.w	r0, #0
 8004ab0:	f04f 0100 	mov.w	r1, #0
 8004ab4:	0299      	lsls	r1, r3, #10
 8004ab6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aba:	0290      	lsls	r0, r2, #10
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f7fc f874 	bl	8000bb8 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	0c1b      	lsrs	r3, r3, #16
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	60bb      	str	r3, [r7, #8]
      break;
 8004af2:	e002      	b.n	8004afa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x164>)
 8004af6:	60bb      	str	r3, [r7, #8]
      break;
 8004af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004afa:	68bb      	ldr	r3, [r7, #8]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bdb0      	pop	{r4, r5, r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	017d7840 	.word	0x017d7840

08004b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000020 	.word	0x20000020

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08006c38 	.word	0x08006c38

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000002c 	.word	0x2000002c

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	; (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	; (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f002 f84c 	bl	8006c0c <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08006e68 	.word	0x08006e68
 8004b98:	08006e68 	.word	0x08006e68
 8004b9c:	08006e68 	.word	0x08006e68
 8004ba0:	08006e6c 	.word	0x08006e6c

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>
 8004bb4:	0000      	movs	r0, r0
	...

08004bb8 <cos>:
 8004bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bba:	ec53 2b10 	vmov	r2, r3, d0
 8004bbe:	4824      	ldr	r0, [pc, #144]	; (8004c50 <cos+0x98>)
 8004bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004bc4:	4281      	cmp	r1, r0
 8004bc6:	dc06      	bgt.n	8004bd6 <cos+0x1e>
 8004bc8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004c48 <cos+0x90>
 8004bcc:	f001 f9a8 	bl	8005f20 <__kernel_cos>
 8004bd0:	ec51 0b10 	vmov	r0, r1, d0
 8004bd4:	e007      	b.n	8004be6 <cos+0x2e>
 8004bd6:	481f      	ldr	r0, [pc, #124]	; (8004c54 <cos+0x9c>)
 8004bd8:	4281      	cmp	r1, r0
 8004bda:	dd09      	ble.n	8004bf0 <cos+0x38>
 8004bdc:	ee10 0a10 	vmov	r0, s0
 8004be0:	4619      	mov	r1, r3
 8004be2:	f7fb fb09 	bl	80001f8 <__aeabi_dsub>
 8004be6:	ec41 0b10 	vmov	d0, r0, r1
 8004bea:	b005      	add	sp, #20
 8004bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bf0:	4668      	mov	r0, sp
 8004bf2:	f000 fed5 	bl	80059a0 <__ieee754_rem_pio2>
 8004bf6:	f000 0003 	and.w	r0, r0, #3
 8004bfa:	2801      	cmp	r0, #1
 8004bfc:	d007      	beq.n	8004c0e <cos+0x56>
 8004bfe:	2802      	cmp	r0, #2
 8004c00:	d012      	beq.n	8004c28 <cos+0x70>
 8004c02:	b9c0      	cbnz	r0, 8004c36 <cos+0x7e>
 8004c04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c08:	ed9d 0b00 	vldr	d0, [sp]
 8004c0c:	e7de      	b.n	8004bcc <cos+0x14>
 8004c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c12:	ed9d 0b00 	vldr	d0, [sp]
 8004c16:	f001 fd8b 	bl	8006730 <__kernel_sin>
 8004c1a:	ec53 2b10 	vmov	r2, r3, d0
 8004c1e:	ee10 0a10 	vmov	r0, s0
 8004c22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004c26:	e7de      	b.n	8004be6 <cos+0x2e>
 8004c28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c2c:	ed9d 0b00 	vldr	d0, [sp]
 8004c30:	f001 f976 	bl	8005f20 <__kernel_cos>
 8004c34:	e7f1      	b.n	8004c1a <cos+0x62>
 8004c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004c3a:	ed9d 0b00 	vldr	d0, [sp]
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f001 fd76 	bl	8006730 <__kernel_sin>
 8004c44:	e7c4      	b.n	8004bd0 <cos+0x18>
 8004c46:	bf00      	nop
	...
 8004c50:	3fe921fb 	.word	0x3fe921fb
 8004c54:	7fefffff 	.word	0x7fefffff

08004c58 <round>:
 8004c58:	ec51 0b10 	vmov	r0, r1, d0
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004c62:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004c66:	2c13      	cmp	r4, #19
 8004c68:	ee10 2a10 	vmov	r2, s0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	dc19      	bgt.n	8004ca4 <round+0x4c>
 8004c70:	2c00      	cmp	r4, #0
 8004c72:	da09      	bge.n	8004c88 <round+0x30>
 8004c74:	3401      	adds	r4, #1
 8004c76:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004c7a:	d103      	bne.n	8004c84 <round+0x2c>
 8004c7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c84:	2100      	movs	r1, #0
 8004c86:	e028      	b.n	8004cda <round+0x82>
 8004c88:	4d15      	ldr	r5, [pc, #84]	; (8004ce0 <round+0x88>)
 8004c8a:	4125      	asrs	r5, r4
 8004c8c:	ea01 0605 	and.w	r6, r1, r5
 8004c90:	4332      	orrs	r2, r6
 8004c92:	d00e      	beq.n	8004cb2 <round+0x5a>
 8004c94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c98:	fa42 f404 	asr.w	r4, r2, r4
 8004c9c:	4423      	add	r3, r4
 8004c9e:	ea23 0305 	bic.w	r3, r3, r5
 8004ca2:	e7ef      	b.n	8004c84 <round+0x2c>
 8004ca4:	2c33      	cmp	r4, #51	; 0x33
 8004ca6:	dd07      	ble.n	8004cb8 <round+0x60>
 8004ca8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004cac:	d101      	bne.n	8004cb2 <round+0x5a>
 8004cae:	f7fb faa5 	bl	80001fc <__adddf3>
 8004cb2:	ec41 0b10 	vmov	d0, r0, r1
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8004cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8004cc0:	40f5      	lsrs	r5, r6
 8004cc2:	4228      	tst	r0, r5
 8004cc4:	d0f5      	beq.n	8004cb2 <round+0x5a>
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004ccc:	fa01 f404 	lsl.w	r4, r1, r4
 8004cd0:	1912      	adds	r2, r2, r4
 8004cd2:	bf28      	it	cs
 8004cd4:	185b      	addcs	r3, r3, r1
 8004cd6:	ea22 0105 	bic.w	r1, r2, r5
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4619      	mov	r1, r3
 8004cde:	e7e8      	b.n	8004cb2 <round+0x5a>
 8004ce0:	000fffff 	.word	0x000fffff
 8004ce4:	00000000 	.word	0x00000000

08004ce8 <sin>:
 8004ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cea:	ec53 2b10 	vmov	r2, r3, d0
 8004cee:	4826      	ldr	r0, [pc, #152]	; (8004d88 <sin+0xa0>)
 8004cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf4:	4281      	cmp	r1, r0
 8004cf6:	dc07      	bgt.n	8004d08 <sin+0x20>
 8004cf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004d80 <sin+0x98>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f001 fd17 	bl	8006730 <__kernel_sin>
 8004d02:	ec51 0b10 	vmov	r0, r1, d0
 8004d06:	e007      	b.n	8004d18 <sin+0x30>
 8004d08:	4820      	ldr	r0, [pc, #128]	; (8004d8c <sin+0xa4>)
 8004d0a:	4281      	cmp	r1, r0
 8004d0c:	dd09      	ble.n	8004d22 <sin+0x3a>
 8004d0e:	ee10 0a10 	vmov	r0, s0
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fa70 	bl	80001f8 <__aeabi_dsub>
 8004d18:	ec41 0b10 	vmov	d0, r0, r1
 8004d1c:	b005      	add	sp, #20
 8004d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d22:	4668      	mov	r0, sp
 8004d24:	f000 fe3c 	bl	80059a0 <__ieee754_rem_pio2>
 8004d28:	f000 0003 	and.w	r0, r0, #3
 8004d2c:	2801      	cmp	r0, #1
 8004d2e:	d008      	beq.n	8004d42 <sin+0x5a>
 8004d30:	2802      	cmp	r0, #2
 8004d32:	d00d      	beq.n	8004d50 <sin+0x68>
 8004d34:	b9d0      	cbnz	r0, 8004d6c <sin+0x84>
 8004d36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d3a:	ed9d 0b00 	vldr	d0, [sp]
 8004d3e:	2001      	movs	r0, #1
 8004d40:	e7dd      	b.n	8004cfe <sin+0x16>
 8004d42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d46:	ed9d 0b00 	vldr	d0, [sp]
 8004d4a:	f001 f8e9 	bl	8005f20 <__kernel_cos>
 8004d4e:	e7d8      	b.n	8004d02 <sin+0x1a>
 8004d50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d54:	ed9d 0b00 	vldr	d0, [sp]
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f001 fce9 	bl	8006730 <__kernel_sin>
 8004d5e:	ec53 2b10 	vmov	r2, r3, d0
 8004d62:	ee10 0a10 	vmov	r0, s0
 8004d66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d6a:	e7d5      	b.n	8004d18 <sin+0x30>
 8004d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d70:	ed9d 0b00 	vldr	d0, [sp]
 8004d74:	f001 f8d4 	bl	8005f20 <__kernel_cos>
 8004d78:	e7f1      	b.n	8004d5e <sin+0x76>
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w
	...
 8004d88:	3fe921fb 	.word	0x3fe921fb
 8004d8c:	7fefffff 	.word	0x7fefffff

08004d90 <pow>:
 8004d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d94:	ec59 8b10 	vmov	r8, r9, d0
 8004d98:	ec57 6b11 	vmov	r6, r7, d1
 8004d9c:	f000 f8dc 	bl	8004f58 <__ieee754_pow>
 8004da0:	4b4e      	ldr	r3, [pc, #312]	; (8004edc <pow+0x14c>)
 8004da2:	f993 3000 	ldrsb.w	r3, [r3]
 8004da6:	3301      	adds	r3, #1
 8004da8:	ec55 4b10 	vmov	r4, r5, d0
 8004dac:	d015      	beq.n	8004dda <pow+0x4a>
 8004dae:	4632      	mov	r2, r6
 8004db0:	463b      	mov	r3, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	4639      	mov	r1, r7
 8004db6:	f7fb fe71 	bl	8000a9c <__aeabi_dcmpun>
 8004dba:	b970      	cbnz	r0, 8004dda <pow+0x4a>
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	f7fb fe6a 	bl	8000a9c <__aeabi_dcmpun>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	b148      	cbz	r0, 8004de2 <pow+0x52>
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7fb fe31 	bl	8000a38 <__aeabi_dcmpeq>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	d17d      	bne.n	8004ed6 <pow+0x146>
 8004dda:	ec45 4b10 	vmov	d0, r4, r5
 8004dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de2:	4640      	mov	r0, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	f7fb fe27 	bl	8000a38 <__aeabi_dcmpeq>
 8004dea:	b1e0      	cbz	r0, 8004e26 <pow+0x96>
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fe20 	bl	8000a38 <__aeabi_dcmpeq>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d16c      	bne.n	8004ed6 <pow+0x146>
 8004dfc:	ec47 6b10 	vmov	d0, r6, r7
 8004e00:	f001 fd5d 	bl	80068be <finite>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d0e8      	beq.n	8004dda <pow+0x4a>
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	4639      	mov	r1, r7
 8004e10:	f7fb fe1c 	bl	8000a4c <__aeabi_dcmplt>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d0e0      	beq.n	8004dda <pow+0x4a>
 8004e18:	f7ff fe9a 	bl	8004b50 <__errno>
 8004e1c:	2321      	movs	r3, #33	; 0x21
 8004e1e:	6003      	str	r3, [r0, #0]
 8004e20:	2400      	movs	r4, #0
 8004e22:	4d2f      	ldr	r5, [pc, #188]	; (8004ee0 <pow+0x150>)
 8004e24:	e7d9      	b.n	8004dda <pow+0x4a>
 8004e26:	ec45 4b10 	vmov	d0, r4, r5
 8004e2a:	f001 fd48 	bl	80068be <finite>
 8004e2e:	bbb8      	cbnz	r0, 8004ea0 <pow+0x110>
 8004e30:	ec49 8b10 	vmov	d0, r8, r9
 8004e34:	f001 fd43 	bl	80068be <finite>
 8004e38:	b390      	cbz	r0, 8004ea0 <pow+0x110>
 8004e3a:	ec47 6b10 	vmov	d0, r6, r7
 8004e3e:	f001 fd3e 	bl	80068be <finite>
 8004e42:	b368      	cbz	r0, 8004ea0 <pow+0x110>
 8004e44:	4622      	mov	r2, r4
 8004e46:	462b      	mov	r3, r5
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	f7fb fe26 	bl	8000a9c <__aeabi_dcmpun>
 8004e50:	b160      	cbz	r0, 8004e6c <pow+0xdc>
 8004e52:	f7ff fe7d 	bl	8004b50 <__errno>
 8004e56:	2321      	movs	r3, #33	; 0x21
 8004e58:	6003      	str	r3, [r0, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fb fcab 	bl	80007bc <__aeabi_ddiv>
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	e7b6      	b.n	8004dda <pow+0x4a>
 8004e6c:	f7ff fe70 	bl	8004b50 <__errno>
 8004e70:	2322      	movs	r3, #34	; 0x22
 8004e72:	6003      	str	r3, [r0, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2300      	movs	r3, #0
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb fde6 	bl	8000a4c <__aeabi_dcmplt>
 8004e80:	2400      	movs	r4, #0
 8004e82:	b158      	cbz	r0, 8004e9c <pow+0x10c>
 8004e84:	ec47 6b10 	vmov	d0, r6, r7
 8004e88:	f001 fdae 	bl	80069e8 <rint>
 8004e8c:	4632      	mov	r2, r6
 8004e8e:	ec51 0b10 	vmov	r0, r1, d0
 8004e92:	463b      	mov	r3, r7
 8004e94:	f7fb fdd0 	bl	8000a38 <__aeabi_dcmpeq>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d0c2      	beq.n	8004e22 <pow+0x92>
 8004e9c:	4d11      	ldr	r5, [pc, #68]	; (8004ee4 <pow+0x154>)
 8004e9e:	e79c      	b.n	8004dda <pow+0x4a>
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb fdc6 	bl	8000a38 <__aeabi_dcmpeq>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d094      	beq.n	8004dda <pow+0x4a>
 8004eb0:	ec49 8b10 	vmov	d0, r8, r9
 8004eb4:	f001 fd03 	bl	80068be <finite>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d08e      	beq.n	8004dda <pow+0x4a>
 8004ebc:	ec47 6b10 	vmov	d0, r6, r7
 8004ec0:	f001 fcfd 	bl	80068be <finite>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d088      	beq.n	8004dda <pow+0x4a>
 8004ec8:	f7ff fe42 	bl	8004b50 <__errno>
 8004ecc:	2322      	movs	r3, #34	; 0x22
 8004ece:	6003      	str	r3, [r0, #0]
 8004ed0:	2400      	movs	r4, #0
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	e781      	b.n	8004dda <pow+0x4a>
 8004ed6:	4d04      	ldr	r5, [pc, #16]	; (8004ee8 <pow+0x158>)
 8004ed8:	2400      	movs	r4, #0
 8004eda:	e77e      	b.n	8004dda <pow+0x4a>
 8004edc:	20000090 	.word	0x20000090
 8004ee0:	fff00000 	.word	0xfff00000
 8004ee4:	7ff00000 	.word	0x7ff00000
 8004ee8:	3ff00000 	.word	0x3ff00000

08004eec <sqrt>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	ed2d 8b02 	vpush	{d8}
 8004ef2:	ec55 4b10 	vmov	r4, r5, d0
 8004ef6:	f000 ff5d 	bl	8005db4 <__ieee754_sqrt>
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <sqrt+0x64>)
 8004efc:	eeb0 8a40 	vmov.f32	s16, s0
 8004f00:	eef0 8a60 	vmov.f32	s17, s1
 8004f04:	f993 3000 	ldrsb.w	r3, [r3]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	d019      	beq.n	8004f40 <sqrt+0x54>
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	462b      	mov	r3, r5
 8004f10:	4620      	mov	r0, r4
 8004f12:	4629      	mov	r1, r5
 8004f14:	f7fb fdc2 	bl	8000a9c <__aeabi_dcmpun>
 8004f18:	b990      	cbnz	r0, 8004f40 <sqrt+0x54>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fd93 	bl	8000a4c <__aeabi_dcmplt>
 8004f26:	b158      	cbz	r0, 8004f40 <sqrt+0x54>
 8004f28:	f7ff fe12 	bl	8004b50 <__errno>
 8004f2c:	2321      	movs	r3, #33	; 0x21
 8004f2e:	6003      	str	r3, [r0, #0]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f7fb fc40 	bl	80007bc <__aeabi_ddiv>
 8004f3c:	ec41 0b18 	vmov	d8, r0, r1
 8004f40:	eeb0 0a48 	vmov.f32	s0, s16
 8004f44:	eef0 0a68 	vmov.f32	s1, s17
 8004f48:	ecbd 8b02 	vpop	{d8}
 8004f4c:	bd38      	pop	{r3, r4, r5, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000090 	.word	0x20000090
 8004f54:	00000000 	.word	0x00000000

08004f58 <__ieee754_pow>:
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f5c:	ed2d 8b06 	vpush	{d8-d10}
 8004f60:	b08d      	sub	sp, #52	; 0x34
 8004f62:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004f66:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004f6a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004f6e:	ea56 0100 	orrs.w	r1, r6, r0
 8004f72:	ec53 2b10 	vmov	r2, r3, d0
 8004f76:	f000 84d1 	beq.w	800591c <__ieee754_pow+0x9c4>
 8004f7a:	497f      	ldr	r1, [pc, #508]	; (8005178 <__ieee754_pow+0x220>)
 8004f7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004f80:	428c      	cmp	r4, r1
 8004f82:	ee10 8a10 	vmov	r8, s0
 8004f86:	4699      	mov	r9, r3
 8004f88:	dc09      	bgt.n	8004f9e <__ieee754_pow+0x46>
 8004f8a:	d103      	bne.n	8004f94 <__ieee754_pow+0x3c>
 8004f8c:	b97a      	cbnz	r2, 8004fae <__ieee754_pow+0x56>
 8004f8e:	42a6      	cmp	r6, r4
 8004f90:	dd02      	ble.n	8004f98 <__ieee754_pow+0x40>
 8004f92:	e00c      	b.n	8004fae <__ieee754_pow+0x56>
 8004f94:	428e      	cmp	r6, r1
 8004f96:	dc02      	bgt.n	8004f9e <__ieee754_pow+0x46>
 8004f98:	428e      	cmp	r6, r1
 8004f9a:	d110      	bne.n	8004fbe <__ieee754_pow+0x66>
 8004f9c:	b178      	cbz	r0, 8004fbe <__ieee754_pow+0x66>
 8004f9e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004fa2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004fa6:	ea54 0308 	orrs.w	r3, r4, r8
 8004faa:	f000 84b7 	beq.w	800591c <__ieee754_pow+0x9c4>
 8004fae:	4873      	ldr	r0, [pc, #460]	; (800517c <__ieee754_pow+0x224>)
 8004fb0:	b00d      	add	sp, #52	; 0x34
 8004fb2:	ecbd 8b06 	vpop	{d8-d10}
 8004fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f001 bd0d 	b.w	80069d8 <nan>
 8004fbe:	f1b9 0f00 	cmp.w	r9, #0
 8004fc2:	da36      	bge.n	8005032 <__ieee754_pow+0xda>
 8004fc4:	496e      	ldr	r1, [pc, #440]	; (8005180 <__ieee754_pow+0x228>)
 8004fc6:	428e      	cmp	r6, r1
 8004fc8:	dc51      	bgt.n	800506e <__ieee754_pow+0x116>
 8004fca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004fce:	428e      	cmp	r6, r1
 8004fd0:	f340 84af 	ble.w	8005932 <__ieee754_pow+0x9da>
 8004fd4:	1531      	asrs	r1, r6, #20
 8004fd6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004fda:	2914      	cmp	r1, #20
 8004fdc:	dd0f      	ble.n	8004ffe <__ieee754_pow+0xa6>
 8004fde:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004fe2:	fa20 fc01 	lsr.w	ip, r0, r1
 8004fe6:	fa0c f101 	lsl.w	r1, ip, r1
 8004fea:	4281      	cmp	r1, r0
 8004fec:	f040 84a1 	bne.w	8005932 <__ieee754_pow+0x9da>
 8004ff0:	f00c 0c01 	and.w	ip, ip, #1
 8004ff4:	f1cc 0102 	rsb	r1, ip, #2
 8004ff8:	9100      	str	r1, [sp, #0]
 8004ffa:	b180      	cbz	r0, 800501e <__ieee754_pow+0xc6>
 8004ffc:	e059      	b.n	80050b2 <__ieee754_pow+0x15a>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d155      	bne.n	80050ae <__ieee754_pow+0x156>
 8005002:	f1c1 0114 	rsb	r1, r1, #20
 8005006:	fa46 fc01 	asr.w	ip, r6, r1
 800500a:	fa0c f101 	lsl.w	r1, ip, r1
 800500e:	42b1      	cmp	r1, r6
 8005010:	f040 848c 	bne.w	800592c <__ieee754_pow+0x9d4>
 8005014:	f00c 0c01 	and.w	ip, ip, #1
 8005018:	f1cc 0102 	rsb	r1, ip, #2
 800501c:	9100      	str	r1, [sp, #0]
 800501e:	4959      	ldr	r1, [pc, #356]	; (8005184 <__ieee754_pow+0x22c>)
 8005020:	428e      	cmp	r6, r1
 8005022:	d12d      	bne.n	8005080 <__ieee754_pow+0x128>
 8005024:	2f00      	cmp	r7, #0
 8005026:	da79      	bge.n	800511c <__ieee754_pow+0x1c4>
 8005028:	4956      	ldr	r1, [pc, #344]	; (8005184 <__ieee754_pow+0x22c>)
 800502a:	2000      	movs	r0, #0
 800502c:	f7fb fbc6 	bl	80007bc <__aeabi_ddiv>
 8005030:	e016      	b.n	8005060 <__ieee754_pow+0x108>
 8005032:	2100      	movs	r1, #0
 8005034:	9100      	str	r1, [sp, #0]
 8005036:	2800      	cmp	r0, #0
 8005038:	d13b      	bne.n	80050b2 <__ieee754_pow+0x15a>
 800503a:	494f      	ldr	r1, [pc, #316]	; (8005178 <__ieee754_pow+0x220>)
 800503c:	428e      	cmp	r6, r1
 800503e:	d1ee      	bne.n	800501e <__ieee754_pow+0xc6>
 8005040:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005044:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005048:	ea53 0308 	orrs.w	r3, r3, r8
 800504c:	f000 8466 	beq.w	800591c <__ieee754_pow+0x9c4>
 8005050:	4b4d      	ldr	r3, [pc, #308]	; (8005188 <__ieee754_pow+0x230>)
 8005052:	429c      	cmp	r4, r3
 8005054:	dd0d      	ble.n	8005072 <__ieee754_pow+0x11a>
 8005056:	2f00      	cmp	r7, #0
 8005058:	f280 8464 	bge.w	8005924 <__ieee754_pow+0x9cc>
 800505c:	2000      	movs	r0, #0
 800505e:	2100      	movs	r1, #0
 8005060:	ec41 0b10 	vmov	d0, r0, r1
 8005064:	b00d      	add	sp, #52	; 0x34
 8005066:	ecbd 8b06 	vpop	{d8-d10}
 800506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800506e:	2102      	movs	r1, #2
 8005070:	e7e0      	b.n	8005034 <__ieee754_pow+0xdc>
 8005072:	2f00      	cmp	r7, #0
 8005074:	daf2      	bge.n	800505c <__ieee754_pow+0x104>
 8005076:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800507a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800507e:	e7ef      	b.n	8005060 <__ieee754_pow+0x108>
 8005080:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005084:	d104      	bne.n	8005090 <__ieee754_pow+0x138>
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fa6d 	bl	8000568 <__aeabi_dmul>
 800508e:	e7e7      	b.n	8005060 <__ieee754_pow+0x108>
 8005090:	493e      	ldr	r1, [pc, #248]	; (800518c <__ieee754_pow+0x234>)
 8005092:	428f      	cmp	r7, r1
 8005094:	d10d      	bne.n	80050b2 <__ieee754_pow+0x15a>
 8005096:	f1b9 0f00 	cmp.w	r9, #0
 800509a:	db0a      	blt.n	80050b2 <__ieee754_pow+0x15a>
 800509c:	ec43 2b10 	vmov	d0, r2, r3
 80050a0:	b00d      	add	sp, #52	; 0x34
 80050a2:	ecbd 8b06 	vpop	{d8-d10}
 80050a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	f000 be83 	b.w	8005db4 <__ieee754_sqrt>
 80050ae:	2100      	movs	r1, #0
 80050b0:	9100      	str	r1, [sp, #0]
 80050b2:	ec43 2b10 	vmov	d0, r2, r3
 80050b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ba:	f001 fbf7 	bl	80068ac <fabs>
 80050be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c2:	ec51 0b10 	vmov	r0, r1, d0
 80050c6:	f1b8 0f00 	cmp.w	r8, #0
 80050ca:	d12a      	bne.n	8005122 <__ieee754_pow+0x1ca>
 80050cc:	b12c      	cbz	r4, 80050da <__ieee754_pow+0x182>
 80050ce:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005184 <__ieee754_pow+0x22c>
 80050d2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80050d6:	45e6      	cmp	lr, ip
 80050d8:	d123      	bne.n	8005122 <__ieee754_pow+0x1ca>
 80050da:	2f00      	cmp	r7, #0
 80050dc:	da05      	bge.n	80050ea <__ieee754_pow+0x192>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	2000      	movs	r0, #0
 80050e4:	4927      	ldr	r1, [pc, #156]	; (8005184 <__ieee754_pow+0x22c>)
 80050e6:	f7fb fb69 	bl	80007bc <__aeabi_ddiv>
 80050ea:	f1b9 0f00 	cmp.w	r9, #0
 80050ee:	dab7      	bge.n	8005060 <__ieee754_pow+0x108>
 80050f0:	9b00      	ldr	r3, [sp, #0]
 80050f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050fa:	4323      	orrs	r3, r4
 80050fc:	d108      	bne.n	8005110 <__ieee754_pow+0x1b8>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f7fb f877 	bl	80001f8 <__aeabi_dsub>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	e78d      	b.n	800502c <__ieee754_pow+0xd4>
 8005110:	9b00      	ldr	r3, [sp, #0]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d1a4      	bne.n	8005060 <__ieee754_pow+0x108>
 8005116:	4602      	mov	r2, r0
 8005118:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	e79e      	b.n	8005060 <__ieee754_pow+0x108>
 8005122:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005126:	f10c 35ff 	add.w	r5, ip, #4294967295
 800512a:	950a      	str	r5, [sp, #40]	; 0x28
 800512c:	9d00      	ldr	r5, [sp, #0]
 800512e:	46ac      	mov	ip, r5
 8005130:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005132:	ea5c 0505 	orrs.w	r5, ip, r5
 8005136:	d0e4      	beq.n	8005102 <__ieee754_pow+0x1aa>
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <__ieee754_pow+0x238>)
 800513a:	429e      	cmp	r6, r3
 800513c:	f340 80fc 	ble.w	8005338 <__ieee754_pow+0x3e0>
 8005140:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005144:	429e      	cmp	r6, r3
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <__ieee754_pow+0x230>)
 8005148:	dd07      	ble.n	800515a <__ieee754_pow+0x202>
 800514a:	429c      	cmp	r4, r3
 800514c:	dc0a      	bgt.n	8005164 <__ieee754_pow+0x20c>
 800514e:	2f00      	cmp	r7, #0
 8005150:	da84      	bge.n	800505c <__ieee754_pow+0x104>
 8005152:	a307      	add	r3, pc, #28	; (adr r3, 8005170 <__ieee754_pow+0x218>)
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	e795      	b.n	8005086 <__ieee754_pow+0x12e>
 800515a:	429c      	cmp	r4, r3
 800515c:	dbf7      	blt.n	800514e <__ieee754_pow+0x1f6>
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <__ieee754_pow+0x22c>)
 8005160:	429c      	cmp	r4, r3
 8005162:	dd17      	ble.n	8005194 <__ieee754_pow+0x23c>
 8005164:	2f00      	cmp	r7, #0
 8005166:	dcf4      	bgt.n	8005152 <__ieee754_pow+0x1fa>
 8005168:	e778      	b.n	800505c <__ieee754_pow+0x104>
 800516a:	bf00      	nop
 800516c:	f3af 8000 	nop.w
 8005170:	8800759c 	.word	0x8800759c
 8005174:	7e37e43c 	.word	0x7e37e43c
 8005178:	7ff00000 	.word	0x7ff00000
 800517c:	08006c40 	.word	0x08006c40
 8005180:	433fffff 	.word	0x433fffff
 8005184:	3ff00000 	.word	0x3ff00000
 8005188:	3fefffff 	.word	0x3fefffff
 800518c:	3fe00000 	.word	0x3fe00000
 8005190:	41e00000 	.word	0x41e00000
 8005194:	4b64      	ldr	r3, [pc, #400]	; (8005328 <__ieee754_pow+0x3d0>)
 8005196:	2200      	movs	r2, #0
 8005198:	f7fb f82e 	bl	80001f8 <__aeabi_dsub>
 800519c:	a356      	add	r3, pc, #344	; (adr r3, 80052f8 <__ieee754_pow+0x3a0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	4604      	mov	r4, r0
 80051a4:	460d      	mov	r5, r1
 80051a6:	f7fb f9df 	bl	8000568 <__aeabi_dmul>
 80051aa:	a355      	add	r3, pc, #340	; (adr r3, 8005300 <__ieee754_pow+0x3a8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	4606      	mov	r6, r0
 80051b2:	460f      	mov	r7, r1
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fb f9d6 	bl	8000568 <__aeabi_dmul>
 80051bc:	4b5b      	ldr	r3, [pc, #364]	; (800532c <__ieee754_pow+0x3d4>)
 80051be:	4682      	mov	sl, r0
 80051c0:	468b      	mov	fp, r1
 80051c2:	2200      	movs	r2, #0
 80051c4:	4620      	mov	r0, r4
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7fb f9ce 	bl	8000568 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	a14d      	add	r1, pc, #308	; (adr r1, 8005308 <__ieee754_pow+0x3b0>)
 80051d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d6:	f7fb f80f 	bl	80001f8 <__aeabi_dsub>
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	f7fb f9c3 	bl	8000568 <__aeabi_dmul>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	2000      	movs	r0, #0
 80051e8:	4951      	ldr	r1, [pc, #324]	; (8005330 <__ieee754_pow+0x3d8>)
 80051ea:	f7fb f805 	bl	80001f8 <__aeabi_dsub>
 80051ee:	4622      	mov	r2, r4
 80051f0:	4680      	mov	r8, r0
 80051f2:	4689      	mov	r9, r1
 80051f4:	462b      	mov	r3, r5
 80051f6:	4620      	mov	r0, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7fb f9b5 	bl	8000568 <__aeabi_dmul>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	f7fb f9af 	bl	8000568 <__aeabi_dmul>
 800520a:	a341      	add	r3, pc, #260	; (adr r3, 8005310 <__ieee754_pow+0x3b8>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f9aa 	bl	8000568 <__aeabi_dmul>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4650      	mov	r0, sl
 800521a:	4659      	mov	r1, fp
 800521c:	f7fa ffec 	bl	80001f8 <__aeabi_dsub>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4680      	mov	r8, r0
 8005226:	4689      	mov	r9, r1
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fa ffe6 	bl	80001fc <__adddf3>
 8005230:	2400      	movs	r4, #0
 8005232:	4632      	mov	r2, r6
 8005234:	463b      	mov	r3, r7
 8005236:	4620      	mov	r0, r4
 8005238:	460d      	mov	r5, r1
 800523a:	f7fa ffdd 	bl	80001f8 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fa ffd7 	bl	80001f8 <__aeabi_dsub>
 800524a:	9b00      	ldr	r3, [sp, #0]
 800524c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	4313      	orrs	r3, r2
 8005252:	4682      	mov	sl, r0
 8005254:	468b      	mov	fp, r1
 8005256:	f040 81f1 	bne.w	800563c <__ieee754_pow+0x6e4>
 800525a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005318 <__ieee754_pow+0x3c0>
 800525e:	eeb0 8a47 	vmov.f32	s16, s14
 8005262:	eef0 8a67 	vmov.f32	s17, s15
 8005266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800526a:	2600      	movs	r6, #0
 800526c:	4632      	mov	r2, r6
 800526e:	463b      	mov	r3, r7
 8005270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005274:	f7fa ffc0 	bl	80001f8 <__aeabi_dsub>
 8005278:	4622      	mov	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f7fb f974 	bl	8000568 <__aeabi_dmul>
 8005280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005284:	4680      	mov	r8, r0
 8005286:	4689      	mov	r9, r1
 8005288:	4650      	mov	r0, sl
 800528a:	4659      	mov	r1, fp
 800528c:	f7fb f96c 	bl	8000568 <__aeabi_dmul>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fa ffb0 	bl	80001fc <__adddf3>
 800529c:	4632      	mov	r2, r6
 800529e:	463b      	mov	r3, r7
 80052a0:	4680      	mov	r8, r0
 80052a2:	4689      	mov	r9, r1
 80052a4:	4620      	mov	r0, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	f7fb f95e 	bl	8000568 <__aeabi_dmul>
 80052ac:	460b      	mov	r3, r1
 80052ae:	4604      	mov	r4, r0
 80052b0:	460d      	mov	r5, r1
 80052b2:	4602      	mov	r2, r0
 80052b4:	4649      	mov	r1, r9
 80052b6:	4640      	mov	r0, r8
 80052b8:	f7fa ffa0 	bl	80001fc <__adddf3>
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <__ieee754_pow+0x3dc>)
 80052be:	4299      	cmp	r1, r3
 80052c0:	ec45 4b19 	vmov	d9, r4, r5
 80052c4:	4606      	mov	r6, r0
 80052c6:	460f      	mov	r7, r1
 80052c8:	468b      	mov	fp, r1
 80052ca:	f340 82fe 	ble.w	80058ca <__ieee754_pow+0x972>
 80052ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80052d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80052d6:	4303      	orrs	r3, r0
 80052d8:	f000 81f0 	beq.w	80056bc <__ieee754_pow+0x764>
 80052dc:	a310      	add	r3, pc, #64	; (adr r3, 8005320 <__ieee754_pow+0x3c8>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	ec51 0b18 	vmov	r0, r1, d8
 80052e6:	f7fb f93f 	bl	8000568 <__aeabi_dmul>
 80052ea:	a30d      	add	r3, pc, #52	; (adr r3, 8005320 <__ieee754_pow+0x3c8>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	e6cb      	b.n	800508a <__ieee754_pow+0x132>
 80052f2:	bf00      	nop
 80052f4:	f3af 8000 	nop.w
 80052f8:	60000000 	.word	0x60000000
 80052fc:	3ff71547 	.word	0x3ff71547
 8005300:	f85ddf44 	.word	0xf85ddf44
 8005304:	3e54ae0b 	.word	0x3e54ae0b
 8005308:	55555555 	.word	0x55555555
 800530c:	3fd55555 	.word	0x3fd55555
 8005310:	652b82fe 	.word	0x652b82fe
 8005314:	3ff71547 	.word	0x3ff71547
 8005318:	00000000 	.word	0x00000000
 800531c:	bff00000 	.word	0xbff00000
 8005320:	8800759c 	.word	0x8800759c
 8005324:	7e37e43c 	.word	0x7e37e43c
 8005328:	3ff00000 	.word	0x3ff00000
 800532c:	3fd00000 	.word	0x3fd00000
 8005330:	3fe00000 	.word	0x3fe00000
 8005334:	408fffff 	.word	0x408fffff
 8005338:	4bd7      	ldr	r3, [pc, #860]	; (8005698 <__ieee754_pow+0x740>)
 800533a:	ea03 0309 	and.w	r3, r3, r9
 800533e:	2200      	movs	r2, #0
 8005340:	b92b      	cbnz	r3, 800534e <__ieee754_pow+0x3f6>
 8005342:	4bd6      	ldr	r3, [pc, #856]	; (800569c <__ieee754_pow+0x744>)
 8005344:	f7fb f910 	bl	8000568 <__aeabi_dmul>
 8005348:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800534c:	460c      	mov	r4, r1
 800534e:	1523      	asrs	r3, r4, #20
 8005350:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005354:	4413      	add	r3, r2
 8005356:	9309      	str	r3, [sp, #36]	; 0x24
 8005358:	4bd1      	ldr	r3, [pc, #836]	; (80056a0 <__ieee754_pow+0x748>)
 800535a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800535e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005362:	429c      	cmp	r4, r3
 8005364:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005368:	dd08      	ble.n	800537c <__ieee754_pow+0x424>
 800536a:	4bce      	ldr	r3, [pc, #824]	; (80056a4 <__ieee754_pow+0x74c>)
 800536c:	429c      	cmp	r4, r3
 800536e:	f340 8163 	ble.w	8005638 <__ieee754_pow+0x6e0>
 8005372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005374:	3301      	adds	r3, #1
 8005376:	9309      	str	r3, [sp, #36]	; 0x24
 8005378:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800537c:	2400      	movs	r4, #0
 800537e:	00e3      	lsls	r3, r4, #3
 8005380:	930b      	str	r3, [sp, #44]	; 0x2c
 8005382:	4bc9      	ldr	r3, [pc, #804]	; (80056a8 <__ieee754_pow+0x750>)
 8005384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005388:	ed93 7b00 	vldr	d7, [r3]
 800538c:	4629      	mov	r1, r5
 800538e:	ec53 2b17 	vmov	r2, r3, d7
 8005392:	eeb0 8a47 	vmov.f32	s16, s14
 8005396:	eef0 8a67 	vmov.f32	s17, s15
 800539a:	4682      	mov	sl, r0
 800539c:	f7fa ff2c 	bl	80001f8 <__aeabi_dsub>
 80053a0:	4652      	mov	r2, sl
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	462b      	mov	r3, r5
 80053a8:	ec51 0b18 	vmov	r0, r1, d8
 80053ac:	f7fa ff26 	bl	80001fc <__adddf3>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	2000      	movs	r0, #0
 80053b6:	49bd      	ldr	r1, [pc, #756]	; (80056ac <__ieee754_pow+0x754>)
 80053b8:	f7fb fa00 	bl	80007bc <__aeabi_ddiv>
 80053bc:	ec41 0b19 	vmov	d9, r0, r1
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb f8ce 	bl	8000568 <__aeabi_dmul>
 80053cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053d8:	2300      	movs	r3, #0
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053e0:	46ab      	mov	fp, r5
 80053e2:	106d      	asrs	r5, r5, #1
 80053e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80053e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80053ec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80053f0:	2200      	movs	r2, #0
 80053f2:	4640      	mov	r0, r8
 80053f4:	4649      	mov	r1, r9
 80053f6:	4614      	mov	r4, r2
 80053f8:	461d      	mov	r5, r3
 80053fa:	f7fb f8b5 	bl	8000568 <__aeabi_dmul>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fa fef7 	bl	80001f8 <__aeabi_dsub>
 800540a:	ec53 2b18 	vmov	r2, r3, d8
 800540e:	4606      	mov	r6, r0
 8005410:	460f      	mov	r7, r1
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fa feef 	bl	80001f8 <__aeabi_dsub>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4650      	mov	r0, sl
 8005420:	4659      	mov	r1, fp
 8005422:	f7fa fee9 	bl	80001f8 <__aeabi_dsub>
 8005426:	4642      	mov	r2, r8
 8005428:	464b      	mov	r3, r9
 800542a:	f7fb f89d 	bl	8000568 <__aeabi_dmul>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4630      	mov	r0, r6
 8005434:	4639      	mov	r1, r7
 8005436:	f7fa fedf 	bl	80001f8 <__aeabi_dsub>
 800543a:	ec53 2b19 	vmov	r2, r3, d9
 800543e:	f7fb f893 	bl	8000568 <__aeabi_dmul>
 8005442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005446:	ec41 0b18 	vmov	d8, r0, r1
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7fb f88b 	bl	8000568 <__aeabi_dmul>
 8005452:	a37d      	add	r3, pc, #500	; (adr r3, 8005648 <__ieee754_pow+0x6f0>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	4604      	mov	r4, r0
 800545a:	460d      	mov	r5, r1
 800545c:	f7fb f884 	bl	8000568 <__aeabi_dmul>
 8005460:	a37b      	add	r3, pc, #492	; (adr r3, 8005650 <__ieee754_pow+0x6f8>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fa fec9 	bl	80001fc <__adddf3>
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	f7fb f87b 	bl	8000568 <__aeabi_dmul>
 8005472:	a379      	add	r3, pc, #484	; (adr r3, 8005658 <__ieee754_pow+0x700>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fa fec0 	bl	80001fc <__adddf3>
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	f7fb f872 	bl	8000568 <__aeabi_dmul>
 8005484:	a376      	add	r3, pc, #472	; (adr r3, 8005660 <__ieee754_pow+0x708>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fa feb7 	bl	80001fc <__adddf3>
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	f7fb f869 	bl	8000568 <__aeabi_dmul>
 8005496:	a374      	add	r3, pc, #464	; (adr r3, 8005668 <__ieee754_pow+0x710>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f7fa feae 	bl	80001fc <__adddf3>
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	f7fb f860 	bl	8000568 <__aeabi_dmul>
 80054a8:	a371      	add	r3, pc, #452	; (adr r3, 8005670 <__ieee754_pow+0x718>)
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	f7fa fea5 	bl	80001fc <__adddf3>
 80054b2:	4622      	mov	r2, r4
 80054b4:	4606      	mov	r6, r0
 80054b6:	460f      	mov	r7, r1
 80054b8:	462b      	mov	r3, r5
 80054ba:	4620      	mov	r0, r4
 80054bc:	4629      	mov	r1, r5
 80054be:	f7fb f853 	bl	8000568 <__aeabi_dmul>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fb f84d 	bl	8000568 <__aeabi_dmul>
 80054ce:	4642      	mov	r2, r8
 80054d0:	4604      	mov	r4, r0
 80054d2:	460d      	mov	r5, r1
 80054d4:	464b      	mov	r3, r9
 80054d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054da:	f7fa fe8f 	bl	80001fc <__adddf3>
 80054de:	ec53 2b18 	vmov	r2, r3, d8
 80054e2:	f7fb f841 	bl	8000568 <__aeabi_dmul>
 80054e6:	4622      	mov	r2, r4
 80054e8:	462b      	mov	r3, r5
 80054ea:	f7fa fe87 	bl	80001fc <__adddf3>
 80054ee:	4642      	mov	r2, r8
 80054f0:	4682      	mov	sl, r0
 80054f2:	468b      	mov	fp, r1
 80054f4:	464b      	mov	r3, r9
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f7fb f835 	bl	8000568 <__aeabi_dmul>
 80054fe:	4b6c      	ldr	r3, [pc, #432]	; (80056b0 <__ieee754_pow+0x758>)
 8005500:	2200      	movs	r2, #0
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	f7fa fe79 	bl	80001fc <__adddf3>
 800550a:	4652      	mov	r2, sl
 800550c:	465b      	mov	r3, fp
 800550e:	f7fa fe75 	bl	80001fc <__adddf3>
 8005512:	9c04      	ldr	r4, [sp, #16]
 8005514:	460d      	mov	r5, r1
 8005516:	4622      	mov	r2, r4
 8005518:	460b      	mov	r3, r1
 800551a:	4640      	mov	r0, r8
 800551c:	4649      	mov	r1, r9
 800551e:	f7fb f823 	bl	8000568 <__aeabi_dmul>
 8005522:	4b63      	ldr	r3, [pc, #396]	; (80056b0 <__ieee754_pow+0x758>)
 8005524:	4680      	mov	r8, r0
 8005526:	4689      	mov	r9, r1
 8005528:	2200      	movs	r2, #0
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	f7fa fe63 	bl	80001f8 <__aeabi_dsub>
 8005532:	4632      	mov	r2, r6
 8005534:	463b      	mov	r3, r7
 8005536:	f7fa fe5f 	bl	80001f8 <__aeabi_dsub>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4650      	mov	r0, sl
 8005540:	4659      	mov	r1, fp
 8005542:	f7fa fe59 	bl	80001f8 <__aeabi_dsub>
 8005546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800554a:	f7fb f80d 	bl	8000568 <__aeabi_dmul>
 800554e:	4622      	mov	r2, r4
 8005550:	4606      	mov	r6, r0
 8005552:	460f      	mov	r7, r1
 8005554:	462b      	mov	r3, r5
 8005556:	ec51 0b18 	vmov	r0, r1, d8
 800555a:	f7fb f805 	bl	8000568 <__aeabi_dmul>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	f7fa fe49 	bl	80001fc <__adddf3>
 800556a:	4606      	mov	r6, r0
 800556c:	460f      	mov	r7, r1
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4640      	mov	r0, r8
 8005574:	4649      	mov	r1, r9
 8005576:	f7fa fe41 	bl	80001fc <__adddf3>
 800557a:	9c04      	ldr	r4, [sp, #16]
 800557c:	a33e      	add	r3, pc, #248	; (adr r3, 8005678 <__ieee754_pow+0x720>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	4620      	mov	r0, r4
 8005584:	460d      	mov	r5, r1
 8005586:	f7fa ffef 	bl	8000568 <__aeabi_dmul>
 800558a:	4642      	mov	r2, r8
 800558c:	ec41 0b18 	vmov	d8, r0, r1
 8005590:	464b      	mov	r3, r9
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fa fe2f 	bl	80001f8 <__aeabi_dsub>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fa fe29 	bl	80001f8 <__aeabi_dsub>
 80055a6:	a336      	add	r3, pc, #216	; (adr r3, 8005680 <__ieee754_pow+0x728>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fa ffdc 	bl	8000568 <__aeabi_dmul>
 80055b0:	a335      	add	r3, pc, #212	; (adr r3, 8005688 <__ieee754_pow+0x730>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	4606      	mov	r6, r0
 80055b8:	460f      	mov	r7, r1
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa ffd3 	bl	8000568 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fa fe17 	bl	80001fc <__adddf3>
 80055ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <__ieee754_pow+0x75c>)
 80055d2:	4413      	add	r3, r2
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fa fe10 	bl	80001fc <__adddf3>
 80055dc:	4682      	mov	sl, r0
 80055de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e0:	468b      	mov	fp, r1
 80055e2:	f7fa ff57 	bl	8000494 <__aeabi_i2d>
 80055e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055e8:	4b33      	ldr	r3, [pc, #204]	; (80056b8 <__ieee754_pow+0x760>)
 80055ea:	4413      	add	r3, r2
 80055ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f0:	4606      	mov	r6, r0
 80055f2:	460f      	mov	r7, r1
 80055f4:	4652      	mov	r2, sl
 80055f6:	465b      	mov	r3, fp
 80055f8:	ec51 0b18 	vmov	r0, r1, d8
 80055fc:	f7fa fdfe 	bl	80001fc <__adddf3>
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	f7fa fdfa 	bl	80001fc <__adddf3>
 8005608:	4632      	mov	r2, r6
 800560a:	463b      	mov	r3, r7
 800560c:	f7fa fdf6 	bl	80001fc <__adddf3>
 8005610:	9c04      	ldr	r4, [sp, #16]
 8005612:	4632      	mov	r2, r6
 8005614:	463b      	mov	r3, r7
 8005616:	4620      	mov	r0, r4
 8005618:	460d      	mov	r5, r1
 800561a:	f7fa fded 	bl	80001f8 <__aeabi_dsub>
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	f7fa fde9 	bl	80001f8 <__aeabi_dsub>
 8005626:	ec53 2b18 	vmov	r2, r3, d8
 800562a:	f7fa fde5 	bl	80001f8 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4650      	mov	r0, sl
 8005634:	4659      	mov	r1, fp
 8005636:	e606      	b.n	8005246 <__ieee754_pow+0x2ee>
 8005638:	2401      	movs	r4, #1
 800563a:	e6a0      	b.n	800537e <__ieee754_pow+0x426>
 800563c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005690 <__ieee754_pow+0x738>
 8005640:	e60d      	b.n	800525e <__ieee754_pow+0x306>
 8005642:	bf00      	nop
 8005644:	f3af 8000 	nop.w
 8005648:	4a454eef 	.word	0x4a454eef
 800564c:	3fca7e28 	.word	0x3fca7e28
 8005650:	93c9db65 	.word	0x93c9db65
 8005654:	3fcd864a 	.word	0x3fcd864a
 8005658:	a91d4101 	.word	0xa91d4101
 800565c:	3fd17460 	.word	0x3fd17460
 8005660:	518f264d 	.word	0x518f264d
 8005664:	3fd55555 	.word	0x3fd55555
 8005668:	db6fabff 	.word	0xdb6fabff
 800566c:	3fdb6db6 	.word	0x3fdb6db6
 8005670:	33333303 	.word	0x33333303
 8005674:	3fe33333 	.word	0x3fe33333
 8005678:	e0000000 	.word	0xe0000000
 800567c:	3feec709 	.word	0x3feec709
 8005680:	dc3a03fd 	.word	0xdc3a03fd
 8005684:	3feec709 	.word	0x3feec709
 8005688:	145b01f5 	.word	0x145b01f5
 800568c:	be3e2fe0 	.word	0xbe3e2fe0
 8005690:	00000000 	.word	0x00000000
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	7ff00000 	.word	0x7ff00000
 800569c:	43400000 	.word	0x43400000
 80056a0:	0003988e 	.word	0x0003988e
 80056a4:	000bb679 	.word	0x000bb679
 80056a8:	08006c48 	.word	0x08006c48
 80056ac:	3ff00000 	.word	0x3ff00000
 80056b0:	40080000 	.word	0x40080000
 80056b4:	08006c68 	.word	0x08006c68
 80056b8:	08006c58 	.word	0x08006c58
 80056bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8005994 <__ieee754_pow+0xa3c>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	4640      	mov	r0, r8
 80056c4:	4649      	mov	r1, r9
 80056c6:	f7fa fd99 	bl	80001fc <__adddf3>
 80056ca:	4622      	mov	r2, r4
 80056cc:	ec41 0b1a 	vmov	d10, r0, r1
 80056d0:	462b      	mov	r3, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa fd8f 	bl	80001f8 <__aeabi_dsub>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	ec51 0b1a 	vmov	r0, r1, d10
 80056e2:	f7fb f9d1 	bl	8000a88 <__aeabi_dcmpgt>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f47f adf8 	bne.w	80052dc <__ieee754_pow+0x384>
 80056ec:	4aa4      	ldr	r2, [pc, #656]	; (8005980 <__ieee754_pow+0xa28>)
 80056ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f340 810b 	ble.w	800590e <__ieee754_pow+0x9b6>
 80056f8:	151b      	asrs	r3, r3, #20
 80056fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80056fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005702:	fa4a f303 	asr.w	r3, sl, r3
 8005706:	445b      	add	r3, fp
 8005708:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800570c:	4e9d      	ldr	r6, [pc, #628]	; (8005984 <__ieee754_pow+0xa2c>)
 800570e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005712:	4116      	asrs	r6, r2
 8005714:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005718:	2000      	movs	r0, #0
 800571a:	ea23 0106 	bic.w	r1, r3, r6
 800571e:	f1c2 0214 	rsb	r2, r2, #20
 8005722:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005726:	fa4a fa02 	asr.w	sl, sl, r2
 800572a:	f1bb 0f00 	cmp.w	fp, #0
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	bfb8      	it	lt
 8005738:	f1ca 0a00 	rsblt	sl, sl, #0
 800573c:	f7fa fd5c 	bl	80001f8 <__aeabi_dsub>
 8005740:	ec41 0b19 	vmov	d9, r0, r1
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	ec51 0b19 	vmov	r0, r1, d9
 800574c:	f7fa fd56 	bl	80001fc <__adddf3>
 8005750:	2400      	movs	r4, #0
 8005752:	a379      	add	r3, pc, #484	; (adr r3, 8005938 <__ieee754_pow+0x9e0>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	4620      	mov	r0, r4
 800575a:	460d      	mov	r5, r1
 800575c:	f7fa ff04 	bl	8000568 <__aeabi_dmul>
 8005760:	ec53 2b19 	vmov	r2, r3, d9
 8005764:	4606      	mov	r6, r0
 8005766:	460f      	mov	r7, r1
 8005768:	4620      	mov	r0, r4
 800576a:	4629      	mov	r1, r5
 800576c:	f7fa fd44 	bl	80001f8 <__aeabi_dsub>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4640      	mov	r0, r8
 8005776:	4649      	mov	r1, r9
 8005778:	f7fa fd3e 	bl	80001f8 <__aeabi_dsub>
 800577c:	a370      	add	r3, pc, #448	; (adr r3, 8005940 <__ieee754_pow+0x9e8>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fef1 	bl	8000568 <__aeabi_dmul>
 8005786:	a370      	add	r3, pc, #448	; (adr r3, 8005948 <__ieee754_pow+0x9f0>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	4680      	mov	r8, r0
 800578e:	4689      	mov	r9, r1
 8005790:	4620      	mov	r0, r4
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa fee8 	bl	8000568 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4640      	mov	r0, r8
 800579e:	4649      	mov	r1, r9
 80057a0:	f7fa fd2c 	bl	80001fc <__adddf3>
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7fa fd24 	bl	80001fc <__adddf3>
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	4680      	mov	r8, r0
 80057ba:	4689      	mov	r9, r1
 80057bc:	f7fa fd1c 	bl	80001f8 <__aeabi_dsub>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	f7fa fd16 	bl	80001f8 <__aeabi_dsub>
 80057cc:	4642      	mov	r2, r8
 80057ce:	4606      	mov	r6, r0
 80057d0:	460f      	mov	r7, r1
 80057d2:	464b      	mov	r3, r9
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fec6 	bl	8000568 <__aeabi_dmul>
 80057dc:	a35c      	add	r3, pc, #368	; (adr r3, 8005950 <__ieee754_pow+0x9f8>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	4604      	mov	r4, r0
 80057e4:	460d      	mov	r5, r1
 80057e6:	f7fa febf 	bl	8000568 <__aeabi_dmul>
 80057ea:	a35b      	add	r3, pc, #364	; (adr r3, 8005958 <__ieee754_pow+0xa00>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa fd02 	bl	80001f8 <__aeabi_dsub>
 80057f4:	4622      	mov	r2, r4
 80057f6:	462b      	mov	r3, r5
 80057f8:	f7fa feb6 	bl	8000568 <__aeabi_dmul>
 80057fc:	a358      	add	r3, pc, #352	; (adr r3, 8005960 <__ieee754_pow+0xa08>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f7fa fcfb 	bl	80001fc <__adddf3>
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	f7fa fead 	bl	8000568 <__aeabi_dmul>
 800580e:	a356      	add	r3, pc, #344	; (adr r3, 8005968 <__ieee754_pow+0xa10>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	f7fa fcf0 	bl	80001f8 <__aeabi_dsub>
 8005818:	4622      	mov	r2, r4
 800581a:	462b      	mov	r3, r5
 800581c:	f7fa fea4 	bl	8000568 <__aeabi_dmul>
 8005820:	a353      	add	r3, pc, #332	; (adr r3, 8005970 <__ieee754_pow+0xa18>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa fce9 	bl	80001fc <__adddf3>
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	f7fa fe9b 	bl	8000568 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4640      	mov	r0, r8
 8005838:	4649      	mov	r1, r9
 800583a:	f7fa fcdd 	bl	80001f8 <__aeabi_dsub>
 800583e:	4604      	mov	r4, r0
 8005840:	460d      	mov	r5, r1
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4640      	mov	r0, r8
 8005848:	4649      	mov	r1, r9
 800584a:	f7fa fe8d 	bl	8000568 <__aeabi_dmul>
 800584e:	2200      	movs	r2, #0
 8005850:	ec41 0b19 	vmov	d9, r0, r1
 8005854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005858:	4620      	mov	r0, r4
 800585a:	4629      	mov	r1, r5
 800585c:	f7fa fccc 	bl	80001f8 <__aeabi_dsub>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	ec51 0b19 	vmov	r0, r1, d9
 8005868:	f7fa ffa8 	bl	80007bc <__aeabi_ddiv>
 800586c:	4632      	mov	r2, r6
 800586e:	4604      	mov	r4, r0
 8005870:	460d      	mov	r5, r1
 8005872:	463b      	mov	r3, r7
 8005874:	4640      	mov	r0, r8
 8005876:	4649      	mov	r1, r9
 8005878:	f7fa fe76 	bl	8000568 <__aeabi_dmul>
 800587c:	4632      	mov	r2, r6
 800587e:	463b      	mov	r3, r7
 8005880:	f7fa fcbc 	bl	80001fc <__adddf3>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4620      	mov	r0, r4
 800588a:	4629      	mov	r1, r5
 800588c:	f7fa fcb4 	bl	80001f8 <__aeabi_dsub>
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	f7fa fcb0 	bl	80001f8 <__aeabi_dsub>
 8005898:	460b      	mov	r3, r1
 800589a:	4602      	mov	r2, r0
 800589c:	493a      	ldr	r1, [pc, #232]	; (8005988 <__ieee754_pow+0xa30>)
 800589e:	2000      	movs	r0, #0
 80058a0:	f7fa fcaa 	bl	80001f8 <__aeabi_dsub>
 80058a4:	e9cd 0100 	strd	r0, r1, [sp]
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80058ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b2:	da2f      	bge.n	8005914 <__ieee754_pow+0x9bc>
 80058b4:	4650      	mov	r0, sl
 80058b6:	ed9d 0b00 	vldr	d0, [sp]
 80058ba:	f001 f921 	bl	8006b00 <scalbn>
 80058be:	ec51 0b10 	vmov	r0, r1, d0
 80058c2:	ec53 2b18 	vmov	r2, r3, d8
 80058c6:	f7ff bbe0 	b.w	800508a <__ieee754_pow+0x132>
 80058ca:	4b30      	ldr	r3, [pc, #192]	; (800598c <__ieee754_pow+0xa34>)
 80058cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80058d0:	429e      	cmp	r6, r3
 80058d2:	f77f af0b 	ble.w	80056ec <__ieee754_pow+0x794>
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <__ieee754_pow+0xa38>)
 80058d8:	440b      	add	r3, r1
 80058da:	4303      	orrs	r3, r0
 80058dc:	d00b      	beq.n	80058f6 <__ieee754_pow+0x99e>
 80058de:	a326      	add	r3, pc, #152	; (adr r3, 8005978 <__ieee754_pow+0xa20>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	ec51 0b18 	vmov	r0, r1, d8
 80058e8:	f7fa fe3e 	bl	8000568 <__aeabi_dmul>
 80058ec:	a322      	add	r3, pc, #136	; (adr r3, 8005978 <__ieee754_pow+0xa20>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7ff bbca 	b.w	800508a <__ieee754_pow+0x132>
 80058f6:	4622      	mov	r2, r4
 80058f8:	462b      	mov	r3, r5
 80058fa:	f7fa fc7d 	bl	80001f8 <__aeabi_dsub>
 80058fe:	4642      	mov	r2, r8
 8005900:	464b      	mov	r3, r9
 8005902:	f7fb f8b7 	bl	8000a74 <__aeabi_dcmpge>
 8005906:	2800      	cmp	r0, #0
 8005908:	f43f aef0 	beq.w	80056ec <__ieee754_pow+0x794>
 800590c:	e7e7      	b.n	80058de <__ieee754_pow+0x986>
 800590e:	f04f 0a00 	mov.w	sl, #0
 8005912:	e717      	b.n	8005744 <__ieee754_pow+0x7ec>
 8005914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005918:	4619      	mov	r1, r3
 800591a:	e7d2      	b.n	80058c2 <__ieee754_pow+0x96a>
 800591c:	491a      	ldr	r1, [pc, #104]	; (8005988 <__ieee754_pow+0xa30>)
 800591e:	2000      	movs	r0, #0
 8005920:	f7ff bb9e 	b.w	8005060 <__ieee754_pow+0x108>
 8005924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005928:	f7ff bb9a 	b.w	8005060 <__ieee754_pow+0x108>
 800592c:	9000      	str	r0, [sp, #0]
 800592e:	f7ff bb76 	b.w	800501e <__ieee754_pow+0xc6>
 8005932:	2100      	movs	r1, #0
 8005934:	f7ff bb60 	b.w	8004ff8 <__ieee754_pow+0xa0>
 8005938:	00000000 	.word	0x00000000
 800593c:	3fe62e43 	.word	0x3fe62e43
 8005940:	fefa39ef 	.word	0xfefa39ef
 8005944:	3fe62e42 	.word	0x3fe62e42
 8005948:	0ca86c39 	.word	0x0ca86c39
 800594c:	be205c61 	.word	0xbe205c61
 8005950:	72bea4d0 	.word	0x72bea4d0
 8005954:	3e663769 	.word	0x3e663769
 8005958:	c5d26bf1 	.word	0xc5d26bf1
 800595c:	3ebbbd41 	.word	0x3ebbbd41
 8005960:	af25de2c 	.word	0xaf25de2c
 8005964:	3f11566a 	.word	0x3f11566a
 8005968:	16bebd93 	.word	0x16bebd93
 800596c:	3f66c16c 	.word	0x3f66c16c
 8005970:	5555553e 	.word	0x5555553e
 8005974:	3fc55555 	.word	0x3fc55555
 8005978:	c2f8f359 	.word	0xc2f8f359
 800597c:	01a56e1f 	.word	0x01a56e1f
 8005980:	3fe00000 	.word	0x3fe00000
 8005984:	000fffff 	.word	0x000fffff
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	4090cbff 	.word	0x4090cbff
 8005990:	3f6f3400 	.word	0x3f6f3400
 8005994:	652b82fe 	.word	0x652b82fe
 8005998:	3c971547 	.word	0x3c971547
 800599c:	00000000 	.word	0x00000000

080059a0 <__ieee754_rem_pio2>:
 80059a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	ed2d 8b02 	vpush	{d8}
 80059a8:	ec55 4b10 	vmov	r4, r5, d0
 80059ac:	4bca      	ldr	r3, [pc, #808]	; (8005cd8 <__ieee754_rem_pio2+0x338>)
 80059ae:	b08b      	sub	sp, #44	; 0x2c
 80059b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80059b4:	4598      	cmp	r8, r3
 80059b6:	4682      	mov	sl, r0
 80059b8:	9502      	str	r5, [sp, #8]
 80059ba:	dc08      	bgt.n	80059ce <__ieee754_rem_pio2+0x2e>
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	ed80 0b00 	vstr	d0, [r0]
 80059c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80059c8:	f04f 0b00 	mov.w	fp, #0
 80059cc:	e028      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 80059ce:	4bc3      	ldr	r3, [pc, #780]	; (8005cdc <__ieee754_rem_pio2+0x33c>)
 80059d0:	4598      	cmp	r8, r3
 80059d2:	dc78      	bgt.n	8005ac6 <__ieee754_rem_pio2+0x126>
 80059d4:	9b02      	ldr	r3, [sp, #8]
 80059d6:	4ec2      	ldr	r6, [pc, #776]	; (8005ce0 <__ieee754_rem_pio2+0x340>)
 80059d8:	2b00      	cmp	r3, #0
 80059da:	ee10 0a10 	vmov	r0, s0
 80059de:	a3b0      	add	r3, pc, #704	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x300>)
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	4629      	mov	r1, r5
 80059e6:	dd39      	ble.n	8005a5c <__ieee754_rem_pio2+0xbc>
 80059e8:	f7fa fc06 	bl	80001f8 <__aeabi_dsub>
 80059ec:	45b0      	cmp	r8, r6
 80059ee:	4604      	mov	r4, r0
 80059f0:	460d      	mov	r5, r1
 80059f2:	d01b      	beq.n	8005a2c <__ieee754_rem_pio2+0x8c>
 80059f4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fbfd 	bl	80001f8 <__aeabi_dsub>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9ca 2300 	strd	r2, r3, [sl]
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f7fa fbf5 	bl	80001f8 <__aeabi_dsub>
 8005a0e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fbf0 	bl	80001f8 <__aeabi_dsub>
 8005a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a1c:	f04f 0b01 	mov.w	fp, #1
 8005a20:	4658      	mov	r0, fp
 8005a22:	b00b      	add	sp, #44	; 0x2c
 8005a24:	ecbd 8b02 	vpop	{d8}
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fbe1 	bl	80001f8 <__aeabi_dsub>
 8005a36:	a3a0      	add	r3, pc, #640	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	f7fa fbda 	bl	80001f8 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	e9ca 2300 	strd	r2, r3, [sl]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fbd2 	bl	80001f8 <__aeabi_dsub>
 8005a54:	a398      	add	r3, pc, #608	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	e7db      	b.n	8005a14 <__ieee754_rem_pio2+0x74>
 8005a5c:	f7fa fbce 	bl	80001fc <__adddf3>
 8005a60:	45b0      	cmp	r8, r6
 8005a62:	4604      	mov	r4, r0
 8005a64:	460d      	mov	r5, r1
 8005a66:	d016      	beq.n	8005a96 <__ieee754_rem_pio2+0xf6>
 8005a68:	a38f      	add	r3, pc, #572	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fa fbc5 	bl	80001fc <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9ca 2300 	strd	r2, r3, [sl]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	f7fa fbbb 	bl	80001f8 <__aeabi_dsub>
 8005a82:	a389      	add	r3, pc, #548	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa fbb8 	bl	80001fc <__adddf3>
 8005a8c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a94:	e7c4      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 8005a96:	a386      	add	r3, pc, #536	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fbae 	bl	80001fc <__adddf3>
 8005aa0:	a385      	add	r3, pc, #532	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	f7fa fba7 	bl	80001fc <__adddf3>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fb9d 	bl	80001f8 <__aeabi_dsub>
 8005abe:	a37e      	add	r3, pc, #504	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	e7e0      	b.n	8005a88 <__ieee754_rem_pio2+0xe8>
 8005ac6:	4b87      	ldr	r3, [pc, #540]	; (8005ce4 <__ieee754_rem_pio2+0x344>)
 8005ac8:	4598      	cmp	r8, r3
 8005aca:	f300 80d9 	bgt.w	8005c80 <__ieee754_rem_pio2+0x2e0>
 8005ace:	f000 feed 	bl	80068ac <fabs>
 8005ad2:	ec55 4b10 	vmov	r4, r5, d0
 8005ad6:	ee10 0a10 	vmov	r0, s0
 8005ada:	a379      	add	r3, pc, #484	; (adr r3, 8005cc0 <__ieee754_rem_pio2+0x320>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fd41 	bl	8000568 <__aeabi_dmul>
 8005ae6:	4b80      	ldr	r3, [pc, #512]	; (8005ce8 <__ieee754_rem_pio2+0x348>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f7fa fb87 	bl	80001fc <__adddf3>
 8005aee:	f7fa ffeb 	bl	8000ac8 <__aeabi_d2iz>
 8005af2:	4683      	mov	fp, r0
 8005af4:	f7fa fcce 	bl	8000494 <__aeabi_i2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	ec43 2b18 	vmov	d8, r2, r3
 8005b00:	a367      	add	r3, pc, #412	; (adr r3, 8005ca0 <__ieee754_rem_pio2+0x300>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fd2f 	bl	8000568 <__aeabi_dmul>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa fb71 	bl	80001f8 <__aeabi_dsub>
 8005b16:	a364      	add	r3, pc, #400	; (adr r3, 8005ca8 <__ieee754_rem_pio2+0x308>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	ec51 0b18 	vmov	r0, r1, d8
 8005b24:	f7fa fd20 	bl	8000568 <__aeabi_dmul>
 8005b28:	f1bb 0f1f 	cmp.w	fp, #31
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	460d      	mov	r5, r1
 8005b30:	dc0d      	bgt.n	8005b4e <__ieee754_rem_pio2+0x1ae>
 8005b32:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <__ieee754_rem_pio2+0x34c>)
 8005b34:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	4543      	cmp	r3, r8
 8005b3e:	d006      	beq.n	8005b4e <__ieee754_rem_pio2+0x1ae>
 8005b40:	4622      	mov	r2, r4
 8005b42:	462b      	mov	r3, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa fb56 	bl	80001f8 <__aeabi_dsub>
 8005b4c:	e00f      	b.n	8005b6e <__ieee754_rem_pio2+0x1ce>
 8005b4e:	462b      	mov	r3, r5
 8005b50:	4622      	mov	r2, r4
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa fb4f 	bl	80001f8 <__aeabi_dsub>
 8005b5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005b5e:	9303      	str	r3, [sp, #12]
 8005b60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b64:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005b68:	f1b8 0f10 	cmp.w	r8, #16
 8005b6c:	dc02      	bgt.n	8005b74 <__ieee754_rem_pio2+0x1d4>
 8005b6e:	e9ca 0100 	strd	r0, r1, [sl]
 8005b72:	e039      	b.n	8005be8 <__ieee754_rem_pio2+0x248>
 8005b74:	a34e      	add	r3, pc, #312	; (adr r3, 8005cb0 <__ieee754_rem_pio2+0x310>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	ec51 0b18 	vmov	r0, r1, d8
 8005b7e:	f7fa fcf3 	bl	8000568 <__aeabi_dmul>
 8005b82:	4604      	mov	r4, r0
 8005b84:	460d      	mov	r5, r1
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7fa fb33 	bl	80001f8 <__aeabi_dsub>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4680      	mov	r8, r0
 8005b98:	4689      	mov	r9, r1
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	f7fa fb2b 	bl	80001f8 <__aeabi_dsub>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	f7fa fb27 	bl	80001f8 <__aeabi_dsub>
 8005baa:	a343      	add	r3, pc, #268	; (adr r3, 8005cb8 <__ieee754_rem_pio2+0x318>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	460d      	mov	r5, r1
 8005bb4:	ec51 0b18 	vmov	r0, r1, d8
 8005bb8:	f7fa fcd6 	bl	8000568 <__aeabi_dmul>
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	462b      	mov	r3, r5
 8005bc0:	f7fa fb1a 	bl	80001f8 <__aeabi_dsub>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	4640      	mov	r0, r8
 8005bce:	4649      	mov	r1, r9
 8005bd0:	f7fa fb12 	bl	80001f8 <__aeabi_dsub>
 8005bd4:	9a03      	ldr	r2, [sp, #12]
 8005bd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b31      	cmp	r3, #49	; 0x31
 8005bde:	dc24      	bgt.n	8005c2a <__ieee754_rem_pio2+0x28a>
 8005be0:	e9ca 0100 	strd	r0, r1, [sl]
 8005be4:	4646      	mov	r6, r8
 8005be6:	464f      	mov	r7, r9
 8005be8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bec:	4630      	mov	r0, r6
 8005bee:	4642      	mov	r2, r8
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fb00 	bl	80001f8 <__aeabi_dsub>
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	f7fa fafc 	bl	80001f8 <__aeabi_dsub>
 8005c00:	9b02      	ldr	r3, [sp, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c08:	f6bf af0a 	bge.w	8005a20 <__ieee754_rem_pio2+0x80>
 8005c0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c10:	f8ca 3004 	str.w	r3, [sl, #4]
 8005c14:	f8ca 8000 	str.w	r8, [sl]
 8005c18:	f8ca 0008 	str.w	r0, [sl, #8]
 8005c1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c20:	f8ca 300c 	str.w	r3, [sl, #12]
 8005c24:	f1cb 0b00 	rsb	fp, fp, #0
 8005c28:	e6fa      	b.n	8005a20 <__ieee754_rem_pio2+0x80>
 8005c2a:	a327      	add	r3, pc, #156	; (adr r3, 8005cc8 <__ieee754_rem_pio2+0x328>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	ec51 0b18 	vmov	r0, r1, d8
 8005c34:	f7fa fc98 	bl	8000568 <__aeabi_dmul>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa fad8 	bl	80001f8 <__aeabi_dsub>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	4640      	mov	r0, r8
 8005c52:	4649      	mov	r1, r9
 8005c54:	f7fa fad0 	bl	80001f8 <__aeabi_dsub>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	f7fa facc 	bl	80001f8 <__aeabi_dsub>
 8005c60:	a31b      	add	r3, pc, #108	; (adr r3, 8005cd0 <__ieee754_rem_pio2+0x330>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	4604      	mov	r4, r0
 8005c68:	460d      	mov	r5, r1
 8005c6a:	ec51 0b18 	vmov	r0, r1, d8
 8005c6e:	f7fa fc7b 	bl	8000568 <__aeabi_dmul>
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f7fa fabf 	bl	80001f8 <__aeabi_dsub>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	e75f      	b.n	8005b40 <__ieee754_rem_pio2+0x1a0>
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <__ieee754_rem_pio2+0x350>)
 8005c82:	4598      	cmp	r8, r3
 8005c84:	dd36      	ble.n	8005cf4 <__ieee754_rem_pio2+0x354>
 8005c86:	ee10 2a10 	vmov	r2, s0
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fab2 	bl	80001f8 <__aeabi_dsub>
 8005c94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c98:	e9ca 0100 	strd	r0, r1, [sl]
 8005c9c:	e694      	b.n	80059c8 <__ieee754_rem_pio2+0x28>
 8005c9e:	bf00      	nop
 8005ca0:	54400000 	.word	0x54400000
 8005ca4:	3ff921fb 	.word	0x3ff921fb
 8005ca8:	1a626331 	.word	0x1a626331
 8005cac:	3dd0b461 	.word	0x3dd0b461
 8005cb0:	1a600000 	.word	0x1a600000
 8005cb4:	3dd0b461 	.word	0x3dd0b461
 8005cb8:	2e037073 	.word	0x2e037073
 8005cbc:	3ba3198a 	.word	0x3ba3198a
 8005cc0:	6dc9c883 	.word	0x6dc9c883
 8005cc4:	3fe45f30 	.word	0x3fe45f30
 8005cc8:	2e000000 	.word	0x2e000000
 8005ccc:	3ba3198a 	.word	0x3ba3198a
 8005cd0:	252049c1 	.word	0x252049c1
 8005cd4:	397b839a 	.word	0x397b839a
 8005cd8:	3fe921fb 	.word	0x3fe921fb
 8005cdc:	4002d97b 	.word	0x4002d97b
 8005ce0:	3ff921fb 	.word	0x3ff921fb
 8005ce4:	413921fb 	.word	0x413921fb
 8005ce8:	3fe00000 	.word	0x3fe00000
 8005cec:	08006c78 	.word	0x08006c78
 8005cf0:	7fefffff 	.word	0x7fefffff
 8005cf4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005cf8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005cfc:	ee10 0a10 	vmov	r0, s0
 8005d00:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005d04:	ee10 6a10 	vmov	r6, s0
 8005d08:	460f      	mov	r7, r1
 8005d0a:	f7fa fedd 	bl	8000ac8 <__aeabi_d2iz>
 8005d0e:	f7fa fbc1 	bl	8000494 <__aeabi_i2d>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d1e:	f7fa fa6b 	bl	80001f8 <__aeabi_dsub>
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <__ieee754_rem_pio2+0x40c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	f7fa fc1f 	bl	8000568 <__aeabi_dmul>
 8005d2a:	460f      	mov	r7, r1
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	f7fa fecb 	bl	8000ac8 <__aeabi_d2iz>
 8005d32:	f7fa fbaf 	bl	8000494 <__aeabi_i2d>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d42:	f7fa fa59 	bl	80001f8 <__aeabi_dsub>
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <__ieee754_rem_pio2+0x40c>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f7fa fc0d 	bl	8000568 <__aeabi_dmul>
 8005d4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d52:	ad04      	add	r5, sp, #16
 8005d54:	f04f 0803 	mov.w	r8, #3
 8005d58:	46a9      	mov	r9, r5
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	2700      	movs	r7, #0
 8005d5e:	4632      	mov	r2, r6
 8005d60:	463b      	mov	r3, r7
 8005d62:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005d66:	46c3      	mov	fp, r8
 8005d68:	3d08      	subs	r5, #8
 8005d6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d6e:	f7fa fe63 	bl	8000a38 <__aeabi_dcmpeq>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d1f3      	bne.n	8005d5e <__ieee754_rem_pio2+0x3be>
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <__ieee754_rem_pio2+0x410>)
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4622      	mov	r2, r4
 8005d80:	465b      	mov	r3, fp
 8005d82:	4651      	mov	r1, sl
 8005d84:	4648      	mov	r0, r9
 8005d86:	f000 f993 	bl	80060b0 <__kernel_rem_pio2>
 8005d8a:	9b02      	ldr	r3, [sp, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	4683      	mov	fp, r0
 8005d90:	f6bf ae46 	bge.w	8005a20 <__ieee754_rem_pio2+0x80>
 8005d94:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005d98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d9c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005da0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005da4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005da8:	e73a      	b.n	8005c20 <__ieee754_rem_pio2+0x280>
 8005daa:	bf00      	nop
 8005dac:	41700000 	.word	0x41700000
 8005db0:	08006cf8 	.word	0x08006cf8

08005db4 <__ieee754_sqrt>:
 8005db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db8:	ec55 4b10 	vmov	r4, r5, d0
 8005dbc:	4e56      	ldr	r6, [pc, #344]	; (8005f18 <__ieee754_sqrt+0x164>)
 8005dbe:	43ae      	bics	r6, r5
 8005dc0:	ee10 0a10 	vmov	r0, s0
 8005dc4:	ee10 3a10 	vmov	r3, s0
 8005dc8:	4629      	mov	r1, r5
 8005dca:	462a      	mov	r2, r5
 8005dcc:	d110      	bne.n	8005df0 <__ieee754_sqrt+0x3c>
 8005dce:	ee10 2a10 	vmov	r2, s0
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	f7fa fbc8 	bl	8000568 <__aeabi_dmul>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fa0c 	bl	80001fc <__adddf3>
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	ec45 4b10 	vmov	d0, r4, r5
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	dc10      	bgt.n	8005e16 <__ieee754_sqrt+0x62>
 8005df4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005df8:	4330      	orrs	r0, r6
 8005dfa:	d0f5      	beq.n	8005de8 <__ieee754_sqrt+0x34>
 8005dfc:	b15d      	cbz	r5, 8005e16 <__ieee754_sqrt+0x62>
 8005dfe:	ee10 2a10 	vmov	r2, s0
 8005e02:	462b      	mov	r3, r5
 8005e04:	ee10 0a10 	vmov	r0, s0
 8005e08:	f7fa f9f6 	bl	80001f8 <__aeabi_dsub>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	f7fa fcd4 	bl	80007bc <__aeabi_ddiv>
 8005e14:	e7e6      	b.n	8005de4 <__ieee754_sqrt+0x30>
 8005e16:	1509      	asrs	r1, r1, #20
 8005e18:	d076      	beq.n	8005f08 <__ieee754_sqrt+0x154>
 8005e1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e1e:	07ce      	lsls	r6, r1, #31
 8005e20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005e24:	bf5e      	ittt	pl
 8005e26:	0fda      	lsrpl	r2, r3, #31
 8005e28:	005b      	lslpl	r3, r3, #1
 8005e2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005e2e:	0fda      	lsrs	r2, r3, #31
 8005e30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005e34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005e38:	2000      	movs	r0, #0
 8005e3a:	106d      	asrs	r5, r5, #1
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	f04f 0e16 	mov.w	lr, #22
 8005e42:	4684      	mov	ip, r0
 8005e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e48:	eb0c 0401 	add.w	r4, ip, r1
 8005e4c:	4294      	cmp	r4, r2
 8005e4e:	bfde      	ittt	le
 8005e50:	1b12      	suble	r2, r2, r4
 8005e52:	eb04 0c01 	addle.w	ip, r4, r1
 8005e56:	1840      	addle	r0, r0, r1
 8005e58:	0052      	lsls	r2, r2, #1
 8005e5a:	f1be 0e01 	subs.w	lr, lr, #1
 8005e5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005e62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005e66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e6a:	d1ed      	bne.n	8005e48 <__ieee754_sqrt+0x94>
 8005e6c:	4671      	mov	r1, lr
 8005e6e:	2720      	movs	r7, #32
 8005e70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005e74:	4562      	cmp	r2, ip
 8005e76:	eb04 060e 	add.w	r6, r4, lr
 8005e7a:	dc02      	bgt.n	8005e82 <__ieee754_sqrt+0xce>
 8005e7c:	d113      	bne.n	8005ea6 <__ieee754_sqrt+0xf2>
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	d811      	bhi.n	8005ea6 <__ieee754_sqrt+0xf2>
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	eb06 0e04 	add.w	lr, r6, r4
 8005e88:	da43      	bge.n	8005f12 <__ieee754_sqrt+0x15e>
 8005e8a:	f1be 0f00 	cmp.w	lr, #0
 8005e8e:	db40      	blt.n	8005f12 <__ieee754_sqrt+0x15e>
 8005e90:	f10c 0801 	add.w	r8, ip, #1
 8005e94:	eba2 020c 	sub.w	r2, r2, ip
 8005e98:	429e      	cmp	r6, r3
 8005e9a:	bf88      	it	hi
 8005e9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005ea0:	1b9b      	subs	r3, r3, r6
 8005ea2:	4421      	add	r1, r4
 8005ea4:	46c4      	mov	ip, r8
 8005ea6:	0052      	lsls	r2, r2, #1
 8005ea8:	3f01      	subs	r7, #1
 8005eaa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005eae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005eb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005eb6:	d1dd      	bne.n	8005e74 <__ieee754_sqrt+0xc0>
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d006      	beq.n	8005eca <__ieee754_sqrt+0x116>
 8005ebc:	1c4c      	adds	r4, r1, #1
 8005ebe:	bf13      	iteet	ne
 8005ec0:	3101      	addne	r1, #1
 8005ec2:	3001      	addeq	r0, #1
 8005ec4:	4639      	moveq	r1, r7
 8005ec6:	f021 0101 	bicne.w	r1, r1, #1
 8005eca:	1043      	asrs	r3, r0, #1
 8005ecc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ed0:	0849      	lsrs	r1, r1, #1
 8005ed2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ed6:	07c2      	lsls	r2, r0, #31
 8005ed8:	bf48      	it	mi
 8005eda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005ede:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	463d      	mov	r5, r7
 8005ee6:	e77f      	b.n	8005de8 <__ieee754_sqrt+0x34>
 8005ee8:	0ada      	lsrs	r2, r3, #11
 8005eea:	3815      	subs	r0, #21
 8005eec:	055b      	lsls	r3, r3, #21
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	d0fa      	beq.n	8005ee8 <__ieee754_sqrt+0x134>
 8005ef2:	02d7      	lsls	r7, r2, #11
 8005ef4:	d50a      	bpl.n	8005f0c <__ieee754_sqrt+0x158>
 8005ef6:	f1c1 0420 	rsb	r4, r1, #32
 8005efa:	fa23 f404 	lsr.w	r4, r3, r4
 8005efe:	1e4d      	subs	r5, r1, #1
 8005f00:	408b      	lsls	r3, r1
 8005f02:	4322      	orrs	r2, r4
 8005f04:	1b41      	subs	r1, r0, r5
 8005f06:	e788      	b.n	8005e1a <__ieee754_sqrt+0x66>
 8005f08:	4608      	mov	r0, r1
 8005f0a:	e7f0      	b.n	8005eee <__ieee754_sqrt+0x13a>
 8005f0c:	0052      	lsls	r2, r2, #1
 8005f0e:	3101      	adds	r1, #1
 8005f10:	e7ef      	b.n	8005ef2 <__ieee754_sqrt+0x13e>
 8005f12:	46e0      	mov	r8, ip
 8005f14:	e7be      	b.n	8005e94 <__ieee754_sqrt+0xe0>
 8005f16:	bf00      	nop
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <__kernel_cos>:
 8005f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	ec57 6b10 	vmov	r6, r7, d0
 8005f28:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005f2c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005f30:	ed8d 1b00 	vstr	d1, [sp]
 8005f34:	da07      	bge.n	8005f46 <__kernel_cos+0x26>
 8005f36:	ee10 0a10 	vmov	r0, s0
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fdc4 	bl	8000ac8 <__aeabi_d2iz>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f000 8088 	beq.w	8006056 <__kernel_cos+0x136>
 8005f46:	4632      	mov	r2, r6
 8005f48:	463b      	mov	r3, r7
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	f7fa fb0b 	bl	8000568 <__aeabi_dmul>
 8005f52:	4b51      	ldr	r3, [pc, #324]	; (8006098 <__kernel_cos+0x178>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	4604      	mov	r4, r0
 8005f58:	460d      	mov	r5, r1
 8005f5a:	f7fa fb05 	bl	8000568 <__aeabi_dmul>
 8005f5e:	a340      	add	r3, pc, #256	; (adr r3, 8006060 <__kernel_cos+0x140>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	4682      	mov	sl, r0
 8005f66:	468b      	mov	fp, r1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	f7fa fafc 	bl	8000568 <__aeabi_dmul>
 8005f70:	a33d      	add	r3, pc, #244	; (adr r3, 8006068 <__kernel_cos+0x148>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa f941 	bl	80001fc <__adddf3>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	f7fa faf3 	bl	8000568 <__aeabi_dmul>
 8005f82:	a33b      	add	r3, pc, #236	; (adr r3, 8006070 <__kernel_cos+0x150>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f936 	bl	80001f8 <__aeabi_dsub>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa faea 	bl	8000568 <__aeabi_dmul>
 8005f94:	a338      	add	r3, pc, #224	; (adr r3, 8006078 <__kernel_cos+0x158>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f92f 	bl	80001fc <__adddf3>
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	f7fa fae1 	bl	8000568 <__aeabi_dmul>
 8005fa6:	a336      	add	r3, pc, #216	; (adr r3, 8006080 <__kernel_cos+0x160>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa f924 	bl	80001f8 <__aeabi_dsub>
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f7fa fad8 	bl	8000568 <__aeabi_dmul>
 8005fb8:	a333      	add	r3, pc, #204	; (adr r3, 8006088 <__kernel_cos+0x168>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f91d 	bl	80001fc <__adddf3>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa facf 	bl	8000568 <__aeabi_dmul>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	f7fa facb 	bl	8000568 <__aeabi_dmul>
 8005fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	460d      	mov	r5, r1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	f7fa fac3 	bl	8000568 <__aeabi_dmul>
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7fa f905 	bl	80001f8 <__aeabi_dsub>
 8005fee:	4b2b      	ldr	r3, [pc, #172]	; (800609c <__kernel_cos+0x17c>)
 8005ff0:	4598      	cmp	r8, r3
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	dc10      	bgt.n	800601a <__kernel_cos+0xfa>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	4659      	mov	r1, fp
 8006000:	f7fa f8fa 	bl	80001f8 <__aeabi_dsub>
 8006004:	460b      	mov	r3, r1
 8006006:	4926      	ldr	r1, [pc, #152]	; (80060a0 <__kernel_cos+0x180>)
 8006008:	4602      	mov	r2, r0
 800600a:	2000      	movs	r0, #0
 800600c:	f7fa f8f4 	bl	80001f8 <__aeabi_dsub>
 8006010:	ec41 0b10 	vmov	d0, r0, r1
 8006014:	b003      	add	sp, #12
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	4b22      	ldr	r3, [pc, #136]	; (80060a4 <__kernel_cos+0x184>)
 800601c:	4920      	ldr	r1, [pc, #128]	; (80060a0 <__kernel_cos+0x180>)
 800601e:	4598      	cmp	r8, r3
 8006020:	bfcc      	ite	gt
 8006022:	4d21      	ldrgt	r5, [pc, #132]	; (80060a8 <__kernel_cos+0x188>)
 8006024:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006028:	2400      	movs	r4, #0
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	2000      	movs	r0, #0
 8006030:	f7fa f8e2 	bl	80001f8 <__aeabi_dsub>
 8006034:	4622      	mov	r2, r4
 8006036:	4680      	mov	r8, r0
 8006038:	4689      	mov	r9, r1
 800603a:	462b      	mov	r3, r5
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	f7fa f8da 	bl	80001f8 <__aeabi_dsub>
 8006044:	4632      	mov	r2, r6
 8006046:	463b      	mov	r3, r7
 8006048:	f7fa f8d6 	bl	80001f8 <__aeabi_dsub>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	e7da      	b.n	800600c <__kernel_cos+0xec>
 8006056:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006090 <__kernel_cos+0x170>
 800605a:	e7db      	b.n	8006014 <__kernel_cos+0xf4>
 800605c:	f3af 8000 	nop.w
 8006060:	be8838d4 	.word	0xbe8838d4
 8006064:	bda8fae9 	.word	0xbda8fae9
 8006068:	bdb4b1c4 	.word	0xbdb4b1c4
 800606c:	3e21ee9e 	.word	0x3e21ee9e
 8006070:	809c52ad 	.word	0x809c52ad
 8006074:	3e927e4f 	.word	0x3e927e4f
 8006078:	19cb1590 	.word	0x19cb1590
 800607c:	3efa01a0 	.word	0x3efa01a0
 8006080:	16c15177 	.word	0x16c15177
 8006084:	3f56c16c 	.word	0x3f56c16c
 8006088:	5555554c 	.word	0x5555554c
 800608c:	3fa55555 	.word	0x3fa55555
 8006090:	00000000 	.word	0x00000000
 8006094:	3ff00000 	.word	0x3ff00000
 8006098:	3fe00000 	.word	0x3fe00000
 800609c:	3fd33332 	.word	0x3fd33332
 80060a0:	3ff00000 	.word	0x3ff00000
 80060a4:	3fe90000 	.word	0x3fe90000
 80060a8:	3fd20000 	.word	0x3fd20000
 80060ac:	00000000 	.word	0x00000000

080060b0 <__kernel_rem_pio2>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	ed2d 8b02 	vpush	{d8}
 80060b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80060bc:	f112 0f14 	cmn.w	r2, #20
 80060c0:	9308      	str	r3, [sp, #32]
 80060c2:	9101      	str	r1, [sp, #4]
 80060c4:	4bc6      	ldr	r3, [pc, #792]	; (80063e0 <__kernel_rem_pio2+0x330>)
 80060c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80060c8:	9009      	str	r0, [sp, #36]	; 0x24
 80060ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060d6:	bfa8      	it	ge
 80060d8:	1ed4      	subge	r4, r2, #3
 80060da:	9306      	str	r3, [sp, #24]
 80060dc:	bfb2      	itee	lt
 80060de:	2400      	movlt	r4, #0
 80060e0:	2318      	movge	r3, #24
 80060e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80060e6:	f06f 0317 	mvn.w	r3, #23
 80060ea:	fb04 3303 	mla	r3, r4, r3, r3
 80060ee:	eb03 0a02 	add.w	sl, r3, r2
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	9a06      	ldr	r2, [sp, #24]
 80060f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80063d0 <__kernel_rem_pio2+0x320>
 80060fa:	eb03 0802 	add.w	r8, r3, r2
 80060fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006100:	1aa7      	subs	r7, r4, r2
 8006102:	ae20      	add	r6, sp, #128	; 0x80
 8006104:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006108:	2500      	movs	r5, #0
 800610a:	4545      	cmp	r5, r8
 800610c:	dd18      	ble.n	8006140 <__kernel_rem_pio2+0x90>
 800610e:	9b08      	ldr	r3, [sp, #32]
 8006110:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006114:	aa20      	add	r2, sp, #128	; 0x80
 8006116:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80063d0 <__kernel_rem_pio2+0x320>
 800611a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800611e:	f1c3 0301 	rsb	r3, r3, #1
 8006122:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	9b07      	ldr	r3, [sp, #28]
 800612a:	9a04      	ldr	r2, [sp, #16]
 800612c:	4443      	add	r3, r8
 800612e:	429a      	cmp	r2, r3
 8006130:	db2f      	blt.n	8006192 <__kernel_rem_pio2+0xe2>
 8006132:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006136:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800613a:	462f      	mov	r7, r5
 800613c:	2600      	movs	r6, #0
 800613e:	e01b      	b.n	8006178 <__kernel_rem_pio2+0xc8>
 8006140:	42ef      	cmn	r7, r5
 8006142:	d407      	bmi.n	8006154 <__kernel_rem_pio2+0xa4>
 8006144:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006148:	f7fa f9a4 	bl	8000494 <__aeabi_i2d>
 800614c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006150:	3501      	adds	r5, #1
 8006152:	e7da      	b.n	800610a <__kernel_rem_pio2+0x5a>
 8006154:	ec51 0b18 	vmov	r0, r1, d8
 8006158:	e7f8      	b.n	800614c <__kernel_rem_pio2+0x9c>
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006162:	f7fa fa01 	bl	8000568 <__aeabi_dmul>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616e:	f7fa f845 	bl	80001fc <__adddf3>
 8006172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006176:	3601      	adds	r6, #1
 8006178:	9b06      	ldr	r3, [sp, #24]
 800617a:	429e      	cmp	r6, r3
 800617c:	f1a7 0708 	sub.w	r7, r7, #8
 8006180:	ddeb      	ble.n	800615a <__kernel_rem_pio2+0xaa>
 8006182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006186:	3508      	adds	r5, #8
 8006188:	ecab 7b02 	vstmia	fp!, {d7}
 800618c:	f108 0801 	add.w	r8, r8, #1
 8006190:	e7ca      	b.n	8006128 <__kernel_rem_pio2+0x78>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	aa0c      	add	r2, sp, #48	; 0x30
 8006196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800619a:	930b      	str	r3, [sp, #44]	; 0x2c
 800619c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800619e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80061a2:	9c04      	ldr	r4, [sp, #16]
 80061a4:	930a      	str	r3, [sp, #40]	; 0x28
 80061a6:	ab98      	add	r3, sp, #608	; 0x260
 80061a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061ac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80061b0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80061b4:	f8cd b008 	str.w	fp, [sp, #8]
 80061b8:	4625      	mov	r5, r4
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	dc78      	bgt.n	80062b0 <__kernel_rem_pio2+0x200>
 80061be:	ec47 6b10 	vmov	d0, r6, r7
 80061c2:	4650      	mov	r0, sl
 80061c4:	f000 fc9c 	bl	8006b00 <scalbn>
 80061c8:	ec57 6b10 	vmov	r6, r7, d0
 80061cc:	2200      	movs	r2, #0
 80061ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80061d2:	ee10 0a10 	vmov	r0, s0
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa f9c6 	bl	8000568 <__aeabi_dmul>
 80061dc:	ec41 0b10 	vmov	d0, r0, r1
 80061e0:	f000 fb7a 	bl	80068d8 <floor>
 80061e4:	4b7f      	ldr	r3, [pc, #508]	; (80063e4 <__kernel_rem_pio2+0x334>)
 80061e6:	ec51 0b10 	vmov	r0, r1, d0
 80061ea:	2200      	movs	r2, #0
 80061ec:	f7fa f9bc 	bl	8000568 <__aeabi_dmul>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	f7f9 fffe 	bl	80001f8 <__aeabi_dsub>
 80061fc:	460f      	mov	r7, r1
 80061fe:	4606      	mov	r6, r0
 8006200:	f7fa fc62 	bl	8000ac8 <__aeabi_d2iz>
 8006204:	9007      	str	r0, [sp, #28]
 8006206:	f7fa f945 	bl	8000494 <__aeabi_i2d>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	f7f9 fff1 	bl	80001f8 <__aeabi_dsub>
 8006216:	f1ba 0f00 	cmp.w	sl, #0
 800621a:	4606      	mov	r6, r0
 800621c:	460f      	mov	r7, r1
 800621e:	dd70      	ble.n	8006302 <__kernel_rem_pio2+0x252>
 8006220:	1e62      	subs	r2, r4, #1
 8006222:	ab0c      	add	r3, sp, #48	; 0x30
 8006224:	9d07      	ldr	r5, [sp, #28]
 8006226:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800622a:	f1ca 0118 	rsb	r1, sl, #24
 800622e:	fa40 f301 	asr.w	r3, r0, r1
 8006232:	441d      	add	r5, r3
 8006234:	408b      	lsls	r3, r1
 8006236:	1ac0      	subs	r0, r0, r3
 8006238:	ab0c      	add	r3, sp, #48	; 0x30
 800623a:	9507      	str	r5, [sp, #28]
 800623c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006240:	f1ca 0317 	rsb	r3, sl, #23
 8006244:	fa40 f303 	asr.w	r3, r0, r3
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	9b02      	ldr	r3, [sp, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd66      	ble.n	800631e <__kernel_rem_pio2+0x26e>
 8006250:	9b07      	ldr	r3, [sp, #28]
 8006252:	2200      	movs	r2, #0
 8006254:	3301      	adds	r3, #1
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	4615      	mov	r5, r2
 800625a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800625e:	4294      	cmp	r4, r2
 8006260:	f300 8099 	bgt.w	8006396 <__kernel_rem_pio2+0x2e6>
 8006264:	f1ba 0f00 	cmp.w	sl, #0
 8006268:	dd07      	ble.n	800627a <__kernel_rem_pio2+0x1ca>
 800626a:	f1ba 0f01 	cmp.w	sl, #1
 800626e:	f000 80a5 	beq.w	80063bc <__kernel_rem_pio2+0x30c>
 8006272:	f1ba 0f02 	cmp.w	sl, #2
 8006276:	f000 80c1 	beq.w	80063fc <__kernel_rem_pio2+0x34c>
 800627a:	9b02      	ldr	r3, [sp, #8]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d14e      	bne.n	800631e <__kernel_rem_pio2+0x26e>
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	4958      	ldr	r1, [pc, #352]	; (80063e8 <__kernel_rem_pio2+0x338>)
 8006286:	2000      	movs	r0, #0
 8006288:	f7f9 ffb6 	bl	80001f8 <__aeabi_dsub>
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	2d00      	cmp	r5, #0
 8006292:	d044      	beq.n	800631e <__kernel_rem_pio2+0x26e>
 8006294:	4650      	mov	r0, sl
 8006296:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80063d8 <__kernel_rem_pio2+0x328>
 800629a:	f000 fc31 	bl	8006b00 <scalbn>
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	ec53 2b10 	vmov	r2, r3, d0
 80062a6:	f7f9 ffa7 	bl	80001f8 <__aeabi_dsub>
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	e036      	b.n	800631e <__kernel_rem_pio2+0x26e>
 80062b0:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <__kernel_rem_pio2+0x33c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	f7fa f956 	bl	8000568 <__aeabi_dmul>
 80062bc:	f7fa fc04 	bl	8000ac8 <__aeabi_d2iz>
 80062c0:	f7fa f8e8 	bl	8000494 <__aeabi_i2d>
 80062c4:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <__kernel_rem_pio2+0x340>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	4680      	mov	r8, r0
 80062ca:	4689      	mov	r9, r1
 80062cc:	f7fa f94c 	bl	8000568 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4630      	mov	r0, r6
 80062d6:	4639      	mov	r1, r7
 80062d8:	f7f9 ff8e 	bl	80001f8 <__aeabi_dsub>
 80062dc:	f7fa fbf4 	bl	8000ac8 <__aeabi_d2iz>
 80062e0:	9b02      	ldr	r3, [sp, #8]
 80062e2:	f843 0b04 	str.w	r0, [r3], #4
 80062e6:	3d01      	subs	r5, #1
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	ab70      	add	r3, sp, #448	; 0x1c0
 80062ec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7f9 ff80 	bl	80001fc <__adddf3>
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	e75b      	b.n	80061ba <__kernel_rem_pio2+0x10a>
 8006302:	d105      	bne.n	8006310 <__kernel_rem_pio2+0x260>
 8006304:	1e63      	subs	r3, r4, #1
 8006306:	aa0c      	add	r2, sp, #48	; 0x30
 8006308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800630c:	15c3      	asrs	r3, r0, #23
 800630e:	e79b      	b.n	8006248 <__kernel_rem_pio2+0x198>
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <__kernel_rem_pio2+0x344>)
 8006312:	2200      	movs	r2, #0
 8006314:	f7fa fbae 	bl	8000a74 <__aeabi_dcmpge>
 8006318:	2800      	cmp	r0, #0
 800631a:	d139      	bne.n	8006390 <__kernel_rem_pio2+0x2e0>
 800631c:	9002      	str	r0, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	2300      	movs	r3, #0
 8006322:	4630      	mov	r0, r6
 8006324:	4639      	mov	r1, r7
 8006326:	f7fa fb87 	bl	8000a38 <__aeabi_dcmpeq>
 800632a:	2800      	cmp	r0, #0
 800632c:	f000 80b4 	beq.w	8006498 <__kernel_rem_pio2+0x3e8>
 8006330:	f104 3bff 	add.w	fp, r4, #4294967295
 8006334:	465b      	mov	r3, fp
 8006336:	2200      	movs	r2, #0
 8006338:	9904      	ldr	r1, [sp, #16]
 800633a:	428b      	cmp	r3, r1
 800633c:	da65      	bge.n	800640a <__kernel_rem_pio2+0x35a>
 800633e:	2a00      	cmp	r2, #0
 8006340:	d07b      	beq.n	800643a <__kernel_rem_pio2+0x38a>
 8006342:	ab0c      	add	r3, sp, #48	; 0x30
 8006344:	f1aa 0a18 	sub.w	sl, sl, #24
 8006348:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a0 	beq.w	8006492 <__kernel_rem_pio2+0x3e2>
 8006352:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80063d8 <__kernel_rem_pio2+0x328>
 8006356:	4650      	mov	r0, sl
 8006358:	f000 fbd2 	bl	8006b00 <scalbn>
 800635c:	4f23      	ldr	r7, [pc, #140]	; (80063ec <__kernel_rem_pio2+0x33c>)
 800635e:	ec55 4b10 	vmov	r4, r5, d0
 8006362:	46d8      	mov	r8, fp
 8006364:	2600      	movs	r6, #0
 8006366:	f1b8 0f00 	cmp.w	r8, #0
 800636a:	f280 80cf 	bge.w	800650c <__kernel_rem_pio2+0x45c>
 800636e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80063d0 <__kernel_rem_pio2+0x320>
 8006372:	465f      	mov	r7, fp
 8006374:	f04f 0800 	mov.w	r8, #0
 8006378:	2f00      	cmp	r7, #0
 800637a:	f2c0 80fd 	blt.w	8006578 <__kernel_rem_pio2+0x4c8>
 800637e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006380:	f8df a074 	ldr.w	sl, [pc, #116]	; 80063f8 <__kernel_rem_pio2+0x348>
 8006384:	ec55 4b18 	vmov	r4, r5, d8
 8006388:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800638c:	2600      	movs	r6, #0
 800638e:	e0e5      	b.n	800655c <__kernel_rem_pio2+0x4ac>
 8006390:	2302      	movs	r3, #2
 8006392:	9302      	str	r3, [sp, #8]
 8006394:	e75c      	b.n	8006250 <__kernel_rem_pio2+0x1a0>
 8006396:	f8db 3000 	ldr.w	r3, [fp]
 800639a:	b955      	cbnz	r5, 80063b2 <__kernel_rem_pio2+0x302>
 800639c:	b123      	cbz	r3, 80063a8 <__kernel_rem_pio2+0x2f8>
 800639e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80063a2:	f8cb 3000 	str.w	r3, [fp]
 80063a6:	2301      	movs	r3, #1
 80063a8:	3201      	adds	r2, #1
 80063aa:	f10b 0b04 	add.w	fp, fp, #4
 80063ae:	461d      	mov	r5, r3
 80063b0:	e755      	b.n	800625e <__kernel_rem_pio2+0x1ae>
 80063b2:	1acb      	subs	r3, r1, r3
 80063b4:	f8cb 3000 	str.w	r3, [fp]
 80063b8:	462b      	mov	r3, r5
 80063ba:	e7f5      	b.n	80063a8 <__kernel_rem_pio2+0x2f8>
 80063bc:	1e62      	subs	r2, r4, #1
 80063be:	ab0c      	add	r3, sp, #48	; 0x30
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80063c8:	a90c      	add	r1, sp, #48	; 0x30
 80063ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063ce:	e754      	b.n	800627a <__kernel_rem_pio2+0x1ca>
	...
 80063dc:	3ff00000 	.word	0x3ff00000
 80063e0:	08006e40 	.word	0x08006e40
 80063e4:	40200000 	.word	0x40200000
 80063e8:	3ff00000 	.word	0x3ff00000
 80063ec:	3e700000 	.word	0x3e700000
 80063f0:	41700000 	.word	0x41700000
 80063f4:	3fe00000 	.word	0x3fe00000
 80063f8:	08006e00 	.word	0x08006e00
 80063fc:	1e62      	subs	r2, r4, #1
 80063fe:	ab0c      	add	r3, sp, #48	; 0x30
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006408:	e7de      	b.n	80063c8 <__kernel_rem_pio2+0x318>
 800640a:	a90c      	add	r1, sp, #48	; 0x30
 800640c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006410:	3b01      	subs	r3, #1
 8006412:	430a      	orrs	r2, r1
 8006414:	e790      	b.n	8006338 <__kernel_rem_pio2+0x288>
 8006416:	3301      	adds	r3, #1
 8006418:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800641c:	2900      	cmp	r1, #0
 800641e:	d0fa      	beq.n	8006416 <__kernel_rem_pio2+0x366>
 8006420:	9a08      	ldr	r2, [sp, #32]
 8006422:	18e3      	adds	r3, r4, r3
 8006424:	18a6      	adds	r6, r4, r2
 8006426:	aa20      	add	r2, sp, #128	; 0x80
 8006428:	1c65      	adds	r5, r4, #1
 800642a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800642e:	9302      	str	r3, [sp, #8]
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	42ab      	cmp	r3, r5
 8006434:	da04      	bge.n	8006440 <__kernel_rem_pio2+0x390>
 8006436:	461c      	mov	r4, r3
 8006438:	e6b5      	b.n	80061a6 <__kernel_rem_pio2+0xf6>
 800643a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643c:	2301      	movs	r3, #1
 800643e:	e7eb      	b.n	8006418 <__kernel_rem_pio2+0x368>
 8006440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006446:	f7fa f825 	bl	8000494 <__aeabi_i2d>
 800644a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006450:	46b3      	mov	fp, r6
 8006452:	461c      	mov	r4, r3
 8006454:	2700      	movs	r7, #0
 8006456:	f04f 0800 	mov.w	r8, #0
 800645a:	f04f 0900 	mov.w	r9, #0
 800645e:	9b06      	ldr	r3, [sp, #24]
 8006460:	429f      	cmp	r7, r3
 8006462:	dd06      	ble.n	8006472 <__kernel_rem_pio2+0x3c2>
 8006464:	ab70      	add	r3, sp, #448	; 0x1c0
 8006466:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800646a:	e9c3 8900 	strd	r8, r9, [r3]
 800646e:	3501      	adds	r5, #1
 8006470:	e7de      	b.n	8006430 <__kernel_rem_pio2+0x380>
 8006472:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006476:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800647a:	f7fa f875 	bl	8000568 <__aeabi_dmul>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	f7f9 feb9 	bl	80001fc <__adddf3>
 800648a:	3701      	adds	r7, #1
 800648c:	4680      	mov	r8, r0
 800648e:	4689      	mov	r9, r1
 8006490:	e7e5      	b.n	800645e <__kernel_rem_pio2+0x3ae>
 8006492:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006496:	e754      	b.n	8006342 <__kernel_rem_pio2+0x292>
 8006498:	ec47 6b10 	vmov	d0, r6, r7
 800649c:	f1ca 0000 	rsb	r0, sl, #0
 80064a0:	f000 fb2e 	bl	8006b00 <scalbn>
 80064a4:	ec57 6b10 	vmov	r6, r7, d0
 80064a8:	4b9f      	ldr	r3, [pc, #636]	; (8006728 <__kernel_rem_pio2+0x678>)
 80064aa:	ee10 0a10 	vmov	r0, s0
 80064ae:	2200      	movs	r2, #0
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7fa fadf 	bl	8000a74 <__aeabi_dcmpge>
 80064b6:	b300      	cbz	r0, 80064fa <__kernel_rem_pio2+0x44a>
 80064b8:	4b9c      	ldr	r3, [pc, #624]	; (800672c <__kernel_rem_pio2+0x67c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa f852 	bl	8000568 <__aeabi_dmul>
 80064c4:	f7fa fb00 	bl	8000ac8 <__aeabi_d2iz>
 80064c8:	4605      	mov	r5, r0
 80064ca:	f7f9 ffe3 	bl	8000494 <__aeabi_i2d>
 80064ce:	4b96      	ldr	r3, [pc, #600]	; (8006728 <__kernel_rem_pio2+0x678>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	f7fa f849 	bl	8000568 <__aeabi_dmul>
 80064d6:	460b      	mov	r3, r1
 80064d8:	4602      	mov	r2, r0
 80064da:	4639      	mov	r1, r7
 80064dc:	4630      	mov	r0, r6
 80064de:	f7f9 fe8b 	bl	80001f8 <__aeabi_dsub>
 80064e2:	f7fa faf1 	bl	8000ac8 <__aeabi_d2iz>
 80064e6:	f104 0b01 	add.w	fp, r4, #1
 80064ea:	ab0c      	add	r3, sp, #48	; 0x30
 80064ec:	f10a 0a18 	add.w	sl, sl, #24
 80064f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80064f4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80064f8:	e72b      	b.n	8006352 <__kernel_rem_pio2+0x2a2>
 80064fa:	4630      	mov	r0, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	f7fa fae3 	bl	8000ac8 <__aeabi_d2iz>
 8006502:	ab0c      	add	r3, sp, #48	; 0x30
 8006504:	46a3      	mov	fp, r4
 8006506:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800650a:	e722      	b.n	8006352 <__kernel_rem_pio2+0x2a2>
 800650c:	ab70      	add	r3, sp, #448	; 0x1c0
 800650e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8006512:	ab0c      	add	r3, sp, #48	; 0x30
 8006514:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006518:	f7f9 ffbc 	bl	8000494 <__aeabi_i2d>
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	f7fa f822 	bl	8000568 <__aeabi_dmul>
 8006524:	4632      	mov	r2, r6
 8006526:	e9c9 0100 	strd	r0, r1, [r9]
 800652a:	463b      	mov	r3, r7
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	f7fa f81a 	bl	8000568 <__aeabi_dmul>
 8006534:	f108 38ff 	add.w	r8, r8, #4294967295
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	e713      	b.n	8006366 <__kernel_rem_pio2+0x2b6>
 800653e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006542:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006546:	f7fa f80f 	bl	8000568 <__aeabi_dmul>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7f9 fe53 	bl	80001fc <__adddf3>
 8006556:	3601      	adds	r6, #1
 8006558:	4604      	mov	r4, r0
 800655a:	460d      	mov	r5, r1
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	429e      	cmp	r6, r3
 8006560:	dc01      	bgt.n	8006566 <__kernel_rem_pio2+0x4b6>
 8006562:	45b0      	cmp	r8, r6
 8006564:	daeb      	bge.n	800653e <__kernel_rem_pio2+0x48e>
 8006566:	ab48      	add	r3, sp, #288	; 0x120
 8006568:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800656c:	e9c3 4500 	strd	r4, r5, [r3]
 8006570:	3f01      	subs	r7, #1
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	e6ff      	b.n	8006378 <__kernel_rem_pio2+0x2c8>
 8006578:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800657a:	2b02      	cmp	r3, #2
 800657c:	dc0b      	bgt.n	8006596 <__kernel_rem_pio2+0x4e6>
 800657e:	2b00      	cmp	r3, #0
 8006580:	dc6e      	bgt.n	8006660 <__kernel_rem_pio2+0x5b0>
 8006582:	d045      	beq.n	8006610 <__kernel_rem_pio2+0x560>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	f003 0007 	and.w	r0, r3, #7
 800658a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800658e:	ecbd 8b02 	vpop	{d8}
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006598:	2b03      	cmp	r3, #3
 800659a:	d1f3      	bne.n	8006584 <__kernel_rem_pio2+0x4d4>
 800659c:	ab48      	add	r3, sp, #288	; 0x120
 800659e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80065a2:	46d0      	mov	r8, sl
 80065a4:	46d9      	mov	r9, fp
 80065a6:	f1b9 0f00 	cmp.w	r9, #0
 80065aa:	f1a8 0808 	sub.w	r8, r8, #8
 80065ae:	dc64      	bgt.n	800667a <__kernel_rem_pio2+0x5ca>
 80065b0:	465c      	mov	r4, fp
 80065b2:	2c01      	cmp	r4, #1
 80065b4:	f1aa 0a08 	sub.w	sl, sl, #8
 80065b8:	dc7e      	bgt.n	80066b8 <__kernel_rem_pio2+0x608>
 80065ba:	2000      	movs	r0, #0
 80065bc:	2100      	movs	r1, #0
 80065be:	f1bb 0f01 	cmp.w	fp, #1
 80065c2:	f300 8097 	bgt.w	80066f4 <__kernel_rem_pio2+0x644>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80065cc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8099 	bne.w	8006708 <__kernel_rem_pio2+0x658>
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	e9c3 5600 	strd	r5, r6, [r3]
 80065dc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80065e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80065e4:	e7ce      	b.n	8006584 <__kernel_rem_pio2+0x4d4>
 80065e6:	ab48      	add	r3, sp, #288	; 0x120
 80065e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fe04 	bl	80001fc <__adddf3>
 80065f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065f8:	f1bb 0f00 	cmp.w	fp, #0
 80065fc:	daf3      	bge.n	80065e6 <__kernel_rem_pio2+0x536>
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	b113      	cbz	r3, 8006608 <__kernel_rem_pio2+0x558>
 8006602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006606:	4619      	mov	r1, r3
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	e9c3 0100 	strd	r0, r1, [r3]
 800660e:	e7b9      	b.n	8006584 <__kernel_rem_pio2+0x4d4>
 8006610:	2000      	movs	r0, #0
 8006612:	2100      	movs	r1, #0
 8006614:	e7f0      	b.n	80065f8 <__kernel_rem_pio2+0x548>
 8006616:	ab48      	add	r3, sp, #288	; 0x120
 8006618:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fdec 	bl	80001fc <__adddf3>
 8006624:	3c01      	subs	r4, #1
 8006626:	2c00      	cmp	r4, #0
 8006628:	daf5      	bge.n	8006616 <__kernel_rem_pio2+0x566>
 800662a:	9b02      	ldr	r3, [sp, #8]
 800662c:	b1e3      	cbz	r3, 8006668 <__kernel_rem_pio2+0x5b8>
 800662e:	4602      	mov	r2, r0
 8006630:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006634:	9c01      	ldr	r4, [sp, #4]
 8006636:	e9c4 2300 	strd	r2, r3, [r4]
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006642:	f7f9 fdd9 	bl	80001f8 <__aeabi_dsub>
 8006646:	ad4a      	add	r5, sp, #296	; 0x128
 8006648:	2401      	movs	r4, #1
 800664a:	45a3      	cmp	fp, r4
 800664c:	da0f      	bge.n	800666e <__kernel_rem_pio2+0x5be>
 800664e:	9b02      	ldr	r3, [sp, #8]
 8006650:	b113      	cbz	r3, 8006658 <__kernel_rem_pio2+0x5a8>
 8006652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006656:	4619      	mov	r1, r3
 8006658:	9b01      	ldr	r3, [sp, #4]
 800665a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800665e:	e791      	b.n	8006584 <__kernel_rem_pio2+0x4d4>
 8006660:	465c      	mov	r4, fp
 8006662:	2000      	movs	r0, #0
 8006664:	2100      	movs	r1, #0
 8006666:	e7de      	b.n	8006626 <__kernel_rem_pio2+0x576>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	e7e2      	b.n	8006634 <__kernel_rem_pio2+0x584>
 800666e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006672:	f7f9 fdc3 	bl	80001fc <__adddf3>
 8006676:	3401      	adds	r4, #1
 8006678:	e7e7      	b.n	800664a <__kernel_rem_pio2+0x59a>
 800667a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800667e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8006682:	4620      	mov	r0, r4
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	4629      	mov	r1, r5
 800668a:	f7f9 fdb7 	bl	80001fc <__adddf3>
 800668e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4620      	mov	r0, r4
 8006698:	4629      	mov	r1, r5
 800669a:	f7f9 fdad 	bl	80001f8 <__aeabi_dsub>
 800669e:	4632      	mov	r2, r6
 80066a0:	463b      	mov	r3, r7
 80066a2:	f7f9 fdab 	bl	80001fc <__adddf3>
 80066a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80066aa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80066ae:	ed88 7b00 	vstr	d7, [r8]
 80066b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80066b6:	e776      	b.n	80065a6 <__kernel_rem_pio2+0x4f6>
 80066b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80066bc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80066c0:	4640      	mov	r0, r8
 80066c2:	4632      	mov	r2, r6
 80066c4:	463b      	mov	r3, r7
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7f9 fd98 	bl	80001fc <__adddf3>
 80066cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4640      	mov	r0, r8
 80066d6:	4649      	mov	r1, r9
 80066d8:	f7f9 fd8e 	bl	80001f8 <__aeabi_dsub>
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	f7f9 fd8c 	bl	80001fc <__adddf3>
 80066e4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80066e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80066ec:	ed8a 7b00 	vstr	d7, [sl]
 80066f0:	3c01      	subs	r4, #1
 80066f2:	e75e      	b.n	80065b2 <__kernel_rem_pio2+0x502>
 80066f4:	ab48      	add	r3, sp, #288	; 0x120
 80066f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f7f9 fd7d 	bl	80001fc <__adddf3>
 8006702:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006706:	e75a      	b.n	80065be <__kernel_rem_pio2+0x50e>
 8006708:	9b01      	ldr	r3, [sp, #4]
 800670a:	9a01      	ldr	r2, [sp, #4]
 800670c:	601d      	str	r5, [r3, #0]
 800670e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006712:	605c      	str	r4, [r3, #4]
 8006714:	609f      	str	r7, [r3, #8]
 8006716:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800671a:	60d3      	str	r3, [r2, #12]
 800671c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006720:	6110      	str	r0, [r2, #16]
 8006722:	6153      	str	r3, [r2, #20]
 8006724:	e72e      	b.n	8006584 <__kernel_rem_pio2+0x4d4>
 8006726:	bf00      	nop
 8006728:	41700000 	.word	0x41700000
 800672c:	3e700000 	.word	0x3e700000

08006730 <__kernel_sin>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	ed2d 8b04 	vpush	{d8-d9}
 8006738:	eeb0 8a41 	vmov.f32	s16, s2
 800673c:	eef0 8a61 	vmov.f32	s17, s3
 8006740:	ec55 4b10 	vmov	r4, r5, d0
 8006744:	b083      	sub	sp, #12
 8006746:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800674a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800674e:	9001      	str	r0, [sp, #4]
 8006750:	da06      	bge.n	8006760 <__kernel_sin+0x30>
 8006752:	ee10 0a10 	vmov	r0, s0
 8006756:	4629      	mov	r1, r5
 8006758:	f7fa f9b6 	bl	8000ac8 <__aeabi_d2iz>
 800675c:	2800      	cmp	r0, #0
 800675e:	d051      	beq.n	8006804 <__kernel_sin+0xd4>
 8006760:	4622      	mov	r2, r4
 8006762:	462b      	mov	r3, r5
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	f7f9 fefe 	bl	8000568 <__aeabi_dmul>
 800676c:	4682      	mov	sl, r0
 800676e:	468b      	mov	fp, r1
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4620      	mov	r0, r4
 8006776:	4629      	mov	r1, r5
 8006778:	f7f9 fef6 	bl	8000568 <__aeabi_dmul>
 800677c:	a341      	add	r3, pc, #260	; (adr r3, 8006884 <__kernel_sin+0x154>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	4680      	mov	r8, r0
 8006784:	4689      	mov	r9, r1
 8006786:	4650      	mov	r0, sl
 8006788:	4659      	mov	r1, fp
 800678a:	f7f9 feed 	bl	8000568 <__aeabi_dmul>
 800678e:	a33f      	add	r3, pc, #252	; (adr r3, 800688c <__kernel_sin+0x15c>)
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	f7f9 fd30 	bl	80001f8 <__aeabi_dsub>
 8006798:	4652      	mov	r2, sl
 800679a:	465b      	mov	r3, fp
 800679c:	f7f9 fee4 	bl	8000568 <__aeabi_dmul>
 80067a0:	a33c      	add	r3, pc, #240	; (adr r3, 8006894 <__kernel_sin+0x164>)
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f7f9 fd29 	bl	80001fc <__adddf3>
 80067aa:	4652      	mov	r2, sl
 80067ac:	465b      	mov	r3, fp
 80067ae:	f7f9 fedb 	bl	8000568 <__aeabi_dmul>
 80067b2:	a33a      	add	r3, pc, #232	; (adr r3, 800689c <__kernel_sin+0x16c>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 fd1e 	bl	80001f8 <__aeabi_dsub>
 80067bc:	4652      	mov	r2, sl
 80067be:	465b      	mov	r3, fp
 80067c0:	f7f9 fed2 	bl	8000568 <__aeabi_dmul>
 80067c4:	a337      	add	r3, pc, #220	; (adr r3, 80068a4 <__kernel_sin+0x174>)
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f7f9 fd17 	bl	80001fc <__adddf3>
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	b9eb      	cbnz	r3, 8006812 <__kernel_sin+0xe2>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4650      	mov	r0, sl
 80067dc:	4659      	mov	r1, fp
 80067de:	f7f9 fec3 	bl	8000568 <__aeabi_dmul>
 80067e2:	a325      	add	r3, pc, #148	; (adr r3, 8006878 <__kernel_sin+0x148>)
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f7f9 fd06 	bl	80001f8 <__aeabi_dsub>
 80067ec:	4642      	mov	r2, r8
 80067ee:	464b      	mov	r3, r9
 80067f0:	f7f9 feba 	bl	8000568 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4620      	mov	r0, r4
 80067fa:	4629      	mov	r1, r5
 80067fc:	f7f9 fcfe 	bl	80001fc <__adddf3>
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	ec45 4b10 	vmov	d0, r4, r5
 8006808:	b003      	add	sp, #12
 800680a:	ecbd 8b04 	vpop	{d8-d9}
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	4b1b      	ldr	r3, [pc, #108]	; (8006880 <__kernel_sin+0x150>)
 8006814:	ec51 0b18 	vmov	r0, r1, d8
 8006818:	2200      	movs	r2, #0
 800681a:	f7f9 fea5 	bl	8000568 <__aeabi_dmul>
 800681e:	4632      	mov	r2, r6
 8006820:	ec41 0b19 	vmov	d9, r0, r1
 8006824:	463b      	mov	r3, r7
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7f9 fe9d 	bl	8000568 <__aeabi_dmul>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	ec51 0b19 	vmov	r0, r1, d9
 8006836:	f7f9 fcdf 	bl	80001f8 <__aeabi_dsub>
 800683a:	4652      	mov	r2, sl
 800683c:	465b      	mov	r3, fp
 800683e:	f7f9 fe93 	bl	8000568 <__aeabi_dmul>
 8006842:	ec53 2b18 	vmov	r2, r3, d8
 8006846:	f7f9 fcd7 	bl	80001f8 <__aeabi_dsub>
 800684a:	a30b      	add	r3, pc, #44	; (adr r3, 8006878 <__kernel_sin+0x148>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	4640      	mov	r0, r8
 8006856:	4649      	mov	r1, r9
 8006858:	f7f9 fe86 	bl	8000568 <__aeabi_dmul>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7f9 fcca 	bl	80001fc <__adddf3>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7f9 fcc2 	bl	80001f8 <__aeabi_dsub>
 8006874:	e7c4      	b.n	8006800 <__kernel_sin+0xd0>
 8006876:	bf00      	nop
 8006878:	55555549 	.word	0x55555549
 800687c:	3fc55555 	.word	0x3fc55555
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	5acfd57c 	.word	0x5acfd57c
 8006888:	3de5d93a 	.word	0x3de5d93a
 800688c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006890:	3e5ae5e6 	.word	0x3e5ae5e6
 8006894:	57b1fe7d 	.word	0x57b1fe7d
 8006898:	3ec71de3 	.word	0x3ec71de3
 800689c:	19c161d5 	.word	0x19c161d5
 80068a0:	3f2a01a0 	.word	0x3f2a01a0
 80068a4:	1110f8a6 	.word	0x1110f8a6
 80068a8:	3f811111 	.word	0x3f811111

080068ac <fabs>:
 80068ac:	ec51 0b10 	vmov	r0, r1, d0
 80068b0:	ee10 2a10 	vmov	r2, s0
 80068b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068b8:	ec43 2b10 	vmov	d0, r2, r3
 80068bc:	4770      	bx	lr

080068be <finite>:
 80068be:	b082      	sub	sp, #8
 80068c0:	ed8d 0b00 	vstr	d0, [sp]
 80068c4:	9801      	ldr	r0, [sp, #4]
 80068c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80068ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80068ce:	0fc0      	lsrs	r0, r0, #31
 80068d0:	b002      	add	sp, #8
 80068d2:	4770      	bx	lr
 80068d4:	0000      	movs	r0, r0
	...

080068d8 <floor>:
 80068d8:	ec51 0b10 	vmov	r0, r1, d0
 80068dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80068e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80068e8:	2e13      	cmp	r6, #19
 80068ea:	ee10 5a10 	vmov	r5, s0
 80068ee:	ee10 8a10 	vmov	r8, s0
 80068f2:	460c      	mov	r4, r1
 80068f4:	dc32      	bgt.n	800695c <floor+0x84>
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	da14      	bge.n	8006924 <floor+0x4c>
 80068fa:	a333      	add	r3, pc, #204	; (adr r3, 80069c8 <floor+0xf0>)
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f7f9 fc7c 	bl	80001fc <__adddf3>
 8006904:	2200      	movs	r2, #0
 8006906:	2300      	movs	r3, #0
 8006908:	f7fa f8be 	bl	8000a88 <__aeabi_dcmpgt>
 800690c:	b138      	cbz	r0, 800691e <floor+0x46>
 800690e:	2c00      	cmp	r4, #0
 8006910:	da57      	bge.n	80069c2 <floor+0xea>
 8006912:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006916:	431d      	orrs	r5, r3
 8006918:	d001      	beq.n	800691e <floor+0x46>
 800691a:	4c2d      	ldr	r4, [pc, #180]	; (80069d0 <floor+0xf8>)
 800691c:	2500      	movs	r5, #0
 800691e:	4621      	mov	r1, r4
 8006920:	4628      	mov	r0, r5
 8006922:	e025      	b.n	8006970 <floor+0x98>
 8006924:	4f2b      	ldr	r7, [pc, #172]	; (80069d4 <floor+0xfc>)
 8006926:	4137      	asrs	r7, r6
 8006928:	ea01 0307 	and.w	r3, r1, r7
 800692c:	4303      	orrs	r3, r0
 800692e:	d01f      	beq.n	8006970 <floor+0x98>
 8006930:	a325      	add	r3, pc, #148	; (adr r3, 80069c8 <floor+0xf0>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fc61 	bl	80001fc <__adddf3>
 800693a:	2200      	movs	r2, #0
 800693c:	2300      	movs	r3, #0
 800693e:	f7fa f8a3 	bl	8000a88 <__aeabi_dcmpgt>
 8006942:	2800      	cmp	r0, #0
 8006944:	d0eb      	beq.n	800691e <floor+0x46>
 8006946:	2c00      	cmp	r4, #0
 8006948:	bfbe      	ittt	lt
 800694a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800694e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006952:	19a4      	addlt	r4, r4, r6
 8006954:	ea24 0407 	bic.w	r4, r4, r7
 8006958:	2500      	movs	r5, #0
 800695a:	e7e0      	b.n	800691e <floor+0x46>
 800695c:	2e33      	cmp	r6, #51	; 0x33
 800695e:	dd0b      	ble.n	8006978 <floor+0xa0>
 8006960:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006964:	d104      	bne.n	8006970 <floor+0x98>
 8006966:	ee10 2a10 	vmov	r2, s0
 800696a:	460b      	mov	r3, r1
 800696c:	f7f9 fc46 	bl	80001fc <__adddf3>
 8006970:	ec41 0b10 	vmov	d0, r0, r1
 8006974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006978:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	fa23 f707 	lsr.w	r7, r3, r7
 8006984:	4207      	tst	r7, r0
 8006986:	d0f3      	beq.n	8006970 <floor+0x98>
 8006988:	a30f      	add	r3, pc, #60	; (adr r3, 80069c8 <floor+0xf0>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fc35 	bl	80001fc <__adddf3>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	f7fa f877 	bl	8000a88 <__aeabi_dcmpgt>
 800699a:	2800      	cmp	r0, #0
 800699c:	d0bf      	beq.n	800691e <floor+0x46>
 800699e:	2c00      	cmp	r4, #0
 80069a0:	da02      	bge.n	80069a8 <floor+0xd0>
 80069a2:	2e14      	cmp	r6, #20
 80069a4:	d103      	bne.n	80069ae <floor+0xd6>
 80069a6:	3401      	adds	r4, #1
 80069a8:	ea25 0507 	bic.w	r5, r5, r7
 80069ac:	e7b7      	b.n	800691e <floor+0x46>
 80069ae:	2301      	movs	r3, #1
 80069b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80069b4:	fa03 f606 	lsl.w	r6, r3, r6
 80069b8:	4435      	add	r5, r6
 80069ba:	4545      	cmp	r5, r8
 80069bc:	bf38      	it	cc
 80069be:	18e4      	addcc	r4, r4, r3
 80069c0:	e7f2      	b.n	80069a8 <floor+0xd0>
 80069c2:	2500      	movs	r5, #0
 80069c4:	462c      	mov	r4, r5
 80069c6:	e7aa      	b.n	800691e <floor+0x46>
 80069c8:	8800759c 	.word	0x8800759c
 80069cc:	7e37e43c 	.word	0x7e37e43c
 80069d0:	bff00000 	.word	0xbff00000
 80069d4:	000fffff 	.word	0x000fffff

080069d8 <nan>:
 80069d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80069e0 <nan+0x8>
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	00000000 	.word	0x00000000
 80069e4:	7ff80000 	.word	0x7ff80000

080069e8 <rint>:
 80069e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069ea:	ec51 0b10 	vmov	r0, r1, d0
 80069ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80069f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80069f6:	2e13      	cmp	r6, #19
 80069f8:	ee10 4a10 	vmov	r4, s0
 80069fc:	460b      	mov	r3, r1
 80069fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006a02:	dc58      	bgt.n	8006ab6 <rint+0xce>
 8006a04:	2e00      	cmp	r6, #0
 8006a06:	da2b      	bge.n	8006a60 <rint+0x78>
 8006a08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006a0c:	4302      	orrs	r2, r0
 8006a0e:	d023      	beq.n	8006a58 <rint+0x70>
 8006a10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006a14:	4302      	orrs	r2, r0
 8006a16:	4254      	negs	r4, r2
 8006a18:	4314      	orrs	r4, r2
 8006a1a:	0c4b      	lsrs	r3, r1, #17
 8006a1c:	0b24      	lsrs	r4, r4, #12
 8006a1e:	045b      	lsls	r3, r3, #17
 8006a20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006a24:	ea44 0103 	orr.w	r1, r4, r3
 8006a28:	4b32      	ldr	r3, [pc, #200]	; (8006af4 <rint+0x10c>)
 8006a2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006a2e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4630      	mov	r0, r6
 8006a38:	4639      	mov	r1, r7
 8006a3a:	f7f9 fbdf 	bl	80001fc <__adddf3>
 8006a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8006a42:	463b      	mov	r3, r7
 8006a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a48:	4632      	mov	r2, r6
 8006a4a:	f7f9 fbd5 	bl	80001f8 <__aeabi_dsub>
 8006a4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006a56:	4639      	mov	r1, r7
 8006a58:	ec41 0b10 	vmov	d0, r0, r1
 8006a5c:	b003      	add	sp, #12
 8006a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <rint+0x110>)
 8006a62:	4132      	asrs	r2, r6
 8006a64:	ea01 0702 	and.w	r7, r1, r2
 8006a68:	4307      	orrs	r7, r0
 8006a6a:	d0f5      	beq.n	8006a58 <rint+0x70>
 8006a6c:	0851      	lsrs	r1, r2, #1
 8006a6e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006a72:	4314      	orrs	r4, r2
 8006a74:	d00c      	beq.n	8006a90 <rint+0xa8>
 8006a76:	ea23 0201 	bic.w	r2, r3, r1
 8006a7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a7e:	2e13      	cmp	r6, #19
 8006a80:	fa43 f606 	asr.w	r6, r3, r6
 8006a84:	bf0c      	ite	eq
 8006a86:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006a8a:	2400      	movne	r4, #0
 8006a8c:	ea42 0306 	orr.w	r3, r2, r6
 8006a90:	4918      	ldr	r1, [pc, #96]	; (8006af4 <rint+0x10c>)
 8006a92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006a96:	4622      	mov	r2, r4
 8006a98:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fbac 	bl	80001fc <__adddf3>
 8006aa4:	e9cd 0100 	strd	r0, r1, [sp]
 8006aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fba2 	bl	80001f8 <__aeabi_dsub>
 8006ab4:	e7d0      	b.n	8006a58 <rint+0x70>
 8006ab6:	2e33      	cmp	r6, #51	; 0x33
 8006ab8:	dd07      	ble.n	8006aca <rint+0xe2>
 8006aba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006abe:	d1cb      	bne.n	8006a58 <rint+0x70>
 8006ac0:	ee10 2a10 	vmov	r2, s0
 8006ac4:	f7f9 fb9a 	bl	80001fc <__adddf3>
 8006ac8:	e7c6      	b.n	8006a58 <rint+0x70>
 8006aca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006ace:	f04f 36ff 	mov.w	r6, #4294967295
 8006ad2:	40d6      	lsrs	r6, r2
 8006ad4:	4230      	tst	r0, r6
 8006ad6:	d0bf      	beq.n	8006a58 <rint+0x70>
 8006ad8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006adc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006ae0:	bf1f      	itttt	ne
 8006ae2:	ea24 0101 	bicne.w	r1, r4, r1
 8006ae6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006aea:	fa44 f202 	asrne.w	r2, r4, r2
 8006aee:	ea41 0402 	orrne.w	r4, r1, r2
 8006af2:	e7cd      	b.n	8006a90 <rint+0xa8>
 8006af4:	08006e50 	.word	0x08006e50
 8006af8:	000fffff 	.word	0x000fffff
 8006afc:	00000000 	.word	0x00000000

08006b00 <scalbn>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	ec55 4b10 	vmov	r4, r5, d0
 8006b06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	b99a      	cbnz	r2, 8006b38 <scalbn+0x38>
 8006b10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b14:	4323      	orrs	r3, r4
 8006b16:	d036      	beq.n	8006b86 <scalbn+0x86>
 8006b18:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <scalbn+0x100>)
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	ee10 0a10 	vmov	r0, s0
 8006b20:	2200      	movs	r2, #0
 8006b22:	f7f9 fd21 	bl	8000568 <__aeabi_dmul>
 8006b26:	4b37      	ldr	r3, [pc, #220]	; (8006c04 <scalbn+0x104>)
 8006b28:	429e      	cmp	r6, r3
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	da10      	bge.n	8006b52 <scalbn+0x52>
 8006b30:	a32b      	add	r3, pc, #172	; (adr r3, 8006be0 <scalbn+0xe0>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	e03a      	b.n	8006bae <scalbn+0xae>
 8006b38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006b3c:	428a      	cmp	r2, r1
 8006b3e:	d10c      	bne.n	8006b5a <scalbn+0x5a>
 8006b40:	ee10 2a10 	vmov	r2, s0
 8006b44:	4620      	mov	r0, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	f7f9 fb58 	bl	80001fc <__adddf3>
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	e019      	b.n	8006b86 <scalbn+0x86>
 8006b52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b56:	460b      	mov	r3, r1
 8006b58:	3a36      	subs	r2, #54	; 0x36
 8006b5a:	4432      	add	r2, r6
 8006b5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006b60:	428a      	cmp	r2, r1
 8006b62:	dd08      	ble.n	8006b76 <scalbn+0x76>
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	a120      	add	r1, pc, #128	; (adr r1, 8006be8 <scalbn+0xe8>)
 8006b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b6c:	da1c      	bge.n	8006ba8 <scalbn+0xa8>
 8006b6e:	a120      	add	r1, pc, #128	; (adr r1, 8006bf0 <scalbn+0xf0>)
 8006b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b74:	e018      	b.n	8006ba8 <scalbn+0xa8>
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	dd08      	ble.n	8006b8c <scalbn+0x8c>
 8006b7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b86:	ec45 4b10 	vmov	d0, r4, r5
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b90:	da19      	bge.n	8006bc6 <scalbn+0xc6>
 8006b92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b96:	429e      	cmp	r6, r3
 8006b98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006b9c:	dd0a      	ble.n	8006bb4 <scalbn+0xb4>
 8006b9e:	a112      	add	r1, pc, #72	; (adr r1, 8006be8 <scalbn+0xe8>)
 8006ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e2      	bne.n	8006b6e <scalbn+0x6e>
 8006ba8:	a30f      	add	r3, pc, #60	; (adr r3, 8006be8 <scalbn+0xe8>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	f7f9 fcdb 	bl	8000568 <__aeabi_dmul>
 8006bb2:	e7cb      	b.n	8006b4c <scalbn+0x4c>
 8006bb4:	a10a      	add	r1, pc, #40	; (adr r1, 8006be0 <scalbn+0xe0>)
 8006bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0b8      	beq.n	8006b30 <scalbn+0x30>
 8006bbe:	a10e      	add	r1, pc, #56	; (adr r1, 8006bf8 <scalbn+0xf8>)
 8006bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc4:	e7b4      	b.n	8006b30 <scalbn+0x30>
 8006bc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bca:	3236      	adds	r2, #54	; 0x36
 8006bcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <scalbn+0x108>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	e7e8      	b.n	8006bae <scalbn+0xae>
 8006bdc:	f3af 8000 	nop.w
 8006be0:	c2f8f359 	.word	0xc2f8f359
 8006be4:	01a56e1f 	.word	0x01a56e1f
 8006be8:	8800759c 	.word	0x8800759c
 8006bec:	7e37e43c 	.word	0x7e37e43c
 8006bf0:	8800759c 	.word	0x8800759c
 8006bf4:	fe37e43c 	.word	0xfe37e43c
 8006bf8:	c2f8f359 	.word	0xc2f8f359
 8006bfc:	81a56e1f 	.word	0x81a56e1f
 8006c00:	43500000 	.word	0x43500000
 8006c04:	ffff3cb0 	.word	0xffff3cb0
 8006c08:	3c900000 	.word	0x3c900000

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
